["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.trace');\r\ngoog.require('clojure.set');\r\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\r\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\r\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\r\n});\r\n/**\r\n * Create an interceptor from named arguments\r\n */\r\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___25805 = arguments.length;\r\nvar i__4731__auto___25806 = (0);\r\nwhile(true){\r\nif((i__4731__auto___25806 < len__4730__auto___25805)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___25806]));\r\n\r\nvar G__25807 = (i__4731__auto___25806 + (1));\r\ni__4731__auto___25806 = G__25807;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\r\n});\r\n\r\nre_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__25756){\r\nvar map__25759 = p__25756;\r\nvar map__25759__$1 = (((((!((map__25759 == null))))?(((((map__25759.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__25759.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__25759):map__25759);\r\nvar m = map__25759__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25759__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25759__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\r\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25759__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5718__auto___25811 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\r\nif(temp__5718__auto___25811){\r\nvar unknown_keys_25812 = temp__5718__auto___25811;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_25812], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4131__auto__ = id;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\r\n}\r\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\r\n});\r\n\r\nre_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq25732){\r\nvar self__4718__auto__ = this;\r\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq25732));\r\n});\r\n\r\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\r\nvar G__25773 = arguments.length;\r\nswitch (G__25773) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\r\n});\r\n\r\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\r\n});\r\n\r\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\r\n});\r\n\r\nre_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\r\n\r\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\r\n});\r\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___25821 = arguments.length;\r\nvar i__4731__auto___25822 = (0);\r\nwhile(true){\r\nif((i__4731__auto___25822 < len__4730__auto___25821)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___25822]));\r\n\r\nvar G__25826 = (i__4731__auto___25822 + (1));\r\ni__4731__auto___25822 = G__25826;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\r\n});\r\n\r\nre_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\r\n});\r\n\r\nre_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3);\r\n\r\n/** @this {Function} */\r\nre_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq25783){\r\nvar G__25784 = cljs.core.first(seq25783);\r\nvar seq25783__$1 = cljs.core.next(seq25783);\r\nvar G__25785 = cljs.core.first(seq25783__$1);\r\nvar seq25783__$2 = cljs.core.next(seq25783__$1);\r\nvar G__25786 = cljs.core.first(seq25783__$2);\r\nvar seq25783__$3 = cljs.core.next(seq25783__$2);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25784,G__25785,G__25786,seq25783__$3);\r\n});\r\n\r\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\r\nvar G__25790 = arguments.length;\r\nswitch (G__25790) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\n});\r\n\r\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\r\n});\r\n\r\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\r\n});\r\n\r\nre_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\r\n\r\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\r\n});\r\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___25833 = arguments.length;\r\nvar i__4731__auto___25834 = (0);\r\nwhile(true){\r\nif((i__4731__auto___25834 < len__4730__auto___25833)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___25834]));\r\n\r\nvar G__25835 = (i__4731__auto___25834 + (1));\r\ni__4731__auto___25834 = G__25835;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\r\n});\r\n\r\nre_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\r\n});\r\n\r\nre_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\r\n\r\n/** @this {Function} */\r\nre_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq25791){\r\nvar G__25792 = cljs.core.first(seq25791);\r\nvar seq25791__$1 = cljs.core.next(seq25791);\r\nvar G__25793 = cljs.core.first(seq25791__$1);\r\nvar seq25791__$2 = cljs.core.next(seq25791__$1);\r\nvar G__25794 = cljs.core.first(seq25791__$2);\r\nvar seq25791__$3 = cljs.core.next(seq25791__$2);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25792,G__25793,G__25794,seq25791__$3);\r\n});\r\n\r\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\r\nvar temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\r\nif(cljs.core.truth_(temp__5718__auto__)){\r\nvar f = temp__5718__auto__;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\r\n} else {\r\nreturn context;\r\n}\r\n});\r\n/**\r\n * Loop over all interceptors, calling `direction` function on each,\r\n *   threading the value of `context` through every call.\r\n * \r\n *   `direction` is one of `:before` or `:after`.\r\n * \r\n *   Each iteration, the next interceptor to process is obtained from\r\n *   context's `:queue`. After they are processed, interceptors are popped\r\n *   from `:queue` and added to `:stack`.\r\n * \r\n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n *   contain all interceptors processed.\r\n * \r\n *   Returns updated `context`. Ie. the `context` which has been threaded\r\n *   through all interceptor functions.\r\n * \r\n *   Generally speaking, an interceptor's `:before` function will (if present)\r\n *   add to a `context's` `:coeffects`, while it's `:after` function\r\n *   will modify the `context`'s `:effects`.  Very approximately.\r\n * \r\n *   But because all interceptor functions are given `context`, and can\r\n *   return a modified version of it, the way is clear for an interceptor\r\n *   to introspect the stack or queue, or even modify the queue\r\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\r\n */\r\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\r\nvar context__$1 = context;\r\nwhile(true){\r\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nif(cljs.core.empty_QMARK_(queue)){\r\nreturn context__$1;\r\n} else {\r\nvar interceptor = cljs.core.peek(queue);\r\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nvar G__25841 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\r\ncontext__$1 = G__25841;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\r\n *   Returns the updated `context`.\r\n * \r\n *   In an advanced case, this function could allow an interceptor to add new\r\n *   interceptors to the `:queue` of a context.\r\n */\r\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\r\n});\r\n/**\r\n * Create a fresh context\r\n */\r\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\r\nvar G__25802 = arguments.length;\r\nswitch (G__25802) {\r\ncase 2:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\r\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\r\n});\r\n\r\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\r\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\r\n});\r\n\r\nre_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Called on completion of `:before` processing, this function prepares/modifies\r\n * `context` for the backwards sweep of processing in which an interceptor\r\n * chain's `:after` fns are called.\r\n * \r\n *   At this point in processing, the `:queue` is empty and `:stack` holds all\r\n *   the previously run interceptors. So this function enables the backwards walk\r\n *   by priming `:queue` with what's currently in `:stack`\r\n */\r\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\r\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\r\n});\r\n/**\r\n * Executes the given chain (coll) of interceptors.\r\n * \r\n * Each interceptor has this form:\r\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\r\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n * \r\n * Walks the queue of iterceptors from beginning to end, calling the\r\n * `:before` fn on each, then reverse direction and walk backwards,\r\n * calling the `:after` fn on each.\r\n * \r\n * The last interceptor in the chain presumably wraps an event\r\n * handler fn. So the overall goal of the process is to \"handle\r\n * the given event\".\r\n * \r\n * Thread a `context` through all calls. `context` has this form:\r\n * \r\n *   {:coeffects {:event [:a-query-id :some-param]\r\n *                :db    <original contents of app-db>}\r\n *    :effects   {:db    <new value for app-db>\r\n *                :dispatch  [:an-event-id :param1]}\r\n *    :queue     <a collection of further interceptors>\r\n *    :stack     <a collection of interceptors already walked>}\r\n * \r\n * `context` has `:coeffects` and `:effects` which, if this was a web\r\n * server, would be somewhat anologous to `request` and `response`\r\n * respectively.\r\n * \r\n * `coeffects` will contain data like `event` and the initial\r\n * state of `db` -  the inputs required by the event handler\r\n * (sitting presumably on the end of the chain), while handler-returned\r\n * side effects are put into `:effects` including, but not limited to,\r\n * new values for `db`.\r\n * \r\n * The first few interceptors in a chain will likely have `:before`\r\n * functions which \"prime\" the `context` by adding the event, and\r\n * the current state of app-db into `:coeffects`. But interceptors can\r\n * add whatever they want to `:coeffects` - perhaps the event handler needs\r\n * some information from localstore, or a random number, or access to\r\n * a DataScript connection.\r\n * \r\n * Equally, some interceptors in the chain will have `:after` fn\r\n * which can process the side effects accumulated into `:effects`\r\n * including but, not limited to, updates to app-db.\r\n * \r\n * Through both stages (before and after), `context` contains a `:queue`\r\n * of interceptors yet to be processed, and a `:stack` of interceptors\r\n * already done.  In advanced cases, these values can be modified by the\r\n * functions through which the context is threaded.\r\n */\r\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__25684__auto___25857 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__25684__auto___25857;\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^S","~$re-frame.interop","^T","~$re-frame.trace","^U","~$trace","^U","~$clojure.set","^W","~$set","^W","~$cljs.core","^Y","~$goog","^Z"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$console","^S","~$empty-queue","^T","~$debug-enabled?","^T"],"~:require-macros",["^ ","^U","^U","^V","^U","^Y","^Y"],"~:form",["~#list",["~$ns","^N",["^17",["^10",["^S","~:refer",["^12"]],["^T","^19",["^13","^14"]],["^U","~:as","^V","~:include-macros",true],["^W","^1:","^X"]]]]],"~:flags",["^ ","^10",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^S","^T","^U","^W"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1574163714576,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;;;AAQA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAK,AAACC,AAAKD,AACN,AAACE,AAAEJ,AAA2B,AAAA,AAAIE,AAAEG,AAAKC;;AAGhD,AAAA;;;AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAEUb;AAFV,AAAAiB,AAAAJ,AAAA,AAEmBQ;AAFnB,AAAAJ,AAAAJ,AAAA,AAEsBS;AAFtB,AAAAL,AAAAJ,AAAA,AAE6BU;AAF7B,AAGE,AAAMC;AAAN,AACE,AAAAC,AAAsB,AAACL,AAAI,AAACO,AACA,AAAA,AAAI3B,AAAEG,AAAKC,AACXN;AAF5B,AAAA,AAAA2B;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAA,AAAA,AAAA,AAACE,AAAyC5B,AAAsB0B;;AAHlE;;AADF;;AAHF,AAAA,AAQW,AAAAG,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAA;;AARX,AAAA,AASWP,AACAC;;;AAVX,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAcA,AAAA,AAAA,AAAAb,AAAM0B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAA,AAAUA;;;AAFb,AAAA,AAAA,AAAMF,AAGFE,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAkBC;;;AAJ7B,AAAA,AAAA,AAAMH,AAKFE,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACC,AAAOJ,AAAkBC,AAAKE;;;AANlC,AAAA,AAAA,AAAML;;AAAN,AAQA,AAAA,AAAMO,AACHL,AAAQC,AAAIK;AADf,AAEE,AAAA,AAAA,AAACC,AAASP,AAAkBC,AAAKK;;AAEnC,AAAA,AAAA,AAAAlC,AAAMoC;AAAN,AAAA,AAAAnC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhC;;;AAAA,AAAA,AAAA,AAAA,AAAMgC,AACHR,AAAQC,AAAIe,AAAIC;AADnB,AAEE,AAAA,AAAA,AAACC,AAAMC,AAAUnB,AAAkBC,AAAKe,AAAEC;;;AAF5C,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAMA,AAAA,AAAA,AAAArC,AAAMiD;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMsB,AACFrB;AADJ,AAEG,AAAA,AAAYA;;;AAFf,AAAA,AAAA,AAAMqB,AAGFrB,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAoBC;;;AAJ/B,AAAA,AAAA,AAAMoB,AAKFrB,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACC,AAAOJ,AAAoBC,AAAKE;;;AANpC,AAAA,AAAA,AAAMkB;;AAAN,AAQA,AAAA,AAAMC,AACHtB,AAAQC,AAAIK;AADf,AAEE,AAAA,AAAA,AAACC,AAASP,AAAoBC,AAAKK;;AAErC,AAAA,AAAA,AAAAlC,AAAMmD;AAAN,AAAA,AAAAlD,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/C;;;AAAA,AAAA,AAAA,AAAA,AAAM+C,AACHvB,AAAQC,AAAIe,AAAIC;AADnB,AAEE,AAAA,AAAA,AAACC,AAAMC,AAAUnB,AAAoBC,AAAKe,AAAEC;;;AAF9C,AAAA,AAAA,AAAMM;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAd,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAAE,AAAA,AAAAf,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAAG,AAAA,AAAAhB,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAA,AAAAU,AAAAC,AAAAC,AAAAH;;;AAAA,AAOA,AAAA,AAAOI,AACJ5B,AAAQ6B,AAAYC;AADvB,AAEE,AAAAtC,AAAW,AAACR,AAAI6C,AAAYC;AAA5B,AAAA,AAAAtC;AAAA,AAAAA,AAASwB;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAEhB,AAAAA;;AACHA;;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAO+B,AAwBH/B,AAAQ8B;AAxBZ,AAyBG,AAAO9B,AAAQA;;AAAf,AACE,AAAMgC,AAAM,AAAA,AAAQhC;AAApB,AACE,AAAI,AAACiC,AAAOD;AACVhC;;AACA,AAAM6B,AAAY,AAACK,AAAKF;AAClBG,AAAM,AAAA,AAAQnC;AADpB,AAEE,AAAWA,AACA,AAAA,AAAA,AAACoC,AAAa,AAACC,AAAIL,AACL,AAACM,AAAKH,AAAMN,AAC1B,AAACD,AAAsBC,AAAYC;;;;;;;AAGzD;;;;;;;AAAA,AAAMS,AAMHvC,AAAQwC;AANX,AAOE,AAAA,AAACC,AAAOzC,AACA,AAAC0C,AAAKC,AAAKC,AACXJ;;AAGV,AAAA;;;AAAA,AAAApE,AAAO0E;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA/C,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAO+C,AAEHC,AAAMP;AAFV,AAIM,AAAA,AAAA,AAAClB,AAAsByB,AACvB,AAACR,AAAQC;;;AALf,AAAA,AAAA,AAAOM,AAMHC,AAAMP,AAAaQ;AANvB,AAOO,AAACC,AAAQF,AAAMP,AACf,AAAA,AAAClB,AAAmB0B;;;AAR3B,AAAA,AAAA,AAAOF;;AAAP,AAWA;;;;;;;;;AAAA,AAAOI,AAQJlD;AARH,AASMA,AACA,AAAA,AAACmD,AACD,AAACZ,AAAQ,AAAA,AAAQvC;;AAGvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAMoD,AAiDHC,AAAQb;AAjDX,AAkDE,AAAA,AAAAc;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAf,AAAAgB,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AACwBX,AAAAA;AADxB,AAAA,AAAAiB,AAAAF;;AAAA;AAAA;;AAEI,AAACN,AAAQI,AAAQb,AACjB,AAAA,AAACT,AACDmB,AACA,AAAA,AAAA,AAACnB","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__25756","map__25759","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq25732","self__4718__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5718__auto__","unknown-keys","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","G__25773","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq25783","G__25784","cljs.core/first","cljs.core/next","G__25785","G__25786","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","G__25790","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq25791","G__25792","G__25793","G__25794","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/enqueue","interceptors","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","re-frame.interop/empty-queue","G__25802","re-frame.interceptor/context","event","db","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__25684__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/*current-trace*","cljs.core/merge"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1574163601000,1574163601000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1@","reagent/impl/batching.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1@","goog/dom/tagname.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","~$goog.dom.HtmlElement"]]],["^1@","goog/math/math.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","~$goog.array","~$goog.asserts"]]],["^1@","goog/labs/useragent/browser.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"]]],["^1@","re_frame/loggers.cljc"],[1574085170058,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^W"]]],["^1@","goog/array/array.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1["]]],["^1M","node_modules/prop-types/checkPropTypes.js"],[1574163601000,1574163601000,1549836454000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1@","reagent/impl/util.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^1U","^1V","^1X"]]],["^1M","node_modules/fbjs/lib/emptyFunction.js"],[1574163601000,1574163601000,1528785402000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","goog/debug/error.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1M","node_modules/fbjs/lib/emptyObject.js"],[1574163601000,1574163601000,1528785402000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","goog/dom/nodetype.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1M","node_modules/scheduler/cjs/scheduler.development.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","reagent/ratom.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^1W","^1U","~$reagent.impl.batching","^W"]]],["^1M","node_modules/scheduler/cjs/scheduler.production.min.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","re_frame/interop.cljs"],[1574085170058,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1M","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1M","node_modules/create-react-class/factory.js"],[1574163601000,1574163601000,1517346959000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1M","node_modules/react/index.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1@","shadow/js.js"],[1574163601395,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","goog/object/object.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","reagent/impl/template.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^?","^1X","~$clojure.walk","^1W","~$reagent.impl.component","^24","^27","^1V","^1U"]]],["^1M","node_modules/react-dom/cjs/react-dom.production.min.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","^?","^28","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1M","node_modules/react/cjs/react.development.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","^28","~$module$node_modules$prop_types$checkPropTypes"]]],["^1@","goog/math/long.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1[","~$goog.reflect"]]],["^1M","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1M","node_modules/fbjs/lib/warning.js"],[1574163601000,1574163601000,1528785401000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1@","goog/functions/functions.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","reagent/impl/component.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^A","^?","^1W","^24","^27","^1V","^1U"]]],["^1@","clojure/walk.cljs"],[1567262080081,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y"]]],["^1@","goog/structs/map.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration","^21"]]],["^1M","node_modules/scheduler/index.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1@","goog/labs/useragent/engine.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","^20","^22"]]],["^1@","goog/asserts/asserts.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","~$goog.debug.Error","~$goog.dom.NodeType","^22"]]],["^1@","goog/uri/uri.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","^1[","^22","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","node_modules/object-assign/index.js"],[1574163601000,1574163601000,1484580833000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","goog/base.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",[]]],["^1@","goog/structs/structs.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","^21"]]],["^1@","clojure/string.cljs"],[1567262080081,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^22","~$goog.string.StringBuffer"]]],["^1M","node_modules/create-react-class/index.js"],[1574163601000,1574163601000,1517346956000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","^?","~$module$node_modules$create_react_class$factory"]]],["^1M","node_modules/react/cjs/react.production.min.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","^28"]]],["^1@","goog/debug/entrypointregistry.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1["]]],["^1@","goog/string/string.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","re_frame/interceptor.cljc"],[1574085170058,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^S","^T","^U","^W"]]],["^1@","goog/reflect/reflect.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","goog/labs/useragent/util.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^22"]]],["^1@","reagent/core.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^?","~$reagent.impl.template","^2?","^1W","^24","^27","^1U","^1V","~$reagent.dom"]]],["^1@","goog/string/stringbuffer.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","goog/iter/iter.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","^1[","~$goog.functions","~$goog.math"]]],["^1@","goog/async/nexttick.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2T","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1@","reagent/dom.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^C","^1W","^2R","^24","^27","^1U","^1V"]]],["^1M","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1574163601000,1574163601000,1549571078000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","reagent/interop.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y"]]],["^1@","goog/dom/htmlelement.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1@","cljs/core.cljs"],[1567262080081,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["~$goog.math.Long","~$goog.math.Integer","^22","^21","^1Z","~$goog.Uri","^2P"]]],["^1@","reagent/debug.cljs"],[1567262094669,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y"]]],["^1@","goog/math/integer.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z"]]],["^1M","node_modules/scheduler/tracing.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1M","node_modules/react-dom/cjs/react-dom.development.js"],[1574163601000,1574163601000,499162500000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R","^?","^28","^2B","^2@","~$module$node_modules$scheduler$tracing"]]],["^1@","clojure/set.cljs"],[1567262080081,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y"]]],["^1@","goog/uri/utils.js"],[1567356087625,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^1Z","^1[","^22"]]],["^1M","node_modules/fbjs/lib/invariant.js"],[1574163601000,1574163601000,1528785400000,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^1R"]]],["^1@","re_frame/trace.cljc"],[1574085170058,"^1N",["^ ","^1O",null,"^1P",["^L",[]],"^1Q",["^Z","^Y","^T","^S","^2T"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1574085169000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","^V","^U","^W","^W","^X","^W","^Y","^Y","^Z","^Z"],"^[",["^L",["^10"]],"~:shadow/js-access-global",["^L",["Error"]],"^11",["^ ","^12","^S","^13","^T","^14","^T"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",20,"~:arglists",["^17",["~$quote",["^17",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^17",["^40","^41","~$f","^42"]]],"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]],"~:arglists-meta",["^17",[null]]]],"^M","~$re-frame.interceptor/update-effect","^6","re_frame/interceptor.cljc","^:",20,"^43",["^ ","^44",true,"^45",3,"^46",3,"^47",[["^17",["^40","^41","~$f","^42"]]],"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]],"^48",["^17",[null]]],"^47",[["^17",["^40","^41","~$f","^42"]]],"~:protocol-impl",null,"^45",3,"^48",["^17",[null]],"^8",1,"^44",true,"~:methods",[["^ ","^45",3,"^44",true,"~:tag","~$any"]],"^7",43,"~:ret-tag","^4=","^9",43,"^46",3,"~:fn-var",true,"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]]],"~$invoke-interceptors",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",75,"^8",8,"^9",75,"^:",27,"~:private",true,"^3Z",["^17",["^3[",["^17",[["^40","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^4A",true,"^M","~$re-frame.interceptor/invoke-interceptors","^6","re_frame/interceptor.cljc","^:",27,"^47",["^17",[["^40","^4B"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",75,"^9",75,"^46",2,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40","^4B"]]]]],"^4C","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",21,"^3Z",["^17",["^3[",["^17",[["^40","^41","~$value"]]]]]],"^M","~$re-frame.interceptor/assoc-coeffect","^6","re_frame/interceptor.cljc","^:",21,"^47",["^17",[["^40","^41","^4F"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",57,"^4>",["^L",["~$clj","^4="]],"^9",57,"^46",3,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40","^41","^4F"]]]]]],"~$update-coeffect",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",22,"^3Z",["^17",["^3[",["^17",[["^40","^41","~$f","~$&","^42"]]]]],"^43",["^ ","^44",true,"^45",3,"^46",3,"^47",[["^17",["^40","^41","~$f","^42"]]],"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]],"^48",["^17",[null]]]],"^M","~$re-frame.interceptor/update-coeffect","^6","re_frame/interceptor.cljc","^:",22,"^43",["^ ","^44",true,"^45",3,"^46",3,"^47",[["^17",["^40","^41","~$f","^42"]]],"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]],"^48",["^17",[null]]],"^47",[["^17",["^40","^41","~$f","^42"]]],"^4:",null,"^45",3,"^48",["^17",[null]],"^8",1,"^44",true,"^4;",[["^ ","^45",3,"^44",true,"^4<","^4="]],"^7",61,"^4>","^4=","^9",61,"^46",3,"^4?",true,"^3Z",["^17",[["^40","^41","~$f","~$&","^42"]]]],"~$invoke-interceptor-fn",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",68,"^8",8,"^9",68,"^:",29,"^4A",true,"^3Z",["^17",["^3[",["^17",[["^40","~$interceptor","^4B"]]]]]],"^4A",true,"^M","~$re-frame.interceptor/invoke-interceptor-fn","^6","re_frame/interceptor.cljc","^:",29,"^47",["^17",[["^40","^4L","^4B"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",68,"^4>",["^L",[null,"^4="]],"^9",68,"^46",3,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40","^4L","^4B"]]]]]],"~$get-effect",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^3Z",["^17",["^3[",["^17",[["^40"],["^40","^41"],["^40","^41","~$not-found"]]]]],"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^48",["^17",[null,null,null]]]],"^M","~$re-frame.interceptor/get-effect","^6","re_frame/interceptor.cljc","^:",17,"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^48",["^17",[null,null,null]]],"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^4:",null,"^45",3,"^48",["^17",[null,null,null]],"^8",1,"^44",false,"^4;",[["^ ","^45",1,"^44",false,"^4<","^4="],["^ ","^45",2,"^44",false,"^4<",["^L",[null,"^4="]]],["^ ","^45",3,"^44",false,"^4<","^4="]],"^7",31,"^9",31,"^46",3,"^4?",true,"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]]],"~$->interceptor",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^3Z",["^17",["^3[",["^17",[["~$&",["^ ","^1:","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^4C","Create an interceptor from named arguments","^43",["^ ","^44",true,"^45",0,"^46",0,"^47",[["^17",[["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^3Z",["^17",[["~$&",["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^48",["^17",[null]]]],"^M","~$re-frame.interceptor/->interceptor","^6","re_frame/interceptor.cljc","^:",20,"^43",["^ ","^44",true,"^45",0,"^46",0,"^47",[["^17",[["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^3Z",["^17",[["~$&",["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^48",["^17",[null]]],"^47",[["^17",[["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^4:",null,"^45",0,"^48",["^17",[null]],"^8",1,"^44",true,"^4;",[["^ ","^45",0,"^44",true,"^4<","~$cljs.core/IMap"]],"^7",17,"^4>","^4=","^9",17,"^46",0,"^4?",true,"^3Z",["^17",[["~$&",["^ ","^1:","~$m","^4R",["^4S","^4T","^4U"]]]]],"^4C","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",49,"^8",7,"^9",49,"^:",19,"^3Z",["^17",["^3[",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]]]],"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^48",["^17",[null,null,null]]]],"^M","~$re-frame.interceptor/get-coeffect","^6","re_frame/interceptor.cljc","^:",19,"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^48",["^17",[null,null,null]]],"^47",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]],"^4:",null,"^45",3,"^48",["^17",[null,null,null]],"^8",1,"^44",false,"^4;",[["^ ","^45",1,"^44",false,"^4<","^4="],["^ ","^45",2,"^44",false,"^4<",["^L",[null,"^4="]]],["^ ","^45",3,"^44",false,"^4<","^4="]],"^7",49,"^9",49,"^46",3,"^4?",true,"^3Z",["^17",[["^40"],["^40","^41"],["^40","^41","^4O"]]]],"~$execute",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",149,"^8",7,"^9",149,"^:",14,"^3Z",["^17",["^3[",["^17",[["~$event-v","~$interceptors"]]]]],"^4C","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^M","~$re-frame.interceptor/execute","^6","re_frame/interceptor.cljc","^:",14,"^47",["^17",[["^4[","^50"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",149,"^4>","^4=","^9",149,"^46",2,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^4[","^50"]]]]],"^4C","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^3Z",["^17",["^3[",["^17",[["^40","^41","^4F"]]]]]],"^M","~$re-frame.interceptor/assoc-effect","^6","re_frame/interceptor.cljc","^:",19,"^47",["^17",[["^40","^41","^4F"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",39,"^4>",["^L",["^4H","^4="]],"^9",39,"^46",3,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40","^41","^4F"]]]]]],"~$enqueue",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",112,"^8",7,"^9",112,"^:",14,"^3Z",["^17",["^3[",["^17",[["^40","^50"]]]]],"^4C","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^M","~$re-frame.interceptor/enqueue","^6","re_frame/interceptor.cljc","^:",14,"^47",["^17",[["^40","^50"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",112,"^4>",["^L",["^4H","^4="]],"^9",112,"^46",2,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40","^50"]]]]],"^4C","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^M","~$re-frame.interceptor/mandatory-interceptor-keys","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^4<","~$cljs.core/ISet"],"~$interceptor?",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^3Z",["^17",["^3[",["^17",[["~$m"]]]]]],"^M","~$re-frame.interceptor/interceptor?","^6","re_frame/interceptor.cljc","^:",19,"^47",["^17",[["~$m"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",11,"^4>","~$boolean","^9",11,"^46",1,"^4?",true,"^3Z",["^17",["^3[",["^17",[["~$m"]]]]]],"~$change-direction",["^ ","^3Y",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",135,"^8",8,"^9",135,"^:",24,"^4A",true,"^3Z",["^17",["^3[",["^17",[["^40"]]]]],"^4C","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^4A",true,"^M","~$re-frame.interceptor/change-direction","^6","re_frame/interceptor.cljc","^:",24,"^47",["^17",[["^40"]]],"^4:",null,"^48",["^17",[null,null]],"^8",1,"^44",false,"^7",135,"^4>",["^L",["^4H","^4="]],"^9",135,"^46",1,"^4?",true,"^3Z",["^17",["^3[",["^17",[["^40"]]]]],"^4C","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^40",["^ ","^3Y",null,"^5",["^ ","^4A",true,"^6","re_frame/interceptor.cljc","^:",15,"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["~$event","^50"],["^5>","^50","~$db"]]],"^3Z",["^17",[["^5>","^50"],["^5>","^50","^5?"]]],"^48",["^17",[null,null]]],"^8",8,"^7",124,"^9",124,"^3Z",["^17",["^3[",["^17",[["^5>","^50"],["^5>","^50","^5?"]]]]],"^4C","Create a fresh context"],"^4A",true,"^M","~$re-frame.interceptor/context","^6","re_frame/interceptor.cljc","^:",15,"^43",["^ ","^44",false,"^45",3,"^46",3,"^47",["^17",[["^5>","^50"],["^5>","^50","^5?"]]],"^3Z",["^17",[["^5>","^50"],["^5>","^50","^5?"]]],"^48",["^17",[null,null]]],"^47",["^17",[["^5>","^50"],["^5>","^50","^5?"]]],"^4:",null,"^45",3,"^48",["^17",[null,null]],"^8",1,"^44",false,"^4;",[["^ ","^45",2,"^44",false,"^4<",["^L",["^4H","^4="]]],["^ ","^45",3,"^44",false,"^4<",["^L",["^4H","^4="]]]],"^7",124,"^9",124,"^46",3,"^4?",true,"^3Z",["^17",[["^5>","^50"],["^5>","^50","^5?"]]],"^4C","Create a fresh context"]],"^15",["^ ","^U","^U","^V","^U","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^[",["^L",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^5G","^5H","^5N","^5K","^5B","^5I","^5L","^5E","^5J","^5F","^5D","^5C","^5M"]],"^1<",["^ ","^10",["^L",[]]],"^1=",["^ "],"^1>",["^Z","^Y","^S","^T","^U","^W"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1L",[["^5R","~:static-fns"],true,["^5R","~:elide-asserts"],false,["^5R","~:optimize-constants"],null,["^5R","^1C"],null,["^5R","~:external-config"],null,["^5R","~:tooling-config"],null,["^5R","~:emit-constants"],null,["^5R","~:load-tests"],null,["^5R","~:form-size-threshold"],null,["^5R","~:infer-externs"],true,["^5R","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5R","~:fn-invoke-direct"],null,["^5R","~:source-map"],"/dev/null"]]]