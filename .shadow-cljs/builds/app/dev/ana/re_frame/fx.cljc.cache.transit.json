["^ ","~:output",["^ ","~:js","goog.provide('re_frame.fx');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.router');\r\ngoog.require('re_frame.db');\r\ngoog.require('re_frame.interceptor');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.events');\r\ngoog.require('re_frame.registrar');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.trace');\r\nre_frame.fx.kind = new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572);\r\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.fx.kind) : re_frame.registrar.kinds.call(null,re_frame.fx.kind)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\r\n}\r\n/**\r\n * Register the given effect `handler` for the given `id`.\r\n * \r\n *   `id` is keyword, often namespaced.\r\n *   `handler` is a side-effecting function which takes a single argument and whose return\r\n *   value is ignored.\r\n * \r\n *   Example Use\r\n *   -----------\r\n * \r\n *   First, registration ... associate `:effect2` with a handler.\r\n * \r\n *   (reg-fx\r\n *   :effect2\r\n *   (fn [value]\r\n *      ... do something side-effect-y))\r\n * \r\n *   Then, later, if an event handler were to return this effects map ...\r\n * \r\n *   {...\r\n * :effect2  [1 2]}\r\n * \r\n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\r\n * called with an argument of `[1 2]`.\r\n */\r\nre_frame.fx.reg_fx = (function re_frame$fx$reg_fx(id,handler){\r\nreturn re_frame.registrar.register_handler(re_frame.fx.kind,id,handler);\r\n});\r\n/**\r\n * An interceptor whose `:after` actions the contents of `:effects`. As a result,\r\n *   this interceptor is Domino 3.\r\n * \r\n *   This interceptor is silently added (by reg-event-db etc) to the front of\r\n *   interceptor chains for all events.\r\n * \r\n *   For each key in `:effects` (a map), it calls the registered `effects handler`\r\n *   (see `reg-fx` for registration of effect handlers).\r\n * \r\n *   So, if `:effects` was:\r\n *    {:dispatch  [:hello 42]\r\n *     :db        {...}\r\n *     :undo      \"set flag\"}\r\n * \r\n *   it will call the registered effect handlers for each of the map's keys:\r\n *   `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\r\n *   value for that key - so in the example above the effect handler for :dispatch\r\n *   will be given one arg `[:hello 42]`.\r\n * \r\n *   You cannot rely on the ordering in which effects are executed.\r\n */\r\nre_frame.fx.do_fx = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"do-fx\",\"do-fx\",1194163050),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$fx$do_fx_after(context){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__25981 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__25982 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"do-fx\",\"event/do-fx\",1357330452)], null));\r\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__25982;\r\n\r\ntry{try{var seq__25983 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\r\nvar chunk__25984 = null;\r\nvar count__25985 = (0);\r\nvar i__25986 = (0);\r\nwhile(true){\r\nif((i__25986 < count__25985)){\r\nvar vec__25993 = chunk__25984.cljs$core$IIndexed$_nth$arity$2(null,i__25986);\r\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25993,(0),null);\r\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25993,(1),null);\r\nvar temp__5718__auto___26065 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\r\nif(cljs.core.truth_(temp__5718__auto___26065)){\r\nvar effect_fn_26066 = temp__5718__auto___26065;\r\n(effect_fn_26066.cljs$core$IFn$_invoke$arity$1 ? effect_fn_26066.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_26066.call(null,effect_value));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\r\n}\r\n\r\n\r\nvar G__26067 = seq__25983;\r\nvar G__26068 = chunk__25984;\r\nvar G__26069 = count__25985;\r\nvar G__26070 = (i__25986 + (1));\r\nseq__25983 = G__26067;\r\nchunk__25984 = G__26068;\r\ncount__25985 = G__26069;\r\ni__25986 = G__26070;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto__ = cljs.core.seq(seq__25983);\r\nif(temp__5720__auto__){\r\nvar seq__25983__$1 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__25983__$1)){\r\nvar c__4550__auto__ = cljs.core.chunk_first(seq__25983__$1);\r\nvar G__26071 = cljs.core.chunk_rest(seq__25983__$1);\r\nvar G__26072 = c__4550__auto__;\r\nvar G__26073 = cljs.core.count(c__4550__auto__);\r\nvar G__26074 = (0);\r\nseq__25983 = G__26071;\r\nchunk__25984 = G__26072;\r\ncount__25985 = G__26073;\r\ni__25986 = G__26074;\r\ncontinue;\r\n} else {\r\nvar vec__25997 = cljs.core.first(seq__25983__$1);\r\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25997,(0),null);\r\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25997,(1),null);\r\nvar temp__5718__auto___26075 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\r\nif(cljs.core.truth_(temp__5718__auto___26075)){\r\nvar effect_fn_26076 = temp__5718__auto___26075;\r\n(effect_fn_26076.cljs$core$IFn$_invoke$arity$1 ? effect_fn_26076.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_26076.call(null,effect_value));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\r\n}\r\n\r\n\r\nvar G__26077 = cljs.core.next(seq__25983__$1);\r\nvar G__26078 = null;\r\nvar G__26079 = (0);\r\nvar G__26080 = (0);\r\nseq__25983 = G__26077;\r\nchunk__25984 = G__26078;\r\ncount__25985 = G__26079;\r\ni__25986 = G__26080;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__25682__auto___26081 = re_frame.interop.now();\r\nvar duration__25683__auto___26082 = (end__25682__auto___26081 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__25683__auto___26082,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__25682__auto___26081);\r\n} else {\r\n}\r\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__25981;\r\n}} else {\r\nvar seq__26001 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\r\nvar chunk__26002 = null;\r\nvar count__26003 = (0);\r\nvar i__26004 = (0);\r\nwhile(true){\r\nif((i__26004 < count__26003)){\r\nvar vec__26011 = chunk__26002.cljs$core$IIndexed$_nth$arity$2(null,i__26004);\r\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26011,(0),null);\r\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26011,(1),null);\r\nvar temp__5718__auto___26083 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\r\nif(cljs.core.truth_(temp__5718__auto___26083)){\r\nvar effect_fn_26084 = temp__5718__auto___26083;\r\n(effect_fn_26084.cljs$core$IFn$_invoke$arity$1 ? effect_fn_26084.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_26084.call(null,effect_value));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\r\n}\r\n\r\n\r\nvar G__26085 = seq__26001;\r\nvar G__26086 = chunk__26002;\r\nvar G__26087 = count__26003;\r\nvar G__26088 = (i__26004 + (1));\r\nseq__26001 = G__26085;\r\nchunk__26002 = G__26086;\r\ncount__26003 = G__26087;\r\ni__26004 = G__26088;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto__ = cljs.core.seq(seq__26001);\r\nif(temp__5720__auto__){\r\nvar seq__26001__$1 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26001__$1)){\r\nvar c__4550__auto__ = cljs.core.chunk_first(seq__26001__$1);\r\nvar G__26089 = cljs.core.chunk_rest(seq__26001__$1);\r\nvar G__26090 = c__4550__auto__;\r\nvar G__26091 = cljs.core.count(c__4550__auto__);\r\nvar G__26092 = (0);\r\nseq__26001 = G__26089;\r\nchunk__26002 = G__26090;\r\ncount__26003 = G__26091;\r\ni__26004 = G__26092;\r\ncontinue;\r\n} else {\r\nvar vec__26014 = cljs.core.first(seq__26001__$1);\r\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26014,(0),null);\r\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26014,(1),null);\r\nvar temp__5718__auto___26093 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\r\nif(cljs.core.truth_(temp__5718__auto___26093)){\r\nvar effect_fn_26095 = temp__5718__auto___26093;\r\n(effect_fn_26095.cljs$core$IFn$_invoke$arity$1 ? effect_fn_26095.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_26095.call(null,effect_value));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\r\n}\r\n\r\n\r\nvar G__26097 = cljs.core.next(seq__26001__$1);\r\nvar G__26098 = null;\r\nvar G__26099 = (0);\r\nvar G__26100 = (0);\r\nseq__26001 = G__26097;\r\nchunk__26002 = G__26098;\r\ncount__26003 = G__26099;\r\ni__26004 = G__26100;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n})], 0));\r\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-later\",\"dispatch-later\",291951390),(function (value){\r\nvar seq__26020 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\r\nvar chunk__26021 = null;\r\nvar count__26022 = (0);\r\nvar i__26023 = (0);\r\nwhile(true){\r\nif((i__26023 < count__26022)){\r\nvar map__26038 = chunk__26021.cljs$core$IIndexed$_nth$arity$2(null,i__26023);\r\nvar map__26038__$1 = (((((!((map__26038 == null))))?(((((map__26038.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__26038.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__26038):map__26038);\r\nvar effect = map__26038__$1;\r\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26038__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26038__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\r\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\r\n} else {\r\nre_frame.interop.set_timeout_BANG_(((function (seq__26020,chunk__26021,count__26022,i__26023,map__26038,map__26038__$1,effect,ms,dispatch){\r\nreturn (function (){\r\nreturn re_frame.router.dispatch(dispatch);\r\n});})(seq__26020,chunk__26021,count__26022,i__26023,map__26038,map__26038__$1,effect,ms,dispatch))\r\n,ms);\r\n}\r\n\r\n\r\nvar G__26102 = seq__26020;\r\nvar G__26103 = chunk__26021;\r\nvar G__26104 = count__26022;\r\nvar G__26105 = (i__26023 + (1));\r\nseq__26020 = G__26102;\r\nchunk__26021 = G__26103;\r\ncount__26022 = G__26104;\r\ni__26023 = G__26105;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto__ = cljs.core.seq(seq__26020);\r\nif(temp__5720__auto__){\r\nvar seq__26020__$1 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26020__$1)){\r\nvar c__4550__auto__ = cljs.core.chunk_first(seq__26020__$1);\r\nvar G__26107 = cljs.core.chunk_rest(seq__26020__$1);\r\nvar G__26108 = c__4550__auto__;\r\nvar G__26109 = cljs.core.count(c__4550__auto__);\r\nvar G__26110 = (0);\r\nseq__26020 = G__26107;\r\nchunk__26021 = G__26108;\r\ncount__26022 = G__26109;\r\ni__26023 = G__26110;\r\ncontinue;\r\n} else {\r\nvar map__26040 = cljs.core.first(seq__26020__$1);\r\nvar map__26040__$1 = (((((!((map__26040 == null))))?(((((map__26040.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__26040.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__26040):map__26040);\r\nvar effect = map__26040__$1;\r\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26040__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26040__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\r\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\r\n} else {\r\nre_frame.interop.set_timeout_BANG_(((function (seq__26020,chunk__26021,count__26022,i__26023,map__26040,map__26040__$1,effect,ms,dispatch,seq__26020__$1,temp__5720__auto__){\r\nreturn (function (){\r\nreturn re_frame.router.dispatch(dispatch);\r\n});})(seq__26020,chunk__26021,count__26022,i__26023,map__26040,map__26040__$1,effect,ms,dispatch,seq__26020__$1,temp__5720__auto__))\r\n,ms);\r\n}\r\n\r\n\r\nvar G__26113 = cljs.core.next(seq__26020__$1);\r\nvar G__26114 = null;\r\nvar G__26115 = (0);\r\nvar G__26116 = (0);\r\nseq__26020 = G__26113;\r\nchunk__26021 = G__26114;\r\ncount__26022 = G__26115;\r\ni__26023 = G__26116;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n}));\r\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),(function (value){\r\nif((!(cljs.core.vector_QMARK_(value)))){\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\",value], 0));\r\n} else {\r\nreturn re_frame.router.dispatch(value);\r\n}\r\n}));\r\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-n\",\"dispatch-n\",-504469236),(function (value){\r\nif((!(cljs.core.sequential_QMARK_(value)))){\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\",value], 0));\r\n} else {\r\nvar seq__26057 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\r\nvar chunk__26058 = null;\r\nvar count__26059 = (0);\r\nvar i__26060 = (0);\r\nwhile(true){\r\nif((i__26060 < count__26059)){\r\nvar event = chunk__26058.cljs$core$IIndexed$_nth$arity$2(null,i__26060);\r\nre_frame.router.dispatch(event);\r\n\r\n\r\nvar G__26117 = seq__26057;\r\nvar G__26118 = chunk__26058;\r\nvar G__26119 = count__26059;\r\nvar G__26120 = (i__26060 + (1));\r\nseq__26057 = G__26117;\r\nchunk__26058 = G__26118;\r\ncount__26059 = G__26119;\r\ni__26060 = G__26120;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto__ = cljs.core.seq(seq__26057);\r\nif(temp__5720__auto__){\r\nvar seq__26057__$1 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26057__$1)){\r\nvar c__4550__auto__ = cljs.core.chunk_first(seq__26057__$1);\r\nvar G__26121 = cljs.core.chunk_rest(seq__26057__$1);\r\nvar G__26122 = c__4550__auto__;\r\nvar G__26123 = cljs.core.count(c__4550__auto__);\r\nvar G__26124 = (0);\r\nseq__26057 = G__26121;\r\nchunk__26058 = G__26122;\r\ncount__26059 = G__26123;\r\ni__26060 = G__26124;\r\ncontinue;\r\n} else {\r\nvar event = cljs.core.first(seq__26057__$1);\r\nre_frame.router.dispatch(event);\r\n\r\n\r\nvar G__26125 = cljs.core.next(seq__26057__$1);\r\nvar G__26126 = null;\r\nvar G__26127 = (0);\r\nvar G__26128 = (0);\r\nseq__26057 = G__26125;\r\nchunk__26058 = G__26126;\r\ncount__26059 = G__26127;\r\ni__26060 = G__26128;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n}));\r\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"deregister-event-handler\",\"deregister-event-handler\",-1096518994),(function (value){\r\nvar clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\r\nif(cljs.core.sequential_QMARK_(value)){\r\nvar seq__26061 = cljs.core.seq(value);\r\nvar chunk__26062 = null;\r\nvar count__26063 = (0);\r\nvar i__26064 = (0);\r\nwhile(true){\r\nif((i__26064 < count__26063)){\r\nvar event = chunk__26062.cljs$core$IIndexed$_nth$arity$2(null,i__26064);\r\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\r\n\r\n\r\nvar G__26129 = seq__26061;\r\nvar G__26130 = chunk__26062;\r\nvar G__26131 = count__26063;\r\nvar G__26132 = (i__26064 + (1));\r\nseq__26061 = G__26129;\r\nchunk__26062 = G__26130;\r\ncount__26063 = G__26131;\r\ni__26064 = G__26132;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto__ = cljs.core.seq(seq__26061);\r\nif(temp__5720__auto__){\r\nvar seq__26061__$1 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26061__$1)){\r\nvar c__4550__auto__ = cljs.core.chunk_first(seq__26061__$1);\r\nvar G__26137 = cljs.core.chunk_rest(seq__26061__$1);\r\nvar G__26138 = c__4550__auto__;\r\nvar G__26139 = cljs.core.count(c__4550__auto__);\r\nvar G__26140 = (0);\r\nseq__26061 = G__26137;\r\nchunk__26062 = G__26138;\r\ncount__26063 = G__26139;\r\ni__26064 = G__26140;\r\ncontinue;\r\n} else {\r\nvar event = cljs.core.first(seq__26061__$1);\r\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\r\n\r\n\r\nvar G__26141 = cljs.core.next(seq__26061__$1);\r\nvar G__26142 = null;\r\nvar G__26143 = (0);\r\nvar G__26144 = (0);\r\nseq__26061 = G__26141;\r\nchunk__26062 = G__26142;\r\ncount__26063 = G__26143;\r\ni__26064 = G__26144;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n} else {\r\nreturn (clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(value) : clear_event.call(null,value));\r\n}\r\n}));\r\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (value){\r\nif((!((cljs.core.deref(re_frame.db.app_db) === value)))){\r\nreturn cljs.core.reset_BANG_(re_frame.db.app_db,value);\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/fx.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^S","~$re-frame.interceptor","^T","~$re-frame.events","^U","~$re-frame.trace","^V","~$re-frame.registrar","^W","~$cljs.core","^X","~$goog","^Y","~$router","~$re-frame.router","^[","^[","~$trace","^V","~$events","^U","~$re-frame.loggers","^12","~$re-frame.db","^13"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$app-db","^13","~$->interceptor","^T","~$set-timeout!","^S","~$get-handler","^W","~$clear-handlers","^W","~$register-handler","^W","~$console","^12"],"~:require-macros",["^ ","^V","^V","^10","^V","^X","^X"],"~:form",["~#list",["~$ns","^N",["^1@",["^15",["^[","~:as","^Z"],["^13","~:refer",["^17"]],["^T","^1C",["^18"]],["^S","^1C",["^19"]],["^U","^1B","^11"],["^W","^1C",["^1:","^1;","^1<"]],["^12","^1C",["^1="]],["^V","^1B","^10","~:include-macros",true]]]]],"~:flags",["^ ","^15",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^[","^13","^T","^S","^U","^W","^12","^V"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","re_frame/fx.cljc"],"~:compiled-at",1574163714807,"~:resource-name","re_frame/fx.cljc","~:warnings",[],"~:source","(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__25981","re-frame.trace/*current-trace*","*current-trace*-temp-val__25982","re-frame.trace/start-trace","end__25682__auto__","re-frame.interop/now","duration__25683__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__25983","cljs.core/seq","chunk__25984","count__25985","i__25986","vec__25993","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__25997","cljs.core/first","cljs.core/next","seq__26001","chunk__26002","count__26003","i__26004","vec__26011","vec__26014","effect-key","effect-value","temp__5718__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__26020","chunk__26021","count__26022","i__26023","map__26038","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__26040","ms","dispatch","effect","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__26057","chunk__26058","count__26059","i__26060","event","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__26061","chunk__26062","count__26063","i__26064","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1574163601000,1574163601000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1I","reagent/impl/batching.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1I","goog/dom/tagname.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","~$goog.dom.HtmlElement"]]],["^1I","goog/math/math.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","~$goog.array","~$goog.asserts"]]],["^1I","goog/labs/useragent/browser.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"]]],["^1I","re_frame/loggers.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","~$clojure.set"]]],["^1I","goog/array/array.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^28"]]],["^1V","node_modules/prop-types/checkPropTypes.js"],[1574163601000,1574163601000,1549836454000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1I","reagent/impl/util.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^22","^23","^25"]]],["^1I","re_frame/router.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^U","^S","^12","^V"]]],["^1V","node_modules/fbjs/lib/emptyFunction.js"],[1574163601000,1574163601000,1528785402000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","goog/debug/error.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","re_frame/registrar.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^S","^12"]]],["^1V","node_modules/fbjs/lib/emptyObject.js"],[1574163601000,1574163601000,1528785402000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","goog/dom/nodetype.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1V","node_modules/scheduler/cjs/scheduler.development.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","reagent/ratom.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^24","^22","~$reagent.impl.batching","^2<"]]],["^1V","node_modules/scheduler/cjs/scheduler.production.min.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","re_frame/interop.cljs"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1V","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1V","node_modules/create-react-class/factory.js"],[1574163601000,1574163601000,1517346959000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1V","node_modules/react/index.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1I","shadow/js.js"],[1574163601395,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","goog/object/object.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","reagent/impl/template.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^?","^25","~$clojure.walk","^24","~$reagent.impl.component","^2>","^2A","^23","^22"]]],["^1V","node_modules/react-dom/cjs/react-dom.production.min.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","^?","^2B","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1V","node_modules/react/cjs/react.development.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","^2B","~$module$node_modules$prop_types$checkPropTypes"]]],["^1I","re_frame/events.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^13","~$re-frame.utils","^S","^W","^12","^T","^V"]]],["^1I","goog/math/long.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^28","~$goog.reflect"]]],["^1V","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1V","node_modules/fbjs/lib/warning.js"],[1574163601000,1574163601000,1528785401000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1I","goog/functions/functions.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","reagent/impl/component.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^A","^?","^24","^2>","^2A","^23","^22"]]],["^1I","clojure/walk.cljs"],[1567262080081,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X"]]],["^1I","goog/structs/map.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration","^2:"]]],["^1V","node_modules/scheduler/index.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1I","goog/labs/useragent/engine.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","^29","^2;"]]],["^1I","goog/asserts/asserts.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","~$goog.debug.Error","~$goog.dom.NodeType","^2;"]]],["^1I","goog/uri/uri.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","^28","^2;","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","node_modules/object-assign/index.js"],[1574163601000,1574163601000,1484580833000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","re_frame/db.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^S"]]],["^1I","goog/base.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",[]]],["^1I","goog/structs/structs.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","^2:"]]],["^1I","clojure/string.cljs"],[1567262080081,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^2;","~$goog.string.StringBuffer"]]],["^1V","node_modules/create-react-class/index.js"],[1574163601000,1574163601000,1517346956000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","^?","~$module$node_modules$create_react_class$factory"]]],["^1V","node_modules/react/cjs/react.production.min.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","^2B"]]],["^1I","goog/debug/entrypointregistry.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^28"]]],["^1I","goog/string/string.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","re_frame/interceptor.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^12","^S","^V","^2<"]]],["^1I","goog/reflect/reflect.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","goog/labs/useragent/util.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^2;"]]],["^1I","reagent/core.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^?","~$reagent.impl.template","^2I","^24","^2>","^2A","^22","^23","~$reagent.dom"]]],["^1I","goog/string/stringbuffer.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","goog/iter/iter.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","^28","~$goog.functions","~$goog.math"]]],["^1I","goog/async/nexttick.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^33","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1I","re_frame/utils.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^12"]]],["^1I","reagent/dom.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^C","^24","^31","^2>","^2A","^22","^23"]]],["^1I","re_frame/fx.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^[","^13","^T","^S","^U","^W","^12","^V"]]],["^1V","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1574163601000,1574163601000,1549571078000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","reagent/interop.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X"]]],["^1I","goog/dom/htmlelement.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1I","cljs/core.cljs"],[1567262080081,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["~$goog.math.Long","~$goog.math.Integer","^2;","^2:","^27","~$goog.Uri","^2["]]],["^1I","reagent/debug.cljs"],[1567262094669,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X"]]],["^1I","goog/math/integer.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y"]]],["^1V","node_modules/scheduler/tracing.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1V","node_modules/react-dom/cjs/react-dom.development.js"],[1574163601000,1574163601000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1[","^?","^2B","^2L","^2J","~$module$node_modules$scheduler$tracing"]]],["^1I","clojure/set.cljs"],[1567262080081,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X"]]],["^1I","goog/uri/utils.js"],[1567356087625,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^27","^28","^2;"]]],["^1V","node_modules/fbjs/lib/invariant.js"],[1574163601000,1574163601000,1528785400000,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^1["]]],["^1I","re_frame/trace.cljc"],[1574085170058,"^1W",["^ ","^1X",null,"^1Y",["^L",[]],"^1Z",["^Y","^X","^S","^12","^33"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1574085169000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/fx.cljc","^7",1,"^8",5,"^9",1,"^:",16],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^[","^[","^[","^10","^V","^11","^U","^12","^12","^13","^13"],"^14",["^L",["^15"]],"~:shadow/js-access-global",["^L",["Error"]],"^16",["^ ","^17","^13","^18","^T","^19","^S","^1:","^W","^1;","^W","^1<","^W","^1=","^12"],"~:defs",["^ ","~$kind",["^ ","^M","~$re-frame.fx/kind","^6","re_frame/fx.cljc","^7",15,"^8",1,"^9",15,"^:",10,"^5",["^ ","^6","re_frame/fx.cljc","^7",15,"^8",6,"^9",15,"^:",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/fx.cljc","^7",18,"^8",7,"^9",18,"^:",13,"~:arglists",["^1@",["~$quote",["^1@",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^M","~$re-frame.fx/reg-fx","^6","re_frame/fx.cljc","^:",13,"~:method-params",["^1@",[["^4?","^4@"]]],"~:protocol-impl",null,"~:arglists-meta",["^1@",[null,null]],"^8",1,"~:variadic?",false,"^7",18,"~:ret-tag","~$any","^9",18,"~:max-fixed-arity",2,"~:fn-var",true,"^4=",["^1@",["^4>",["^1@",[["^4?","^4@"]]]]],"^4A","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^5",["^ ","^6","re_frame/fx.cljc","^7",47,"^8",6,"^9",47,"^:",11],"^M","~$re-frame.fx/do-fx","^6","re_frame/fx.cljc","^:",11,"^8",1,"^7",47,"^9",47,"^49","~$cljs.core/IMap","^4A","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed."]],"^1>",["^ ","^V","^V","^10","^V","^X","^X"],"~:cljs.analyzer/constants",["^ ","^14",["^L",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^51","^4X","^4P","^4V","^52","^4W","^4Q","^4S","^4[","^4Y","^4Z","^53","^50","^4U","^4R","^4T","^4O"]],"^1E",["^ ","^15",["^L",[]]],"^1F",["^ "],"^1G",["^Y","^X","^[","^13","^T","^S","^U","^W","^12","^V"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1U",[["^57","~:static-fns"],true,["^57","~:elide-asserts"],false,["^57","~:optimize-constants"],null,["^57","^1L"],null,["^57","~:external-config"],null,["^57","~:tooling-config"],null,["^57","~:emit-constants"],null,["^57","~:load-tests"],null,["^57","~:form-size-threshold"],null,["^57","~:infer-externs"],true,["^57","^1N"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^57","~:fn-invoke-direct"],null,["^57","~:source-map"],"/dev/null"]]]