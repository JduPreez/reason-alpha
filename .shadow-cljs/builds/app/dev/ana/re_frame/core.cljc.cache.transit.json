["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.events');\r\ngoog.require('re_frame.subs');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.db');\r\ngoog.require('re_frame.fx');\r\ngoog.require('re_frame.cofx');\r\ngoog.require('re_frame.router');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.registrar');\r\ngoog.require('re_frame.interceptor');\r\ngoog.require('re_frame.std_interceptors');\r\ngoog.require('clojure.set');\r\nre_frame.core.dispatch = re_frame.router.dispatch;\r\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\r\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\r\nre_frame.core.subscribe = re_frame.subs.subscribe;\r\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\r\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\r\n/**\r\n * This is a low level, advanced function.  You should probably be\r\n *   using reg-sub instead.\r\n *   Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\r\n */\r\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\r\n});\r\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\r\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\r\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\r\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\r\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (db event) -> db\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of this\r\n * chain.\r\n */\r\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\r\nvar G__26096 = arguments.length;\r\nswitch (G__26096) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of the\r\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\r\n * and, later, action effects.\r\n */\r\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\r\nvar G__26106 = arguments.length;\r\nswitch (G__26106) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (context-map event-vector) -> context-map\r\n * \r\n *   This form of registration is almost never used. \r\n */\r\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\r\nvar G__26112 = arguments.length;\r\nswitch (G__26112) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3;\r\n\r\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\r\nre_frame.core.debug = re_frame.std_interceptors.debug;\r\nre_frame.core.path = re_frame.std_interceptors.path;\r\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\r\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\r\nre_frame.core.after = re_frame.std_interceptors.after;\r\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\r\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\r\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\r\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\r\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\r\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\r\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\r\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\r\nre_frame.core.console = re_frame.loggers.console;\r\n/**\r\n * Checkpoints the state of re-frame and returns a function which, when\r\n *   later called, will restore re-frame to that checkpointed state.\r\n * \r\n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\r\n *   \r\n */\r\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\r\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\r\nvar app_db = cljs.core.deref(re_frame.db.app_db);\r\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\r\nreturn ((function (handlers,app_db,subs_cache){\r\nreturn (function (){\r\nvar original_subs_26160 = cljs.core.set(cljs.core.vals(subs_cache));\r\nvar current_subs_26161 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\r\nvar seq__26133_26162 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_26161,original_subs_26160));\r\nvar chunk__26134_26163 = null;\r\nvar count__26135_26164 = (0);\r\nvar i__26136_26165 = (0);\r\nwhile(true){\r\nif((i__26136_26165 < count__26135_26164)){\r\nvar sub_26166 = chunk__26134_26163.cljs$core$IIndexed$_nth$arity$2(null,i__26136_26165);\r\nre_frame.interop.dispose_BANG_(sub_26166);\r\n\r\n\r\nvar G__26167 = seq__26133_26162;\r\nvar G__26168 = chunk__26134_26163;\r\nvar G__26169 = count__26135_26164;\r\nvar G__26170 = (i__26136_26165 + (1));\r\nseq__26133_26162 = G__26167;\r\nchunk__26134_26163 = G__26168;\r\ncount__26135_26164 = G__26169;\r\ni__26136_26165 = G__26170;\r\ncontinue;\r\n} else {\r\nvar temp__5720__auto___26171 = cljs.core.seq(seq__26133_26162);\r\nif(temp__5720__auto___26171){\r\nvar seq__26133_26172__$1 = temp__5720__auto___26171;\r\nif(cljs.core.chunked_seq_QMARK_(seq__26133_26172__$1)){\r\nvar c__4550__auto___26173 = cljs.core.chunk_first(seq__26133_26172__$1);\r\nvar G__26174 = cljs.core.chunk_rest(seq__26133_26172__$1);\r\nvar G__26175 = c__4550__auto___26173;\r\nvar G__26176 = cljs.core.count(c__4550__auto___26173);\r\nvar G__26177 = (0);\r\nseq__26133_26162 = G__26174;\r\nchunk__26134_26163 = G__26175;\r\ncount__26135_26164 = G__26176;\r\ni__26136_26165 = G__26177;\r\ncontinue;\r\n} else {\r\nvar sub_26178 = cljs.core.first(seq__26133_26172__$1);\r\nre_frame.interop.dispose_BANG_(sub_26178);\r\n\r\n\r\nvar G__26179 = cljs.core.next(seq__26133_26172__$1);\r\nvar G__26180 = null;\r\nvar G__26181 = (0);\r\nvar G__26182 = (0);\r\nseq__26133_26162 = G__26179;\r\nchunk__26134_26163 = G__26180;\r\ncount__26135_26164 = G__26181;\r\ni__26136_26165 = G__26182;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\r\n\r\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\r\n\r\nreturn null;\r\n});\r\n;})(handlers,app_db,subs_cache))\r\n});\r\n/**\r\n * Remove all events queued for processing\r\n */\r\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\r\n});\r\n/**\r\n * Registers a function `f` to be called after each event is processed\r\n * `f` will be called with two arguments:\r\n *  - `event`: a vector. The event just processed.\r\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\r\n * \r\n * This is useful in advanced cases like:\r\n *   - you are implementing a complex bootstrap pipeline\r\n *   - you want to create your own handling infrastructure, with perhaps multiple\r\n *     handlers for the one event, etc.  Hook in here.\r\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\r\n * \r\n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\r\n *   be used at \"remove time\" to get rid of the right callback.\r\n *   \r\n */\r\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\r\nvar G__26146 = arguments.length;\r\nswitch (G__26146) {\r\ncase 1:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2;\r\n\r\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\r\n});\r\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___26184 = arguments.length;\r\nvar i__4731__auto___26185 = (0);\r\nwhile(true){\r\nif((i__4731__auto___26185 < len__4730__auto___26184)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___26185]));\r\n\r\nvar G__26186 = (i__4731__auto___26185 + (1));\r\ni__4731__auto___26185 = G__26186;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\r\n});\r\n\r\nre_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__26148_26187 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__26149_26188 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\r\nvar G__26150_26189 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__26151_26190 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__26148_26187,G__26149_26188,G__26150_26189,G__26151_26190) : re_frame.core.console.call(null,G__26148_26187,G__26149_26188,G__26150_26189,G__26151_26190));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\r\n});\r\n\r\nre_frame.core.register_handler.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.core.register_handler.cljs$lang$applyTo = (function (seq26147){\r\nvar self__4718__auto__ = this;\r\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq26147));\r\n});\r\n\r\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___26191 = arguments.length;\r\nvar i__4731__auto___26192 = (0);\r\nwhile(true){\r\nif((i__4731__auto___26192 < len__4730__auto___26191)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___26192]));\r\n\r\nvar G__26193 = (i__4731__auto___26192 + (1));\r\ni__4731__auto___26192 = G__26193;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\r\n});\r\n\r\nre_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__26153_26194 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__26154_26195 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\r\nvar G__26155_26196 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__26156_26197 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__26153_26194,G__26154_26195,G__26155_26196,G__26156_26197) : re_frame.core.console.call(null,G__26153_26194,G__26154_26195,G__26155_26196,G__26156_26197));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\r\n});\r\n\r\nre_frame.core.register_sub.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.core.register_sub.cljs$lang$applyTo = (function (seq26152){\r\nvar self__4718__auto__ = this;\r\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq26152));\r\n});\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^S","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Z","~$fx","~$re-frame.fx","~$re-frame.events","^11","~$loggers","~$re-frame.loggers","^10","^10","~$re-frame.registrar","^14","~$cljs.core","^15","~$interceptor","^Z","~$goog","^17","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^14","^19","^19","^W","^W","~$events","^11","~$re-frame.std-interceptors","^1>","^13","^13","^U","^U","~$interop","^S","~$std-interceptors","^1>","^Y","^Y","^1;","^1;"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1>","~$fx-handler->interceptor","^1>","~$ctx-handler->interceptor","^1>"],"~:require-macros",["^ ","^15","^15"],"~:form",["~#list",["~$ns","^N",["^1I",["^1B",["^11","~:as","^1="],["^U","^1K","^T"],["^S","^1K","^1?"],["^1;","^1K","^1:"],["^10","^1K","^["],["^Y","^1K","^X"],["^19","^1K","^18"],["^13","^1K","^12"],["^14","^1K","^1<"],["^Z","^1K","^16"],["^1>","^1K","^1@","~:refer",["^1D","^1E","^1F"]],["^W","^1K","^V"]]]]],"~:flags",["^ ","^1B",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^17","^15","^11","^U","^S","^1;","^10","^Y","^19","^13","^14","^Z","^1>","^W"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1574163714875,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__26096","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__26106","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/fx-handler->interceptor","G__26112","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__26133","cljs.core/seq","chunk__26134","count__26135","i__26136","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__26146","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2","re-frame.core/remove-post-event-callback","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq26147","self__4718__auto__","args","G__26148","G__26149","G__26150","G__26151","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","re-frame.core/register-sub","seq26152","G__26153","G__26154","G__26155","G__26156"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1574163601000,1574163601000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1Q","reagent/impl/batching.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1Q","goog/dom/tagname.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","~$goog.dom.HtmlElement"]]],["^1Q","goog/math/math.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","~$goog.array","~$goog.asserts"]]],["^1Q","goog/labs/useragent/browser.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"]]],["^1Q","re_frame/loggers.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^W"]]],["^1Q","goog/array/array.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2@"]]],["^22","node_modules/prop-types/checkPropTypes.js"],[1574163601000,1574163601000,1549836454000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1Q","reagent/impl/util.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^2:","^2;","^2="]]],["^1Q","re_frame/router.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^11","^S","^13","~$re-frame.trace"]]],["^22","node_modules/fbjs/lib/emptyFunction.js"],[1574163601000,1574163601000,1528785402000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","goog/debug/error.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","re_frame/registrar.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^S","^13"]]],["^22","node_modules/fbjs/lib/emptyObject.js"],[1574163601000,1574163601000,1528785402000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","goog/dom/nodetype.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^22","node_modules/scheduler/cjs/scheduler.development.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","reagent/ratom.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^2<","^2:","~$reagent.impl.batching","^W"]]],["^22","node_modules/scheduler/cjs/scheduler.production.min.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","re_frame/interop.cljs"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^22","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^22","node_modules/create-react-class/factory.js"],[1574163601000,1574163601000,1517346959000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^22","node_modules/react/index.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1Q","shadow/js.js"],[1574163601395,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","goog/object/object.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","reagent/impl/template.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^?","^2=","~$clojure.walk","^2<","~$reagent.impl.component","^2F","^2I","^2;","^2:"]]],["^22","node_modules/react-dom/cjs/react-dom.production.min.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","^?","^2J","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^22","node_modules/react/cjs/react.development.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","^2J","~$module$node_modules$prop_types$checkPropTypes"]]],["^1Q","re_frame/events.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^1;","~$re-frame.utils","^S","^14","^13","^Z","^2E"]]],["^1Q","goog/math/long.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2@","~$goog.reflect"]]],["^22","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^22","node_modules/fbjs/lib/warning.js"],[1574163601000,1574163601000,1528785401000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1Q","goog/functions/functions.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","reagent/impl/component.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^A","^?","^2<","^2F","^2I","^2;","^2:"]]],["^1Q","clojure/walk.cljs"],[1567262080081,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15"]]],["^1Q","goog/structs/map.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","~$goog.iter.Iterator","~$goog.iter.StopIteration","^2B"]]],["^22","node_modules/scheduler/index.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1Q","goog/labs/useragent/engine.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","^2A","^2C"]]],["^1Q","goog/asserts/asserts.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","~$goog.debug.Error","~$goog.dom.NodeType","^2C"]]],["^1Q","goog/uri/uri.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","^2@","^2C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^22","node_modules/object-assign/index.js"],[1574163601000,1574163601000,1484580833000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","re_frame/db.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^S"]]],["^1Q","goog/base.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",[]]],["^1Q","goog/structs/structs.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","^2B"]]],["^1Q","clojure/string.cljs"],[1567262080081,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^2C","~$goog.string.StringBuffer"]]],["^22","node_modules/create-react-class/index.js"],[1574163601000,1574163601000,1517346956000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","^?","~$module$node_modules$create_react_class$factory"]]],["^1Q","re_frame/cofx.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^1;","^Z","^14","^13"]]],["^22","node_modules/react/cjs/react.production.min.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","^2J"]]],["^1Q","goog/debug/entrypointregistry.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2@"]]],["^1Q","goog/string/string.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","re_frame/interceptor.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^13","^S","^2E","^W"]]],["^1Q","clojure/data.cljs"],[1567262080081,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^W"]]],["^1Q","goog/reflect/reflect.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","goog/labs/useragent/util.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2C"]]],["^1Q","reagent/core.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^?","~$reagent.impl.template","^2Q","^2<","^2F","^2I","^2:","^2;","~$reagent.dom"]]],["^1Q","goog/string/stringbuffer.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","re_frame/std_interceptors.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^Z","^13","^14","^1;","~$clojure.data","^Y","^2U","^2E"]]],["^1Q","goog/iter/iter.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","^2@","~$goog.functions","~$goog.math"]]],["^1Q","goog/async/nexttick.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^3<","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1Q","re_frame/utils.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^13"]]],["^1Q","reagent/dom.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^C","^2<","^39","^2F","^2I","^2:","^2;"]]],["^1Q","re_frame/fx.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^19","^1;","^Z","^S","^11","^14","^13","^2E"]]],["^22","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1574163601000,1574163601000,1549571078000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","reagent/interop.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15"]]],["^1Q","goog/dom/htmlelement.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^1Q","cljs/core.cljs"],[1567262080081,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["~$goog.math.Long","~$goog.math.Integer","^2C","^2B","^2?","~$goog.Uri","^37"]]],["^1Q","reagent/debug.cljs"],[1567262094669,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15"]]],["^1Q","goog/math/integer.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17"]]],["^22","node_modules/scheduler/tracing.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^22","node_modules/react-dom/cjs/react-dom.development.js"],[1574163601000,1574163601000,499162500000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27","^?","^2J","^2T","^2R","~$module$node_modules$scheduler$tracing"]]],["^1Q","clojure/set.cljs"],[1567262080081,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15"]]],["^1Q","goog/uri/utils.js"],[1567356087625,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^2?","^2@","^2C"]]],["^22","node_modules/fbjs/lib/invariant.js"],[1574163601000,1574163601000,1528785400000,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^27"]]],["^1Q","re_frame/trace.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^S","^13","^3<"]]],["^1Q","re_frame/subs.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^1;","^S","^13","^2U","^14","^2E"]]],["^1Q","re_frame/core.cljc"],[1574085170058,"^23",["^ ","^24",null,"^25",["^L",[]],"^26",["^17","^15","^11","^U","^S","^1;","^10","^Y","^19","^13","^14","^Z","^1>","^W"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1574085169000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^U","^V","^W","^X","^Y","^Z","^Z","^[","^10","^11","^11","^12","^13","^10","^10","^14","^14","^15","^15","^16","^Z","^17","^17","^18","^19","^1:","^1;","^1<","^14","^19","^19","^W","^W","^1=","^11","^1>","^1>","^13","^13","^U","^U","^1?","^S","^1@","^1>","^Y","^Y","^1;","^1;"],"^1A",["^L",["^1B"]],"~:shadow/js-access-global",["^L",["Error"]],"^1C",["^ ","^1D","^1>","^1E","^1>","^1F","^1>"],"~:defs",["^ ","~$console",["^ ","^M","~$re-frame.core/console","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^M","~$re-frame.core/on-changes","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^M","~$re-frame.core/enrich","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1I",["~$quote",["^1I",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^M","~$re-frame.core/reg-sub-raw","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1I",[["^4J","^4K"]]],"~:protocol-impl",null,"~:arglists-meta",["^1I",[null,null]],"^8",1,"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^4H",["^1I",["^4I",["^1I",[["^4J","^4K"]]]]],"^4L","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^M","~$re-frame.core/subscribe","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^M","~$re-frame.core/assoc-coeffect","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^4H",["^1I",["^4I",["^1I",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^4Q",true,"~:fixed-arity",0,"^4T",0,"^4N",[["^1I",["^4["]]],"^4H",["^1I",[["~$&","^4["]]],"^4P",["^1I",[null]]]],"^M","~$re-frame.core/register-sub","^6","re_frame/core.cljc","^:",19,"^50",["^ ","^4Q",true,"^51",0,"^4T",0,"^4N",[["^1I",["^4["]]],"^4H",["^1I",[["~$&","^4["]]],"^4P",["^1I",[null]]],"^4N",[["^1I",["^4["]]],"^4O",null,"^51",0,"^4P",["^1I",[null]],"^8",1,"^4Q",true,"~:methods",[["^ ","^51",0,"^4Q",true,"~:tag","^4S"]],"^7",234,"^4R","^4S","^9",234,"^4T",0,"^4U",true,"^4H",["^1I",[["~$&","^4["]]]],"~$purge-event-queue",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^4H",["^1I",["^4I",["^1I",[[]]]]],"^4L","Remove all events queued for processing"],"^M","~$re-frame.core/purge-event-queue","^6","re_frame/core.cljc","^:",24,"^4N",["^1I",[[]]],"^4O",null,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^7",194,"^4R","^4S","^9",194,"^4T",0,"^4U",true,"^4H",["^1I",["^4I",["^1I",[[]]]]],"^4L","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^4H",["^1I",["^4I",["^1I",[["~$id"]]]]]],"^M","~$re-frame.core/remove-post-event-callback","^6","re_frame/core.cljc","^:",33,"^4N",["^1I",[["^58"]]],"^4O",null,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^7",222,"^4R","^4S","^9",222,"^4T",1,"^4U",true,"^4H",["^1I",["^4I",["^1I",[["^58"]]]]]],"~$path",["^ ","^M","~$re-frame.core/path","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^M","~$re-frame.core/reg-sub","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^4H",["^1I",["^4I",["^1I",[[]]]]],"^4L","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^M","~$re-frame.core/make-restore-fn","^6","re_frame/core.cljc","^:",22,"^4N",["^1I",[[]]],"^4O",null,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^7",169,"^4R","~$function","^9",169,"^4T",0,"^4U",true,"^4H",["^1I",["^4I",["^1I",[[]]]]],"^4L","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^M","~$re-frame.core/clear-fx","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^54","^5@"],"~$get-effect",["^ ","^M","~$re-frame.core/get-effect","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^4H",["^1I",["^4I",["^1I",[["^58","~$handler"],["^58","~$interceptors","^5F"]]]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]]],"^M","~$re-frame.core/reg-event-db","^6","re_frame/core.cljc","^:",19,"^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]],"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4O",null,"^51",3,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^53",[["^ ","^51",2,"^4Q",false,"^54","^4S"],["^ ","^51",3,"^4Q",false,"^54","^4S"]],"^7",71,"^9",71,"^4T",3,"^4U",true,"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^M","~$re-frame.core/dispatch-sync","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^M","~$re-frame.core/clear-event","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^54","^5@"],"~$->interceptor",["^ ","^M","~$re-frame.core/->interceptor","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^M","~$re-frame.core/set-loggers!","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^M","~$re-frame.core/inject-cofx","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^M","~$re-frame.core/get-coeffect","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^M","~$re-frame.core/debug","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^54","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^M","~$re-frame.core/assoc-effect","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^M","~$re-frame.core/enqueue","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^M","~$re-frame.core/clear-cofx","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^54","^5@"],"~$reg-event-ctx",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^4H",["^1I",["^4I",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]]],"^M","~$re-frame.core/reg-event-ctx","^6","re_frame/core.cljc","^:",20,"^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]],"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4O",null,"^51",3,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^53",[["^ ","^51",2,"^4Q",false,"^54","^4S"],["^ ","^51",3,"^4Q",false,"^54","^4S"]],"^7",104,"^9",104,"^4T",3,"^4U",true,"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^M","~$re-frame.core/reg-fx","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^M","~$re-frame.core/trim-v","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^54","^5W"],"~$clear-sub",["^ ","^M","~$re-frame.core/clear-sub","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^54","^5@"],"~$dispatch",["^ ","^M","~$re-frame.core/dispatch","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^M","~$re-frame.core/after","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^4H",["^1I",["^4I",["^1I",[["~$f"],["^58","~$f"]]]]],"^4L","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^50",["^ ","^4Q",false,"^51",2,"^4T",2,"^4N",["^1I",[["~$f"],["^58","~$f"]]],"^4H",["^1I",[["~$f"],["^58","~$f"]]],"^4P",["^1I",[null,null]]]],"^M","~$re-frame.core/add-post-event-callback","^6","re_frame/core.cljc","^:",30,"^50",["^ ","^4Q",false,"^51",2,"^4T",2,"^4N",["^1I",[["~$f"],["^58","~$f"]]],"^4H",["^1I",[["~$f"],["^58","~$f"]]],"^4P",["^1I",[null,null]]],"^4N",["^1I",[["~$f"],["^58","~$f"]]],"^4O",null,"^51",2,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^53",[["^ ","^51",1,"^4Q",false,"^54","^4S"],["^ ","^51",2,"^4Q",false,"^54","^4S"]],"^7",201,"^9",201,"^4T",2,"^4U",true,"^4H",["^1I",[["~$f"],["^58","~$f"]]],"^4L","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^M","~$re-frame.core/reg-cofx","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^4H",["^1I",["^4I",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]]],"^M","~$re-frame.core/reg-event-fx","^6","re_frame/core.cljc","^:",19,"^50",["^ ","^4Q",false,"^51",3,"^4T",3,"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4P",["^1I",[null,null]]],"^4N",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4O",null,"^51",3,"^4P",["^1I",[null,null]],"^8",1,"^4Q",false,"^53",[["^ ","^51",2,"^4Q",false,"^54","^4S"],["^ ","^51",3,"^4Q",false,"^54","^4S"]],"^7",87,"^9",87,"^4T",3,"^4U",true,"^4H",["^1I",[["^58","^5F"],["^58","^5G","^5F"]]],"^4L","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^4G",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^4H",["^1I",["^4I",["^1I",[["~$&","^4["]]]]],"^50",["^ ","^4Q",true,"^51",0,"^4T",0,"^4N",[["^1I",["^4["]]],"^4H",["^1I",[["~$&","^4["]]],"^4P",["^1I",[null]]]],"^M","~$re-frame.core/register-handler","^6","re_frame/core.cljc","^:",23,"^50",["^ ","^4Q",true,"^51",0,"^4T",0,"^4N",[["^1I",["^4["]]],"^4H",["^1I",[["~$&","^4["]]],"^4P",["^1I",[null]]],"^4N",[["^1I",["^4["]]],"^4O",null,"^51",0,"^4P",["^1I",[null]],"^8",1,"^4Q",true,"^53",[["^ ","^51",0,"^4Q",true,"^54","^4S"]],"^7",229,"^4R","^4S","^9",229,"^4T",0,"^4U",true,"^4H",["^1I",[["~$&","^4["]]]],"~$clear-subscription-cache!",["^ ","^M","~$re-frame.core/clear-subscription-cache!","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1G",["^ ","^15","^15"],"~:cljs.analyzer/constants",["^ ","^1A",["^L",["~:warn"]],"~:order",["^6I"]],"^1M",["^ ","^1B",["^L",[]]],"^1N",["^ "],"^1O",["^17","^15","^11","^U","^S","^1;","^10","^Y","^19","^13","^14","^Z","^1>","^W"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^21",[["^6M","~:static-fns"],true,["^6M","~:elide-asserts"],false,["^6M","~:optimize-constants"],null,["^6M","^1T"],null,["^6M","~:external-config"],null,["^6M","~:tooling-config"],null,["^6M","~:emit-constants"],null,["^6M","~:load-tests"],null,["^6M","~:form-size-threshold"],null,["^6M","~:infer-externs"],true,["^6M","^1V"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6M","~:fn-invoke-direct"],null,["^6M","~:source-map"],"/dev/null"]]]