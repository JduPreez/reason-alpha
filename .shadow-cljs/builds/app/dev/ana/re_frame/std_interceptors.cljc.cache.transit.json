["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.interceptor');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.registrar');\r\ngoog.require('re_frame.db');\r\ngoog.require('clojure.data');\r\ngoog.require('re_frame.cofx');\r\ngoog.require('re_frame.utils');\r\ngoog.require('re_frame.trace');\r\n/**\r\n * An interceptor which logs/instruments an event handler's actions to\r\n *   `js/console.debug`. See examples/todomvc/src/events.cljs for use.\r\n * \r\n *   Output includes:\r\n *   1. the event vector\r\n *   2. a `clojure.data/diff` of db, before vs after, which shows\r\n *   the changes caused by the event handler.  You will absolutely have\r\n *   to understand https://clojuredocs.org/clojure.data/diff to\r\n *   understand the output.\r\n * \r\n *   You'd typically include this interceptor after (to the right of) any\r\n *   path interceptor.\r\n * \r\n *   Warning:  calling clojure.data/diff on large, complex data structures\r\n *   can be slow. So, you won't want this interceptor present in production\r\n *   code. So condition it out like this :\r\n * \r\n *    (re-frame.core/reg-event-db\r\n *       :evt-id\r\n *       [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\r\n *       (fn [db v]\r\n *         ...))\r\n * \r\n *   To make this code fragment work, you'll also have to set goog.DEBUG to\r\n *   false in your production builds - look in `project.clj` of /examples/todomvc.\r\n *   \r\n */\r\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\r\n\r\nreturn context;\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No :db changes caused by:\",event], 0));\r\n} else {\r\nvar vec__25915_25975 = clojure.data.diff(orig_db,new_db);\r\nvar only_before_25976 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25915_25975,(0),null);\r\nvar only_after_25977 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25915_25975,(1),null);\r\nvar db_changed_QMARK__25978 = (((!((only_before_25976 == null)))) || ((!((only_after_25977 == null)))));\r\nif(db_changed_QMARK__25978){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_25976], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_25977], 0));\r\n\r\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"no app-db changes caused by:\",event], 0));\r\n}\r\n}\r\n\r\nreturn context;\r\n})], 0));\r\n/**\r\n * An interceptor which removes the first element of the event vector,\r\n *   allowing you to write more aesthetically pleasing event handlers. No\r\n *   leading underscore on the event-v!\r\n *   Your event handlers will look like this:\r\n * \r\n *    (defn my-handler\r\n *      [db [x y z]]    ;; <-- instead of [_ x y z]\r\n *      ....)\r\n */\r\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trimv_before(context){\r\nreturn cljs.core.assoc_in(cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null),cljs.core.subvec,(1)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)], null),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)));\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trimv_after(context){\r\nreturn cljs.core.assoc_in(re_frame.utils.dissoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)));\r\n})], 0));\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\r\n * \r\n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\r\n * \r\n *    (fn [db event]\r\n *       ....)\r\n * \r\n *   So, the interceptor wraps the given handler:\r\n *   1. extracts two `:coeffects` keys: db and event\r\n *   2. calls handler-fn\r\n *   3. stores the db result back into context's `:effects`\r\n */\r\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__25921 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__25922 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null))], null));\r\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__25922;\r\n\r\ntry{try{var map__25923 = new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__25923__$1 = (((((!((map__25923 == null))))?(((((map__25923.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__25923.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__25923):map__25923);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25923__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25923__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__25682__auto___25979 = re_frame.interop.now();\r\nvar duration__25683__auto___25980 = (end__25682__auto___25979 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__25683__auto___25980,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__25682__auto___25979);\r\n} else {\r\n}\r\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__25921;\r\n}})():(function (){var map__25925 = new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__25925__$1 = (((((!((map__25925 == null))))?(((((map__25925.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__25925.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__25925):map__25925);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25925__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25925__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\r\n})());\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__25684__auto___26000 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__25684__auto___26000;\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\r\n * \r\n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\r\n * \r\n *    (fn [coeffects event]\r\n *       {:db ...\r\n *        :dispatch ...})\r\n * \r\n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\r\n *   1. extracts `:coeffects`\r\n *   2. call handler-fn giving coeffects\r\n *   3. stores the result back into the `:effects`\r\n */\r\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\r\nvar map__25931 = new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__25931__$1 = (((((!((map__25931 == null))))?(((((map__25931.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__25931.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__25931):map__25931);\r\nvar coeffects = map__25931__$1;\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25931__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__25937 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__25938 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null))], null));\r\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__25938;\r\n\r\ntry{try{return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__25682__auto___26017 = re_frame.interop.now();\r\nvar duration__25683__auto___26018 = (end__25682__auto___26017 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__25683__auto___26018,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__25682__auto___26017);\r\n} else {\r\n}\r\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__25937;\r\n}})():cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event))));\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__25684__auto___26019 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__25684__auto___26019;\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\r\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\r\n *   Example:\r\n * \r\n *    (fn [context]\r\n *       (enqueue context [more interceptors]))\r\n */\r\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__25944 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__25945 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null))], null));\r\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__25945;\r\n\r\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__25682__auto___26031 = re_frame.interop.now();\r\nvar duration__25683__auto___26032 = (end__25682__auto___26031 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__25683__auto___26032,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__25682__auto___26031);\r\n} else {\r\n}\r\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__25944;\r\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__25684__auto___26033 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__25684__auto___26033;\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * returns an interceptor whose `:before` substitutes the coeffects `:db` with\r\n *   a sub-path of `:db`. Within `:after` it grafts the handler's return value\r\n *   back into db, at the right path.\r\n * \r\n *   So, its overall action is to make the event handler behave like the function\r\n *   you might give to clojure's `update-in`.\r\n * \r\n *   Examples:\r\n * \r\n *    (path :some :path)\r\n *    (path [:some :path])\r\n *    (path [:some :path] :to :here)\r\n *    (path [:some :path] [:to] :here)\r\n * \r\n *   Example Use:\r\n * \r\n *    (reg-event-db\r\n *      :event-id\r\n *      (path [:a :b])  ;; used here, in interceptor chain\r\n *      (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\r\n *        ... new-b))   ;; returns a new value for that path (not the entire db)\r\n * \r\n *   Notes:\r\n *  1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\r\n *  2. if `:effects` contains no `:db` effect, can't graft a value back in.\r\n *   \r\n */\r\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___26035 = arguments.length;\r\nvar i__4731__auto___26036 = (0);\r\nwhile(true){\r\nif((i__4731__auto___26036 < len__4730__auto___26035)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___26036]));\r\n\r\nvar G__26037 = (i__4731__auto___26036 + (1));\r\ni__4731__auto___26036 = G__26037;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\r\n});\r\n\r\nre_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar path = cljs.core.flatten(args);\r\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\r\nif(cljs.core.empty_QMARK_(path)){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),((function (path,db_store_key){\r\nreturn (function (context){\r\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\r\n});})(path,db_store_key))\r\n,new cljs.core.Keyword(null,\"after\",\"after\",594996914),((function (path,db_store_key){\r\nreturn (function (context){\r\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\r\nvar original_db = cljs.core.peek(db_store);\r\nvar new_db_store = cljs.core.pop(db_store);\r\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\r\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nreturn context_SINGLEQUOTE_;\r\n} else {\r\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\r\n}\r\n});})(path,db_store_key))\r\n], 0));\r\n});\r\n\r\nre_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq25950){\r\nvar self__4718__auto__ = this;\r\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq25950));\r\n});\r\n\r\n/**\r\n * Interceptor factory which runs the given function `f` in the `after handler`\r\n *   position.  `f` is called with two arguments: `db` and `v`, and is expected to\r\n *   return a modified `db`.\r\n * \r\n *   Unlike the `after` interceptor which is only about side effects, `enrich`\r\n *   expects `f` to process and alter the given `db` coeffect in some useful way,\r\n *   contributing to the derived data, flowing vibe.\r\n * \r\n *   Example Use:\r\n *   ------------\r\n * \r\n *   Imagine that todomvc needed to do duplicate detection - if any two todos had\r\n *   the same text, then highlight their background, and report them via a warning\r\n *   at the bottom of the panel.\r\n * \r\n *   Almost any user action (edit text, add new todo, remove a todo) requires a\r\n *   complete reassessment of duplication errors and warnings. Eg: that edit\r\n *   just made might have introduced a new duplicate, or removed one. Same with\r\n *   any todo removal. So we need to re-calculate warnings after any CRUD events\r\n *   associated with the todos list.\r\n * \r\n *   Unless we are careful, we might end up coding subtly different checks\r\n *   for each kind of CRUD operation.  The duplicates check made after\r\n *   'delete todo' event might be subtly different to that done after an\r\n *   editing operation. Nice and efficient, but fiddly. A bug generator\r\n *   approach.\r\n * \r\n *   So, instead, we create an `f` which recalculates ALL warnings from scratch\r\n *   every time there is ANY change. It will inspect all the todos, and\r\n *   reset ALL FLAGS every time (overwriting what was there previously)\r\n *   and fully recalculate the list of duplicates (displayed at the bottom?).\r\n * \r\n *   https://twitter.com/nathanmarz/status/879722740776939520\r\n * \r\n *   By applying `f` in an `:enrich` interceptor, after every CRUD event,\r\n *   we keep the handlers simple and yet we ensure this important step\r\n *   (of getting warnings right) is not missed on any change.\r\n * \r\n *   We can test `f` easily - it is a pure function - independently of\r\n *   any CRUD operation.\r\n * \r\n *   This brings huge simplicity at the expense of some re-computation\r\n *   each time. This may be a very satisfactory trade-off in many cases.\r\n */\r\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar db = ((cljs.core.contains_QMARK_(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event)));\r\n})], 0));\r\n});\r\n/**\r\n * returns an interceptor which runs a given function `f` in the `:after`\r\n *   position, presumably for side effects.\r\n * \r\n *   `f` is called with two arguments: the `:effects` value for `:db`\r\n *   (or the `coeffect` value of db if no db effect is returned) and the event.\r\n *   Its return value is ignored, so `f` can only side-effect.\r\n * \r\n *   Examples use can be seen in the /examples/todomvc:\r\n *   - `f` runs schema validation (reporting any errors found).\r\n *   - `f` writes to localstorage.\r\n */\r\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\r\nvar db = ((cljs.core.contains_QMARK_(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),new cljs.core.Keyword(null,\"db\",\"db\",993250759)], null)):cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"db\",\"db\",993250759)], null)));\r\nvar event = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(null,\"event\",\"event\",301435442)], null));\r\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\r\n\r\nreturn context;\r\n})], 0));\r\n});\r\n/**\r\n * Interceptor factory which acts a bit like `reaction`  (but it flows into\r\n *   `db`, rather than out). It observes N paths within `db` and if any of them\r\n *   test not identical? to their previous value  (as a result of a event handler\r\n *   being run) then it runs `f` to compute a new value, which is then assoc-ed\r\n *   into the given `out-path` within `db`.\r\n * \r\n *   Usage:\r\n * \r\n *    (defn my-f\r\n *      [a-val b-val]\r\n *      ... some computation on a and b in here)\r\n * \r\n *    (on-changes my-f [:c]  [:a] [:b])\r\n * \r\n *   Put this Interceptor on the right handlers (ones which might change :a or :b).\r\n *   It will:\r\n *   - call `f` each time the value at path [:a] or [:b] changes\r\n *   - call `f` with the values extracted from [:a] [:b]\r\n *   - assoc the return value from `f` into the path  [:c]\r\n *   \r\n */\r\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___26054 = arguments.length;\r\nvar i__4731__auto___26055 = (0);\r\nwhile(true){\r\nif((i__4731__auto___26055 < len__4730__auto___26054)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___26055]));\r\n\r\nvar G__26056 = (i__4731__auto___26055 + (1));\r\ni__4731__auto___26055 = G__26056;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\r\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\r\n});\r\n\r\nre_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (new_db,old_db){\r\nreturn (function (p1__25965_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__25965_SHARP_);\r\n});})(new_db,old_db))\r\n,in_paths);\r\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (new_db,old_db,new_ins){\r\nreturn (function (p1__25966_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__25966_SHARP_);\r\n});})(new_db,old_db,new_ins))\r\n,in_paths);\r\nvar changed_ins_QMARK_ = (function (){var and__4120__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nif(and__4120__auto__){\r\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(changed_ins_QMARK_)){\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\r\n} else {\r\nreturn context;\r\n}\r\n})], 0));\r\n});\r\n\r\nre_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2);\r\n\r\n/** @this {Function} */\r\nre_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq25967){\r\nvar G__25968 = cljs.core.first(seq25967);\r\nvar seq25967__$1 = cljs.core.next(seq25967);\r\nvar G__25969 = cljs.core.first(seq25967__$1);\r\nvar seq25967__$2 = cljs.core.next(seq25967__$1);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__25968,G__25969,seq25967__$2);\r\n});\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^V","~$data","~$clojure.data","~$re-frame.trace","^Y","~$re-frame.registrar","^Z","~$cljs.core","^[","~$goog","^10","~$registrar","^Z","~$trace","^Y","~$re-frame.utils","^13","~$re-frame.loggers","^14","~$utils","^13","^U","^U","^X","^X","~$re-frame.db","^16"],"~:seen",["^M",["~:require"]],"~:uses",["^ ","~$->interceptor","^V","~$get-effect","^V","~$get-coeffect","^V","~$assoc-coeffect","^V","~$assoc-effect","^V","~$console","^14","~$app-db","^16"],"~:require-macros",["^ ","^Y","^Y","^12","^Y","^[","^["],"~:form",["~#list",["~$ns","^O","contains re-frame supplied, standard interceptors",["^1C",["^18",["^V","~:refer",["^1:","^1;","^1<","^1=","^1>"]],["^14","^1E",["^1?"]],["^Z","~:as","^11"],["^16","^1E",["^1@"]],["^X","^1F","^W"],["^U","^1F","^T"],["^13","^1F","^15"],["^Y","^1F","^12","~:include-macros",true]]]]],"~:flags",["^ ","^18",["^M",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^V","^14","^Z","^16","^X","^U","^13","^Y"]],"^Q","^O","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1574163714765,"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.registrar :as registrar]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n(def debug\n  \"An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n  1. the event vector\n  2. a `clojure.data/diff` of db, before vs after, which shows\n     the changes caused by the event handler.  You will absolutely have\n     to understand https://clojuredocs.org/clojure.data/diff to\n     understand the output.\n\n  You'd typically include this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So condition it out like this :\n\n      (re-frame.core/reg-event-db\n         :evt-id\n         [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n         (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set goog.DEBUG to\n  false in your production builds - look in `project.clj` of /examples/todomvc.\n  \"\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No :db changes caused by:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"no app-db changes caused by:\" event))))\n                context))))\n\n\n(def trim-v\n  \"An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing event handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)\"\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trimv-before\n               [context]\n               (-> context\n                   (update-in [:coeffects :event] subvec 1)\n                   (assoc-in [:coeffects ::untrimmed-event] (get-coeffect context :event))))\n    :after   (fn trimv-after\n               [context]\n               (-> context\n                   (utils/dissoc-in [:coeffects ::untrimmed-event])\n                   (assoc-in [:coeffects :event] (get-coeffect context ::untrimmed-event))))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-in context [:coeffects :event])}\n                      (let [{:keys [db event]} (:coeffects context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (:effects new-context)\n                          :coeffects (:coeffects context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [{:keys [event] :as coeffects} (:coeffects context)\n                  new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-in context [:coeffects :event])}\n                    (->> (handler-fn coeffects event)\n                         (assoc context :effects)))]\n              (trace/merge-trace!\n                {:tags {:effects   (:effects new-context)\n                        :coeffects (:coeffects context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-in context [:coeffects :event])}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (:effects new-context)\n                          :coeffects (:coeffects context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  \"returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  \"\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  \"Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases.\"\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (:effects context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  \"returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage.\"\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n\n(defn  on-changes\n  \"Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  \"\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n","~:reader-features",["^M",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2","event","orig-db","new-db","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","vec__25915","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/trim-v","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/subvec","cljs.core/assoc-in","re-frame.utils/dissoc-in","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__25921","re-frame.trace/*current-trace*","*current-trace*-temp-val__25922","re-frame.trace/start-trace","end__25682__auto__","re-frame.interop/now","duration__25683__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","map__25923","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__25925","db","re-frame.interceptor/assoc-effect","new-trace__25684__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.std-interceptors/fx-handler->interceptor","map__25931","coeffects","*current-trace*-orig-val__25937","*current-trace*-temp-val__25938","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__25944","*current-trace*-temp-val__25945","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq25950","self__4718__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","re-frame.interceptor/assoc-coeffect","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq25967","G__25968","cljs.core/first","cljs.core/next","G__25969","self__4717__auto__","out-path","in-paths","old-db","new-ins","p1__25965#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","old-ins","p1__25966#","changed-ins?","and__4120__auto__","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1","cljs.core/some","cljs.core/false?","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/identical?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1574163601000,1574163601000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^M",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1L","reagent/impl/batching.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1L","goog/dom/tagname.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","~$goog.dom.HtmlElement"]]],["^1L","goog/math/math.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","~$goog.array","~$goog.asserts"]]],["^1L","goog/labs/useragent/browser.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"]]],["^1L","re_frame/loggers.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","~$clojure.set"]]],["^1L","goog/array/array.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2;"]]],["^1Y","node_modules/prop-types/checkPropTypes.js"],[1574163601000,1574163601000,1549836454000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1L","reagent/impl/util.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^25","^26","^28"]]],["^1Y","node_modules/fbjs/lib/emptyFunction.js"],[1574163601000,1574163601000,1528785402000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","goog/debug/error.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","re_frame/registrar.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","~$re-frame.interop","^14"]]],["^1Y","node_modules/fbjs/lib/emptyObject.js"],[1574163601000,1574163601000,1528785402000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","goog/dom/nodetype.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1Y","node_modules/scheduler/cjs/scheduler.development.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","reagent/ratom.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^27","^25","~$reagent.impl.batching","^2?"]]],["^1Y","node_modules/scheduler/cjs/scheduler.production.min.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","re_frame/interop.cljs"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1Y","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1Y","node_modules/create-react-class/factory.js"],[1574163601000,1574163601000,1517346959000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1Y","node_modules/react/index.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],[1574163601395,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","goog/object/object.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","reagent/impl/template.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^@","^28","~$clojure.walk","^27","~$reagent.impl.component","^2B","^2E","^26","^25"]]],["^1Y","node_modules/react-dom/cjs/react-dom.production.min.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","^@","^2F","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1Y","node_modules/react/cjs/react.development.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","^2F","~$module$node_modules$prop_types$checkPropTypes"]]],["^1L","goog/math/long.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2;","~$goog.reflect"]]],["^1Y","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1Y","node_modules/fbjs/lib/warning.js"],[1574163601000,1574163601000,1528785401000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1L","goog/functions/functions.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","reagent/impl/component.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^B","^@","^27","^2B","^2E","^26","^25"]]],["^1L","clojure/walk.cljs"],[1567262080081,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^["]]],["^1L","goog/structs/map.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration","^2="]]],["^1Y","node_modules/scheduler/index.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1L","goog/labs/useragent/engine.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","^2<","^2>"]]],["^1L","goog/asserts/asserts.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","~$goog.debug.Error","~$goog.dom.NodeType","^2>"]]],["^1L","goog/uri/uri.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","^2;","^2>","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Y","node_modules/object-assign/index.js"],[1574163601000,1574163601000,1484580833000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","re_frame/db.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^2A"]]],["^1L","goog/base.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",[]]],["^1L","goog/structs/structs.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","^2="]]],["^1L","clojure/string.cljs"],[1567262080081,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^2>","~$goog.string.StringBuffer"]]],["^1Y","node_modules/create-react-class/index.js"],[1574163601000,1574163601000,1517346956000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","^@","~$module$node_modules$create_react_class$factory"]]],["^1L","re_frame/cofx.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^16","^V","^Z","^14"]]],["^1Y","node_modules/react/cjs/react.production.min.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","^2F"]]],["^1L","goog/debug/entrypointregistry.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2;"]]],["^1L","goog/string/string.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","re_frame/interceptor.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^14","^2A","^Y","^2?"]]],["^1L","clojure/data.cljs"],[1567262080081,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^2?"]]],["^1L","goog/reflect/reflect.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","goog/labs/useragent/util.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2>"]]],["^1L","reagent/core.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^@","~$reagent.impl.template","^2M","^27","^2B","^2E","^25","^26","~$reagent.dom"]]],["^1L","goog/string/stringbuffer.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","re_frame/std_interceptors.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^V","^14","^Z","^16","^X","^U","^13","^Y"]]],["^1L","goog/iter/iter.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","^2;","~$goog.functions","~$goog.math"]]],["^1L","goog/async/nexttick.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^36","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1L","re_frame/utils.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^14"]]],["^1L","reagent/dom.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^D","^27","^34","^2B","^2E","^25","^26"]]],["^1Y","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1574163601000,1574163601000,1549571078000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","reagent/interop.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^["]]],["^1L","goog/dom/htmlelement.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1L","cljs/core.cljs"],[1567262080081,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["~$goog.math.Long","~$goog.math.Integer","^2>","^2=","^2:","~$goog.Uri","^32"]]],["^1L","reagent/debug.cljs"],[1567262094669,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^["]]],["^1L","goog/math/integer.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10"]]],["^1Y","node_modules/scheduler/tracing.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1Y","node_modules/react-dom/cjs/react-dom.development.js"],[1574163601000,1574163601000,499162500000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22","^@","^2F","^2P","^2N","~$module$node_modules$scheduler$tracing"]]],["^1L","clojure/set.cljs"],[1567262080081,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^["]]],["^1L","goog/uri/utils.js"],[1567356087625,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^2:","^2;","^2>"]]],["^1Y","node_modules/fbjs/lib/invariant.js"],[1574163601000,1574163601000,1528785400000,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^22"]]],["^1L","re_frame/trace.cljc"],[1574085170058,"^1Z",["^ ","^1[",null,"^20",["^M",[]],"^21",["^10","^[","^2A","^14","^36"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1574085170000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1567262094000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1574085169000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J"],"^K",null,"^L",["^M",[]],"^N","^O","^R",null,"^S",["^ ","^T","^U","^V","^V","^W","^X","^Y","^Y","^Z","^Z","^[","^[","^10","^10","^11","^Z","^12","^Y","^13","^13","^14","^14","^15","^13","^U","^U","^X","^X","^16","^16"],"^17",["^M",["^18"]],"^19",["^ ","^1:","^V","^1;","^V","^1<","^V","^1=","^V","^1>","^V","^1?","^14","^1@","^16"],"~:defs",["^ ","~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",319,"^9",8,"^:",319,"^;",18,"~:arglists",["^1C",["~$quote",["^1C",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"^6","Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  ","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1C",["~$f","^4=","^4>"]]],"^4;",["^1C",[["~$f","^4=","~$&","^4>"]]],"~:arglists-meta",["^1C",[null]]]],"^N","~$re-frame.std-interceptors/on-changes","^7","re_frame/std_interceptors.cljc","^;",18,"^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[["^1C",["~$f","^4=","^4>"]]],"^4;",["^1C",[["~$f","^4=","~$&","^4>"]]],"^4D",["^1C",[null]]],"^4C",[["^1C",["~$f","^4=","^4>"]]],"~:protocol-impl",null,"^4A",2,"^4D",["^1C",[null]],"^9",1,"^4@",true,"~:methods",[["^ ","^4A",2,"^4@",true,"~:tag","~$cljs.core/IMap"]],"^8",319,"~:ret-tag","~$any","^:",319,"^4B",2,"~:fn-var",true,"^4;",["^1C",[["~$f","^4=","~$&","^4>"]]],"^6","Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  "],"~$enrich",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",237,"^9",7,"^:",237,"^;",13,"^4;",["^1C",["^4<",["^1C",[["~$f"]]]]],"^6","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases."],"^N","~$re-frame.std-interceptors/enrich","^7","re_frame/std_interceptors.cljc","^;",13,"^4C",["^1C",[["~$f"]]],"^4F",null,"^4D",["^1C",[null,null]],"^9",1,"^4@",false,"^8",237,"^4J","^4I","^:",237,"^4B",1,"^4L",true,"^4;",["^1C",["^4<",["^1C",[["~$f"]]]]],"^6","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases."],"~$path",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",182,"^9",7,"^:",182,"^;",11,"^4;",["^1C",["^4<",["^1C",[["~$&","~$args"]]]]],"^6","returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  ","^4?",["^ ","^4@",true,"^4A",0,"^4B",0,"^4C",[["^1C",["^4P"]]],"^4;",["^1C",[["~$&","^4P"]]],"^4D",["^1C",[null]]]],"^N","~$re-frame.std-interceptors/path","^7","re_frame/std_interceptors.cljc","^;",11,"^4?",["^ ","^4@",true,"^4A",0,"^4B",0,"^4C",[["^1C",["^4P"]]],"^4;",["^1C",[["~$&","^4P"]]],"^4D",["^1C",[null]]],"^4C",[["^1C",["^4P"]]],"^4F",null,"^4A",0,"^4D",["^1C",[null]],"^9",1,"^4@",true,"^4G",[["^ ","^4A",0,"^4@",true,"^4H","^4I"]],"^8",182,"^4J","^4K","^:",182,"^4B",0,"^4L",true,"^4;",["^1C",[["~$&","^4P"]]],"^6","returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  "],"~$ctx-handler->interceptor",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",156,"^9",7,"^:",156,"^;",31,"^4;",["^1C",["^4<",["^1C",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^N","~$re-frame.std-interceptors/ctx-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",31,"^4C",["^1C",[["^4S"]]],"^4F",null,"^4D",["^1C",[null,null]],"^9",1,"^4@",false,"^8",156,"^4J","^4I","^:",156,"^4B",1,"^4L",true,"^4;",["^1C",["^4<",["^1C",[["^4S"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",14,"^9",6,"^:",14,"^;",11],"^N","~$re-frame.std-interceptors/debug","^7","re_frame/std_interceptors.cljc","^;",11,"^9",1,"^8",14,"^:",14,"^4H","^4I","^6","An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n  1. the event vector\n  2. a `clojure.data/diff` of db, before vs after, which shows\n     the changes caused by the event handler.  You will absolutely have\n     to understand https://clojuredocs.org/clojure.data/diff to\n     understand the output.\n\n  You'd typically include this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So condition it out like this :\n\n      (re-frame.core/reg-event-db\n         :evt-id\n         [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n         (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set goog.DEBUG to\n  false in your production builds - look in `project.clj` of /examples/todomvc.\n  "],"~$trim-v",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",65,"^9",6,"^:",65,"^;",12],"^N","~$re-frame.std-interceptors/trim-v","^7","re_frame/std_interceptors.cljc","^;",12,"^9",1,"^8",65,"^:",65,"^4H","^4I","^6","An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing event handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)"],"~$after",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",295,"^9",7,"^:",295,"^;",12,"^4;",["^1C",["^4<",["^1C",[["~$f"]]]]],"^6","returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage."],"^N","~$re-frame.std-interceptors/after","^7","re_frame/std_interceptors.cljc","^;",12,"^4C",["^1C",[["~$f"]]],"^4F",null,"^4D",["^1C",[null,null]],"^9",1,"^4@",false,"^8",295,"^4J","^4I","^:",295,"^4B",1,"^4L",true,"^4;",["^1C",["^4<",["^1C",[["~$f"]]]]],"^6","returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage."],"~$fx-handler->interceptor",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",125,"^9",7,"^:",125,"^;",30,"^4;",["^1C",["^4<",["^1C",[["^4S"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^N","~$re-frame.std-interceptors/fx-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",30,"^4C",["^1C",[["^4S"]]],"^4F",null,"^4D",["^1C",[null,null]],"^9",1,"^4@",false,"^8",125,"^4J","^4I","^:",125,"^4B",1,"^4L",true,"^4;",["^1C",["^4<",["^1C",[["^4S"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^4:",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",93,"^9",7,"^:",93,"^;",30,"^4;",["^1C",["^4<",["^1C",[["^4S"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^N","~$re-frame.std-interceptors/db-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",30,"^4C",["^1C",[["^4S"]]],"^4F",null,"^4D",["^1C",[null,null]],"^9",1,"^4@",false,"^8",93,"^4J","^4I","^:",93,"^4B",1,"^4L",true,"^4;",["^1C",["^4<",["^1C",[["^4S"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"]],"^1A",["^ ","^Y","^Y","^12","^Y","^[","^["],"~:cljs.analyzer/constants",["^ ","^17",["^M",["~:path","~:tags","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log","~:re-frame.std-interceptors/untrimmed-event"]],"~:order",["^5C","^5=","^5M","^5O","^5A","^5B","^57","^59","^56","^5J","^5>","^5F","^5P","^5@","^5N","^5:","^5?","^5;","^5<","^5H","^55","^5D","^58","^5K","^5G","^5E","^54","^5L","^5I"]],"^1H",["^ ","^18",["^M",[]]],"^1I",["^ "],"^1J",["^10","^[","^V","^14","^Z","^16","^X","^U","^13","^Y"]],"^Q","^O","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1X",[["^5T","~:static-fns"],true,["^5T","~:elide-asserts"],false,["^5T","~:optimize-constants"],null,["^5T","^1O"],null,["^5T","~:external-config"],null,["^5T","~:tooling-config"],null,["^5T","~:emit-constants"],null,["^5T","~:load-tests"],null,["^5T","~:form-size-threshold"],null,["^5T","~:infer-externs"],true,["^5T","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5T","~:fn-invoke-direct"],null,["^5T","~:source-map"],"/dev/null"]]]