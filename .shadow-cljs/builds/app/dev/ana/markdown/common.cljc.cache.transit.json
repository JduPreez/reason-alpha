["^ ","~:output",["^ ","~:js","goog.provide('markdown.common');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\nmarkdown.common._STAR_inhibit_separator_STAR_ = null;\r\nmarkdown.common.escape_delimiter = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((254))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((491)))].join('');\r\nmarkdown.common.gen_token = (function markdown$common$gen_token(n){\r\nreturn [markdown.common.escape_delimiter,cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),markdown.common.escape_delimiter].join('');\r\n});\r\n/**\r\n * Freezes an output string.  Converts to a placeholder token and puts that into the output.\r\n *   Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\r\n *   So that it can be unfrozen later.\r\n */\r\nmarkdown.common.freeze_string = (function markdown$common$freeze_string(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___32621 = arguments.length;\r\nvar i__4731__auto___32622 = (0);\r\nwhile(true){\r\nif((i__4731__auto___32622 < len__4730__auto___32621)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___32622]));\r\n\r\nvar G__32623 = (i__4731__auto___32622 + (1));\r\ni__4731__auto___32622 = G__32623;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\r\n});\r\n\r\nmarkdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar state = cljs.core.last(args);\r\nvar token = markdown.common.gen_token(cljs.core.count(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token,cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),token], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.flatten(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(args))))], null);\r\n});\r\n\r\nmarkdown.common.freeze_string.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nmarkdown.common.freeze_string.cljs$lang$applyTo = (function (seq32555){\r\nvar self__4718__auto__ = this;\r\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq32555));\r\n});\r\n\r\n/**\r\n * Recursively replaces the frozen strings in the output with the original text.\r\n */\r\nmarkdown.common.thaw_string = (function markdown$common$thaw_string(text,state){\r\nwhile(true){\r\nvar temp__5718__auto__ = cljs.core.re_seq(cljs.core.re_pattern([markdown.common.escape_delimiter,\"\\\\d+\",markdown.common.escape_delimiter].join('')),text);\r\nif(cljs.core.truth_(temp__5718__auto__)){\r\nvar matches = temp__5718__auto__;\r\nvar G__32631 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (text,state,matches,temp__5718__auto__){\r\nreturn (function (s,r){\r\nreturn clojure.string.replace(s,cljs.core.re_pattern(r),((function (text,state,matches,temp__5718__auto__){\r\nreturn (function (p1__32560_SHARP_){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state),p1__32560_SHARP_,p1__32560_SHARP_);\r\n});})(text,state,matches,temp__5718__auto__))\r\n);\r\n});})(text,state,matches,temp__5718__auto__))\r\n,text,matches);\r\nvar G__32632 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),((function (text,state,matches,temp__5718__auto__){\r\nreturn (function (p1__32561_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,p1__32561_SHARP_,matches);\r\n});})(text,state,matches,temp__5718__auto__))\r\n);\r\ntext = G__32631;\r\nstate = G__32632;\r\ncontinue;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\r\n */\r\nmarkdown.common.thaw_strings = (function markdown$common$thaw_strings(text,state){\r\nif((!(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state))))){\r\nreturn markdown.common.thaw_string(text,state);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.common.escape_code = (function markdown$common$escape_code(s){\r\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(s,/&/,\"&amp;\"),/\\*/,\"&#42;\"),/\\^/,\"&#94;\"),/\\_/,\"&#95;\"),/\\~/,\"&#126;\"),/\\</,\"&lt;\"),/\\>/,\"&gt;\"),/\\[/,\"&#91;\"),/\\]/,\"&#93;\"),/\\(/,\"&#40;\"),/\\)/,\"&#41;\"),/\\\"/,\"&quot;\");\r\n});\r\nmarkdown.common.escaped_chars = (function markdown$common$escaped_chars(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\\\\\\\/,\"&#92;\"),/\\\\`/,\"&#8216;\"),/\\\\\\*/,\"&#42;\"),/\\\\_/,\"&#95;\"),/\\\\\\{/,\"&#123;\"),/\\\\\\}/,\"&#125;\"),/\\\\\\[/,\"&#91;\"),/\\\\\\]/,\"&#93;\"),/\\\\\\(/,\"&#40;\"),/\\\\\\)/,\"&#41;\"),/\\\\#/,\"&#35;\"),/\\\\\\+/,\"&#43;\"),/\\\\-/,\"&#45;\"),/\\\\\\./,\"&#46;\"),/\\\\!/,\"&#33;\")),state], null);\r\n});\r\nmarkdown.common.open_html_tags = (function markdown$common$open_html_tags(open_QMARK_,token_seq){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"open\",\"open\",-1763596448),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (state,token){\r\nvar G__32568 = token;\r\nswitch (G__32568) {\r\ncase \"<\":\r\nreturn new cljs.core.Keyword(null,\"open\",\"open\",-1763596448);\r\n\r\nbreak;\r\ncase \">\":\r\nreturn new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359);\r\n\r\nbreak;\r\ndefault:\r\nreturn state;\r\n\r\n}\r\n}),(cljs.core.truth_(open_QMARK_)?new cljs.core.Keyword(null,\"open\",\"open\",-1763596448):new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359)),token_seq));\r\n});\r\n/**\r\n * Return a transformer to\r\n * - find all the chunks of the string delimited by the `separator',\r\n * - wrap the output with the `open' and `close' markers, and\r\n * - apply the `transformer' to the text inside the chunk.\r\n */\r\nmarkdown.common.make_separator = (function markdown$common$make_separator(var_args){\r\nvar G__32572 = arguments.length;\r\nswitch (G__32572) {\r\ncase 3:\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nmarkdown.common.make_separator.cljs$core$IFn$_invoke$arity$3 = (function (separator,open,close){\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,cljs.core.identity);\r\n});\r\n\r\nmarkdown.common.make_separator.cljs$core$IFn$_invoke$arity$4 = (function (separator,open,close,transformer){\r\nvar separator__$1 = cljs.core.seq(separator);\r\nreturn ((function (separator__$1){\r\nreturn (function (text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar out = cljs.core.PersistentVector.EMPTY;\r\nvar buf = cljs.core.PersistentVector.EMPTY;\r\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,cljs.core.first(separator__$1)),cljs.core.seq(text));\r\nvar cur_state = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),false], 0));\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(tokens)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.into.cljs$core$IFn$_invoke$arity$2((cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,separator__$1):out),buf)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576))], null);\r\n} else {\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)){\r\nvar vec__32585 = (((transformer === cljs.core.identity))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [buf,cur_state], null):(function (){var vec__32588 = (function (){var G__32591 = clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf);\r\nvar G__32592 = cur_state;\r\nreturn (transformer.cljs$core$IFn$_invoke$arity$2 ? transformer.cljs$core$IFn$_invoke$arity$2(G__32591,G__32592) : transformer.call(null,G__32591,G__32592));\r\n})();\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32588,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32588,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq(s),new_state], null);\r\n})());\r\nvar new_buf = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32585,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32585,(1),null);\r\nvar G__32704 = cljs.core.vec(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.seq(open),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_buf,cljs.core.seq(close)], 0)));\r\nvar G__32705 = cljs.core.PersistentVector.EMPTY;\r\nvar G__32706 = cljs.core.rest(tokens);\r\nvar G__32707 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false);\r\nout = G__32704;\r\nbuf = G__32705;\r\ntokens = G__32706;\r\ncur_state = G__32707;\r\ncontinue;\r\n} else {\r\nvar G__32713 = out;\r\nvar G__32714 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(tokens));\r\nvar G__32715 = cljs.core.rest(tokens);\r\nvar G__32716 = cur_state;\r\nout = G__32713;\r\nbuf = G__32714;\r\ntokens = G__32715;\r\ncur_state = G__32716;\r\ncontinue;\r\n}\r\n} else {\r\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)) && (cljs.core.not(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state))))){\r\nvar G__32720 = out;\r\nvar G__32721 = buf;\r\nvar G__32722 = cljs.core.rest(tokens);\r\nvar G__32723 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),true);\r\nout = G__32720;\r\nbuf = G__32721;\r\ntokens = G__32722;\r\ncur_state = G__32723;\r\ncontinue;\r\n} else {\r\nvar G__32724 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(tokens));\r\nvar G__32725 = buf;\r\nvar G__32726 = cljs.core.rest(tokens);\r\nvar G__32727 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),markdown.common.open_html_tags(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state),cljs.core.first(tokens)));\r\nout = G__32724;\r\nbuf = G__32725;\r\ntokens = G__32726;\r\ncur_state = G__32727;\r\ncontinue;\r\n\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n;})(separator__$1))\r\n});\r\n\r\nmarkdown.common.make_separator.cljs$lang$maxFixedArity = 4;\r\n\r\nmarkdown.common.escape_code_transformer = (function markdown$common$escape_code_transformer(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.escape_code(text),state], null);\r\n});\r\nmarkdown.common.separator = (function markdown$common$separator(escape_QMARK_,text,open,close,separator,state){\r\nvar fexpr__32595 = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,(cljs.core.truth_(escape_QMARK_)?markdown.common.escape_code_transformer:cljs.core.identity));\r\nreturn (fexpr__32595.cljs$core$IFn$_invoke$arity$2 ? fexpr__32595.cljs$core$IFn$_invoke$arity$2(text,state) : fexpr__32595.call(null,text,state));\r\n});\r\nmarkdown.common.strong = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"**\",\"<strong>\",\"</strong>\");\r\nmarkdown.common.bold_italic = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"***\",\"<b><i>\",\"</i></b>\");\r\nmarkdown.common.bold = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"__\",\"<b>\",\"</b>\");\r\nmarkdown.common.em = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"*\",\"<em>\",\"</em>\");\r\nmarkdown.common.italics = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"_\",\"<i>\",\"</i>\");\r\nmarkdown.common.strikethrough = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"~~\",\"<del>\",\"</del>\");\r\nmarkdown.common.inline_code = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(\"`\",\"<code>\",\"</code>\",markdown.common.escape_code_transformer);\r\nmarkdown.common.inhibit = (function markdown$common$inhibit(text,state){\r\nif(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)){\r\nvar fexpr__32596 = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(markdown.common._STAR_inhibit_separator_STAR_,\"\",\"\",markdown.common.freeze_string);\r\nreturn (fexpr__32596.cljs$core$IFn$_invoke$arity$2 ? fexpr__32596.cljs$core$IFn$_invoke$arity$2(text,state) : fexpr__32596.call(null,text,state));\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.common.escape_inhibit_separator = (function markdown$common$escape_inhibit_separator(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)?clojure.string.replace(text,clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(markdown.common._STAR_inhibit_separator_STAR_,markdown.common._STAR_inhibit_separator_STAR_)),clojure.string.join.cljs$core$IFn$_invoke$arity$1(markdown.common._STAR_inhibit_separator_STAR_)):text),state], null);\r\n});\r\nmarkdown.common.heading_text = (function markdown$common$heading_text(text){\r\nreturn clojure.string.trim(clojure.string.replace(clojure.string.replace(text,/^([ ]+)?[#]+/,\"\"),/[#]+$/,\"\"));\r\n});\r\nmarkdown.common.heading_level = (function markdown$common$heading_level(text){\r\nvar num_hashes = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__32605_SHARP_){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__32605_SHARP_);\r\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__32606_SHARP_){\r\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",p1__32606_SHARP_)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__32606_SHARP_)));\r\n}),cljs.core.seq(text))));\r\nif((num_hashes > (0))){\r\nreturn num_hashes;\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.common.make_heading = (function markdown$common$make_heading(text,heading_anchors){\r\nvar temp__5720__auto__ = markdown.common.heading_level(text);\r\nif(cljs.core.truth_(temp__5720__auto__)){\r\nvar heading = temp__5720__auto__;\r\nvar text__$1 = markdown.common.heading_text(text);\r\nreturn [\"<h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),(cljs.core.truth_(heading_anchors)?[\" id=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(clojure.string.lower_case(text__$1),\" \",\"&#95;\")),\"\\\"\"].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text__$1),\"</h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),\">\"].join('');\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.common.dashes = (function markdown$common$dashes(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\-\\-\\-/,\"&mdash;\"),/\\-\\-/,\"&ndash;\"),/<code>.*<\\/code>/,(function (s){\r\nreturn clojure.string.replace(clojure.string.replace(s,/&mdash;/,\"---\"),/&ndash;/,\"--\");\r\n}))),state], null);\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/common.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.common","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^S","~$string","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^N",["^10",["^X",["^S","~:as","^T"]]]]],"~:flags",["^ ","^X",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","markdown/common.cljc"],"~:compiled-at",1574163718525,"~:resource-name","markdown/common.cljc","~:warnings",[],"~:source","(ns markdown.common\n  (:require [clojure.string :as string]))\n\n(declare ^{:dynamic true} *substring*)\n\n(def ^:dynamic *inhibit-separator* nil)\n\n(def escape-delimiter (str (char 254) (char 491)))\n\n(defn gen-token [n]\n  (str escape-delimiter n escape-delimiter))\n\n(defn freeze-string\n  \"Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.\"\n  [& args]\n  (let [state (last args)\n        token (gen-token (count (:frozen-strings state)))]\n    [token (assoc-in state\n                     [:frozen-strings token]\n                     (reduce str (flatten (drop-last args))))]))\n\n(defn thaw-string\n  \"Recursively replaces the frozen strings in the output with the original text.\"\n  [text state]\n  (if-let [matches (re-seq (re-pattern (str escape-delimiter \"\\\\d+\" escape-delimiter)) text)]\n    (recur\n      (reduce\n        (fn [s r]\n          (string/replace s (re-pattern r) #(get (:frozen-strings state) % %)))\n        text matches)\n      (update state :frozen-strings #(apply dissoc % matches)))\n    [text state]))\n\n(defn thaw-strings\n  \"Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\"\n  [text state]\n  (if-not (empty? (:frozen-strings state))\n    (thaw-string text state)\n    [text state]))\n\n(defn escape-code [s]\n  (-> s\n      (string/replace #\"&\" \"&amp;\")\n      (string/replace #\"\\*\" \"&#42;\")\n      (string/replace #\"\\^\" \"&#94;\")\n      (string/replace #\"\\_\" \"&#95;\")\n      (string/replace #\"\\~\" \"&#126;\")\n      (string/replace #\"\\<\" \"&lt;\")\n      (string/replace #\"\\>\" \"&gt;\")\n      ;(string/replace #\"\\/\" \"&frasl;\") ;screws up ClojureScript compiling\n      (string/replace #\"\\[\" \"&#91;\")\n      (string/replace #\"\\]\" \"&#93;\")\n      (string/replace #\"\\(\" \"&#40;\")\n      (string/replace #\"\\)\" \"&#41;\")\n      (string/replace #\"\\\"\" \"&quot;\")))\n\n(defn escaped-chars [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\\\\\\\\" \"&#92;\")\n         (string/replace #\"\\\\`\" \"&#8216;\")\n         (string/replace #\"\\\\\\*\" \"&#42;\")\n         (string/replace #\"\\\\_\" \"&#95;\")\n         (string/replace #\"\\\\\\{\" \"&#123;\")\n         (string/replace #\"\\\\\\}\" \"&#125;\")\n         (string/replace #\"\\\\\\[\" \"&#91;\")\n         (string/replace #\"\\\\\\]\" \"&#93;\")\n         (string/replace #\"\\\\\\(\" \"&#40;\")\n         (string/replace #\"\\\\\\)\" \"&#41;\")\n         (string/replace #\"\\\\#\" \"&#35;\")\n         (string/replace #\"\\\\\\+\" \"&#43;\")\n         (string/replace #\"\\\\-\" \"&#45;\")\n         (string/replace #\"\\\\\\.\" \"&#46;\")\n         (string/replace #\"\\\\!\" \"&#33;\")))\n   state])\n\n(defn open-html-tags [open? token-seq]\n  (= :open (reduce (fn [state token]\n                     (case token\n                       \\< :open\n                       \\> :closed\n                       state))\n                   (if open? :open :closed)\n                   token-seq)))\n\n(defn make-separator\n  \"Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.\"\n  ([separator open close]\n   (make-separator separator open close identity))\n  ([separator open close transformer]\n   (let [separator (seq separator)]  ;; allow char seq or string\n     (fn [text state]\n       (if (:code state)\n         [text state]\n         (loop [out       []\n                buf       []\n                tokens    (partition-by (partial = (first separator)) (seq text))\n                cur-state (assoc state :found-token false :in-tag? false)]\n           (cond\n             (empty? tokens)\n             [(string/join (into (if (:found-token cur-state) (into out separator) out) buf))\n              (dissoc cur-state :found-token)]\n\n             (:found-token cur-state)\n             (if (= (first tokens) separator)\n               (let [[new-buf new-state]\n                     (if (identical? transformer identity)\n                       ;; Skip the buf->string->buf conversions in the common\n                       ;; case.\n                       [buf cur-state]\n                       (let [[s new-state] (transformer (string/join buf) cur-state)]\n                         [(seq s) new-state]))]\n                 (recur (vec (concat out (seq open) new-buf (seq close)))\n                        []\n                        (rest tokens)\n                        (assoc new-state :found-token false)))\n               (recur out\n                      (into buf (first tokens))\n                      (rest tokens)\n                      cur-state))\n\n             (and (= (first tokens) separator) (not (:in-tag? cur-state)))\n             (recur out buf (rest tokens) (assoc cur-state :found-token true))\n\n             :default\n             (recur (into out (first tokens)) buf (rest tokens) (assoc cur-state :in-tag? (open-html-tags (:in-tag? cur-state) (first tokens)))))))))))\n\n(defn escape-code-transformer [text state]\n  [(escape-code text) state])\n\n;; Not used any more internally; kept around just in case third party code\n;; depends on this.\n(defn separator [escape? text open close separator state]\n  ((make-separator separator open close (if escape? escape-code-transformer identity))\n   text state))\n\n(def strong (make-separator \"**\" \"<strong>\" \"</strong>\"))\n\n(def bold-italic (make-separator \"***\" \"<b><i>\" \"</i></b>\"))\n\n(def bold (make-separator \"__\" \"<b>\" \"</b>\"))\n\n(def em (make-separator \"*\" \"<em>\" \"</em>\"))\n\n(def italics (make-separator \"_\" \"<i>\" \"</i>\"))\n\n(def strikethrough (make-separator \"~~\" \"<del>\" \"</del>\"))\n\n(def inline-code (make-separator \"`\" \"<code>\" \"</code>\" escape-code-transformer))\n\n(defn inhibit [text state]\n  (if *inhibit-separator*\n    ((make-separator *inhibit-separator* \"\" \"\" freeze-string)\n     text state)\n    [text state]))\n\n(defn escape-inhibit-separator [text state]\n  [(if *inhibit-separator*\n     (string/replace text\n                     (string/join (concat *inhibit-separator* *inhibit-separator*))\n                     (string/join *inhibit-separator*))\n     text)\n   state])\n\n(defn heading-text [text]\n  (-> (clojure.string/replace text #\"^([ ]+)?[#]+\" \"\")\n      (clojure.string/replace #\"[#]+$\" \"\")\n      string/trim))\n\n(defn heading-level [text]\n  (let [num-hashes (count (filter #(not= \\space %) (take-while #(or (= \\# %) (= \\space %)) (seq text))))]\n    (if (pos? num-hashes) num-hashes)))\n\n(defn make-heading [text heading-anchors]\n  (when-let [heading (heading-level text)]\n    (let [text (heading-text text)]\n      ;; We do not need to process the id string, HTML5 ids can contain anything except the space character.\n      ;; (https://www.w3.org/TR/html5/dom.html#the-id-attribute)\n      (str \"<h\" heading (when heading-anchors (str \" id=\\\"\" (-> text string/lower-case (string/replace \" \" \"&#95;\")) \"\\\"\")) \">\"\n           text \"</h\" heading \">\"))))\n\n(defn dashes [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\-\\-\\-\" \"&mdash;\")\n         (string/replace #\"\\-\\-\" \"&ndash;\")\n         (string/replace #\"<code>.*</code>\"\n                         (fn [s](-> s\n                                    (string/replace #\"&mdash;\" \"---\")\n                                    (string/replace #\"&ndash;\" \"--\"))))))\n   state])\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.common/*inhibit-separator*","markdown.common/escape-delimiter","cljs.core/char","markdown.common/gen-token","n","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.common/freeze-string","seq32555","self__4718__auto__","cljs.core/seq","args","state","cljs.core/last","token","cljs.core/count","cljs.core/assoc-in","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/flatten","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","markdown.common/thaw-string","text","temp__5718__auto__","matches","cljs.core/re-seq","cljs.core/re-pattern","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","r","p1__32560#","clojure.string/replace","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p1__32561#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","markdown.common/thaw-strings","cljs.core/empty?","markdown.common/escape-code","markdown.common/escaped-chars","or__4131__auto__","markdown.common/open-html-tags","open?","token-seq","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__32568","G__32572","markdown.common/make-separator","js/Error","separator","open","close","markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4","cljs.core/identity","transformer","out","buf","tokens","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","cljs.core/first","cur-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","vec__32585","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","new-buf","new-state","vec__32588","G__32591","G__32592","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/rest","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","markdown.common/escape-code-transformer","markdown.common/separator","escape?","fexpr__32595","markdown.common/strong","markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3","markdown.common/bold-italic","markdown.common/bold","markdown.common/em","markdown.common/italics","markdown.common/strikethrough","markdown.common/inline-code","markdown.common/inhibit","fexpr__32596","markdown.common/escape-inhibit-separator","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","markdown.common/heading-text","clojure.string/trim","markdown.common/heading-level","num-hashes","p1__32605#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__32606#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","markdown.common/make-heading","heading-anchors","temp__5720__auto__","heading","clojure.string/lower-case","markdown.common/dashes"]]],"~:cache-keys",["~#cmap",[["^17","goog/math/math.js"],[1567356087625,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I"]]],["^17","goog/debug/error.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/dom/nodetype.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","markdown/common.cljc"],[1567356142405,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U","^S"]]],["^17","goog/object/object.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^17","goog/math/long.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I","~$goog.reflect"]]],["^17","goog/functions/functions.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/structs/map.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^17","goog/asserts/asserts.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"]]],["^17","goog/uri/uri.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/base.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",[]]],["^17","goog/structs/structs.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1N"]]],["^17","clojure/string.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U","^1Q","~$goog.string.StringBuffer"]]],["^17","goog/string/string.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/reflect/reflect.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/string/stringbuffer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/iter/iter.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1N","^1H","~$goog.Uri","^1W"]]],["^17","goog/math/integer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/uri/utils.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/common.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^L",["^X"]],"~:shadow/js-access-global",["^L",["Error"]],"^Y",null,"~:defs",["^ ","~$italics",["^ ","^M","~$markdown.common/italics","^6","markdown/common.cljc","^7",151,"^8",1,"^9",151,"^:",13,"^5",["^ ","^6","markdown/common.cljc","^7",151,"^8",6,"^9",151,"^:",13],"~:tag","~$any"],"~$separator",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/common.cljc","^7",139,"^8",7,"^9",139,"^:",16,"~:arglists",["^10",["~$quote",["^10",[["~$escape?","~$text","~$open","~$close","^2R","~$state"]]]]]],"^M","~$markdown.common/separator","^6","markdown/common.cljc","^:",16,"~:method-params",["^10",[["^2V","^2W","^2X","^2Y","^2R","^2Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",139,"~:ret-tag","^2Q","^9",139,"~:max-fixed-arity",6,"~:fn-var",true,"^2T",["^10",["^2U",["^10",[["^2V","^2W","^2X","^2Y","^2R","^2Z"]]]]]],"~$make-heading",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",180,"^8",7,"^9",180,"^:",19,"^2T",["^10",["^2U",["^10",[["^2W","~$heading-anchors"]]]]]],"^M","~$markdown.common/make-heading","^6","markdown/common.cljc","^:",19,"^30",["^10",[["^2W","^38"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",180,"^34",["^L",["^T","~$clj-nil"]],"^9",180,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^38"]]]]]],"~$*substring*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",4,"^8",27,"^9",4,"^:",38,"~:dynamic",true,"~:declared",true],"^M","~$markdown.common/*substring*","^6","markdown/common.cljc","^:",38,"^8",1,"^3<",true,"^7",4,"^3=",true,"^9",4],"~$dashes",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",188,"^8",7,"^9",188,"^:",13,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"^M","~$markdown.common/dashes","^6","markdown/common.cljc","^:",13,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",188,"^34","~$cljs.core/IVector","^9",188,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"~$thaw-strings",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",36,"^8",7,"^9",36,"^:",19,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]],"~:doc","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"^M","~$markdown.common/thaw-strings","^6","markdown/common.cljc","^:",19,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",36,"^34","^3A","^9",36,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]],"^3C","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"~$escape-delimiter",["^ ","^M","~$markdown.common/escape-delimiter","^6","markdown/common.cljc","^7",8,"^8",1,"^9",8,"^:",22,"^5",["^ ","^6","markdown/common.cljc","^7",8,"^8",6,"^9",8,"^:",22],"^2P","^T"],"~$inhibit",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",157,"^8",7,"^9",157,"^:",14,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"^M","~$markdown.common/inhibit","^6","markdown/common.cljc","^:",14,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",157,"^34",["^L",["^3A","^2Q"]],"^9",157,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"~$heading-text",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",171,"^8",7,"^9",171,"^:",19,"^2T",["^10",["^2U",["^10",[["^2W"]]]]]],"^M","~$markdown.common/heading-text","^6","markdown/common.cljc","^:",19,"^30",["^10",[["^2W"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",171,"^34","^2Q","^9",171,"^35",1,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W"]]]]]],"~$*inhibit-separator*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",6,"^8",16,"^9",6,"^:",35,"^3<",true],"^M","~$markdown.common/*inhibit-separator*","^6","markdown/common.cljc","^:",35,"^8",1,"^3<",true,"^7",6,"^9",6,"^2P","^3:"],"~$bold",["^ ","^M","~$markdown.common/bold","^6","markdown/common.cljc","^7",147,"^8",1,"^9",147,"^:",10,"^5",["^ ","^6","markdown/common.cljc","^7",147,"^8",6,"^9",147,"^:",10],"^2P","^2Q"],"~$freeze-string",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",13,"^8",7,"^9",13,"^:",20,"^2T",["^10",["^2U",["^10",[["~$&","~$args"]]]]],"^3C","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.","~:top-fn",["^ ","^33",true,"~:fixed-arity",0,"^35",0,"^30",[["^10",["^3P"]]],"^2T",["^10",[["~$&","^3P"]]],"^32",["^10",[null]]]],"^M","~$markdown.common/freeze-string","^6","markdown/common.cljc","^:",20,"^3Q",["^ ","^33",true,"^3R",0,"^35",0,"^30",[["^10",["^3P"]]],"^2T",["^10",[["~$&","^3P"]]],"^32",["^10",[null]]],"^30",[["^10",["^3P"]]],"^31",null,"^3R",0,"^32",["^10",[null]],"^8",1,"^33",true,"~:methods",[["^ ","^3R",0,"^33",true,"^2P","^3A"]],"^7",13,"^34","^2Q","^9",13,"^35",0,"^36",true,"^2T",["^10",[["~$&","^3P"]]],"^3C","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."],"~$thaw-string",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",24,"^8",7,"^9",24,"^:",18,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]],"^3C","Recursively replaces the frozen strings in the output with the original text."],"^M","~$markdown.common/thaw-string","^6","markdown/common.cljc","^:",18,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",24,"^34","^3A","^9",24,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]],"^3C","Recursively replaces the frozen strings in the output with the original text."],"~$make-separator",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",89,"^8",7,"^9",89,"^:",21,"^2T",["^10",["^2U",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","~$transformer"]]]]],"^3C","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.","^3Q",["^ ","^33",false,"^3R",4,"^35",4,"^30",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^2T",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^32",["^10",[null,null]]]],"^M","~$markdown.common/make-separator","^6","markdown/common.cljc","^:",21,"^3Q",["^ ","^33",false,"^3R",4,"^35",4,"^30",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^2T",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^32",["^10",[null,null]]],"^30",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^31",null,"^3R",4,"^32",["^10",[null,null]],"^8",1,"^33",false,"^3T",[["^ ","^3R",3,"^33",false,"^2P","^2Q"],["^ ","^3R",4,"^33",false,"^2P","~$function"]],"^7",89,"^9",89,"^35",4,"^36",true,"^2T",["^10",[["^2R","^2X","^2Y"],["^2R","^2X","^2Y","^3X"]]],"^3C","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk."],"~$escape-code",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",43,"^8",7,"^9",43,"^:",18,"^2T",["^10",["^2U",["^10",[["~$s"]]]]]],"^M","~$markdown.common/escape-code","^6","markdown/common.cljc","^:",18,"^30",["^10",[["~$s"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",43,"^34","^2Q","^9",43,"^35",1,"^36",true,"^2T",["^10",["^2U",["^10",[["~$s"]]]]]],"~$gen-token",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",10,"^8",7,"^9",10,"^:",16,"^2T",["^10",["^2U",["^10",[["~$n"]]]]]],"^M","~$markdown.common/gen-token","^6","markdown/common.cljc","^:",16,"^30",["^10",[["~$n"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",10,"^34","^T","^9",10,"^35",1,"^36",true,"^2T",["^10",["^2U",["^10",[["~$n"]]]]]],"~$strong",["^ ","^M","~$markdown.common/strong","^6","markdown/common.cljc","^7",143,"^8",1,"^9",143,"^:",12,"^5",["^ ","^6","markdown/common.cljc","^7",143,"^8",6,"^9",143,"^:",12],"^2P","^2Q"],"~$escape-code-transformer",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",134,"^8",7,"^9",134,"^:",30,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"^M","~$markdown.common/escape-code-transformer","^6","markdown/common.cljc","^:",30,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",134,"^34","^3A","^9",134,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"~$em",["^ ","^M","~$markdown.common/em","^6","markdown/common.cljc","^7",149,"^8",1,"^9",149,"^:",8,"^5",["^ ","^6","markdown/common.cljc","^7",149,"^8",6,"^9",149,"^:",8],"^2P","^2Q"],"~$heading-level",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",176,"^8",7,"^9",176,"^:",20,"^2T",["^10",["^2U",["^10",[["^2W"]]]]]],"^M","~$markdown.common/heading-level","^6","markdown/common.cljc","^:",20,"^30",["^10",[["^2W"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",176,"^34",["^L",["~$number","^3:"]],"^9",176,"^35",1,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W"]]]]]],"~$escaped-chars",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",59,"^8",7,"^9",59,"^:",20,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"^M","~$markdown.common/escaped-chars","^6","markdown/common.cljc","^:",20,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",59,"^34","^3A","^9",59,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"~$open-html-tags",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",80,"^8",7,"^9",80,"^:",21,"^2T",["^10",["^2U",["^10",[["~$open?","~$token-seq"]]]]]],"^M","~$markdown.common/open-html-tags","^6","markdown/common.cljc","^:",21,"^30",["^10",[["^4?","^4@"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",80,"^34","~$boolean","^9",80,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^4?","^4@"]]]]]],"~$inline-code",["^ ","^M","~$markdown.common/inline-code","^6","markdown/common.cljc","^7",155,"^8",1,"^9",155,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",155,"^8",6,"^9",155,"^:",17],"^2P","^3Z"],"~$strikethrough",["^ ","^M","~$markdown.common/strikethrough","^6","markdown/common.cljc","^7",153,"^8",1,"^9",153,"^:",19,"^5",["^ ","^6","markdown/common.cljc","^7",153,"^8",6,"^9",153,"^:",19],"^2P","^2Q"],"~$bold-italic",["^ ","^M","~$markdown.common/bold-italic","^6","markdown/common.cljc","^7",145,"^8",1,"^9",145,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",145,"^8",6,"^9",145,"^:",17],"^2P","^2Q"],"~$escape-inhibit-separator",["^ ","^2S",null,"^5",["^ ","^6","markdown/common.cljc","^7",163,"^8",7,"^9",163,"^:",31,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]],"^M","~$markdown.common/escape-inhibit-separator","^6","markdown/common.cljc","^:",31,"^30",["^10",[["^2W","^2Z"]]],"^31",null,"^32",["^10",[null,null]],"^8",1,"^33",false,"^7",163,"^34","^3A","^9",163,"^35",2,"^36",true,"^2T",["^10",["^2U",["^10",[["^2W","^2Z"]]]]]]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^L",["~:open","~:codeblock","~:closed","~:default","~:frozen-strings","~:found-token","~:in-tag?","~:code"]],"~:order",["^4P","^4S","^4M","^4L","^4N","^4Q","^4R","^4O"]],"^13",["^ ","^X",["^L",[]]],"^14",["^ "],"^15",["^V","^U","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1C",[["^4W","~:static-fns"],true,["^4W","~:elide-asserts"],false,["^4W","~:optimize-constants"],null,["^4W","^1:"],null,["^4W","~:external-config"],null,["^4W","~:tooling-config"],null,["^4W","~:emit-constants"],null,["^4W","~:load-tests"],null,["^4W","~:form-size-threshold"],null,["^4W","~:infer-externs"],true,["^4W","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4W","~:fn-invoke-direct"],null,["^4W","~:source-map"],"/dev/null"]]]