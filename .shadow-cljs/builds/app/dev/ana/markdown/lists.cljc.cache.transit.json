["^ ","~:output",["^ ","~:js","goog.provide('markdown.lists');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\ngoog.require('markdown.common');\r\nmarkdown.lists.close_lists = (function markdown$lists$close_lists(lists){\r\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1((function (){var iter__4523__auto__ = (function markdown$lists$close_lists_$_iter__32627(s__32628){\r\nreturn (new cljs.core.LazySeq(null,(function (){\r\nvar s__32628__$1 = s__32628;\r\nwhile(true){\r\nvar temp__5720__auto__ = cljs.core.seq(s__32628__$1);\r\nif(temp__5720__auto__){\r\nvar s__32628__$2 = temp__5720__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(s__32628__$2)){\r\nvar c__4521__auto__ = cljs.core.chunk_first(s__32628__$2);\r\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\r\nvar b__32630 = cljs.core.chunk_buffer(size__4522__auto__);\r\nif((function (){var i__32629 = (0);\r\nwhile(true){\r\nif((i__32629 < size__4522__auto__)){\r\nvar vec__32641 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__32629);\r\nvar list_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32641,(0),null);\r\ncljs.core.chunk_append(b__32630,[\"</li></\",cljs.core.name(list_type),\">\"].join(''));\r\n\r\nvar G__32802 = (i__32629 + (1));\r\ni__32629 = G__32802;\r\ncontinue;\r\n} else {\r\nreturn true;\r\n}\r\nbreak;\r\n}\r\n})()){\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__32630),markdown$lists$close_lists_$_iter__32627(cljs.core.chunk_rest(s__32628__$2)));\r\n} else {\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__32630),null);\r\n}\r\n} else {\r\nvar vec__32649 = cljs.core.first(s__32628__$2);\r\nvar list_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32649,(0),null);\r\nreturn cljs.core.cons([\"</li></\",cljs.core.name(list_type),\">\"].join(''),markdown$lists$close_lists_$_iter__32627(cljs.core.rest(s__32628__$2)));\r\n}\r\n} else {\r\nreturn null;\r\n}\r\nbreak;\r\n}\r\n}),null,null));\r\n});\r\nreturn iter__4523__auto__(lists);\r\n})());\r\n});\r\nmarkdown.lists.add_row = (function markdown$lists$add_row(row_type,list_type,num_indents,indents,content,state){\r\nif(cljs.core.truth_(list_type)){\r\nif((num_indents < indents)){\r\nvar lists_to_close = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__32654_SHARP_){\r\nreturn (cljs.core.second(p1__32654_SHARP_) > num_indents);\r\n}),cljs.core.reverse(new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684).cljs$core$IFn$_invoke$arity$1(state)));\r\nvar remaining_lists = cljs.core.vec(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(cljs.core.count(lists_to_close),new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684).cljs$core$IFn$_invoke$arity$1(state)));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,markdown.lists.close_lists(lists_to_close),\"</li><li>\",content),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684),(((num_indents > cljs.core.second(cljs.core.last(remaining_lists))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(remaining_lists,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type,num_indents], null)):remaining_lists))], null);\r\n} else {\r\nif((num_indents > indents)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<\",cljs.core.name(row_type),\"><li>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(content)].join(''),cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684)], null),cljs.core.conj,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type,num_indents], null))], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(num_indents,indents)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</li><li>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(content)].join(''),state], null);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<\",cljs.core.name(row_type),\"><li>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(content)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type,num_indents], null)], null))], null);\r\n}\r\n});\r\nmarkdown.lists.ul = (function markdown$lists$ul(text,state){\r\nvar vec__32685 = cljs.core.last(new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684).cljs$core$IFn$_invoke$arity$1(state));\r\nvar list_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32685,(0),null);\r\nvar indents = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32685,(1),null);\r\nvar num_indents = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\r\nvar content = clojure.string.trim((function (){var G__32689 = text;\r\nvar G__32690 = (num_indents + (1));\r\nreturn (markdown.common._STAR_substring_STAR_.cljs$core$IFn$_invoke$arity$2 ? markdown.common._STAR_substring_STAR_.cljs$core$IFn$_invoke$arity$2(G__32689,G__32690) : markdown.common._STAR_substring_STAR_.call(null,G__32689,G__32690));\r\n})());\r\nreturn markdown.lists.add_row(new cljs.core.Keyword(null,\"ul\",\"ul\",-1349521403),list_type,num_indents,indents,(function (){var or__4131__auto__ = markdown.common.make_heading(content,false);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn content;\r\n}\r\n})(),state);\r\n});\r\nmarkdown.lists.ol = (function markdown$lists$ol(text,state){\r\nvar vec__32710 = cljs.core.last(new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684).cljs$core$IFn$_invoke$arity$1(state));\r\nvar list_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32710,(0),null);\r\nvar indents = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32710,(1),null);\r\nvar num_indents = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\r\nvar content = clojure.string.trim(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),clojure.string.trim(text))));\r\nreturn markdown.lists.add_row(new cljs.core.Keyword(null,\"ol\",\"ol\",932524051),list_type,num_indents,indents,(function (){var or__4131__auto__ = markdown.common.make_heading(content,false);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn content;\r\n}\r\n})(),state);\r\n});\r\nmarkdown.lists.li = (function markdown$lists$li(text,p__32734){\r\nvar map__32735 = p__32734;\r\nvar map__32735__$1 = (((((!((map__32735 == null))))?(((((map__32735.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32735.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32735):map__32735);\r\nvar state = map__32735__$1;\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32735__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar last_line_empty_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32735__$1,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527));\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32735__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32735__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = last_line_empty_QMARK_;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn clojure.string.blank_QMARK_(text);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.lists.close_lists(cljs.core.reverse(lists))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684)),new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false)], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = lists;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn codeblock;\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(eof);\r\nif(and__4120__auto__){\r\nvar and__4120__auto____$1 = lists;\r\nif(cljs.core.truth_(and__4120__auto____$1)){\r\nreturn clojure.string.blank_QMARK_(text);\r\n} else {\r\nreturn and__4120__auto____$1;\r\n}\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237),false], 0))], null);\r\n} else {\r\nvar indents = (cljs.core.truth_(last_line_empty_QMARK_)?(0):cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text)));\r\nvar trimmed = clojure.string.trim(text);\r\nvar in_list_QMARK_ = new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(cljs.core.re_find(/^[\\*\\+-] /,trimmed))){\r\nreturn markdown.lists.ul((cljs.core.truth_(in_list_QMARK_)?text:trimmed),state);\r\n} else {\r\nif(cljs.core.truth_(cljs.core.re_find(/^[0-9]+\\. /,trimmed))){\r\nreturn markdown.lists.ol((cljs.core.truth_(in_list_QMARK_)?text:trimmed),state);\r\n} else {\r\nif((indents > (0))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = eof;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn last_line_empty_QMARK_;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn cljs.core.not_empty(lists);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.lists.close_lists(cljs.core.reverse(lists)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684),cljs.core.PersistentVector.EMPTY,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"buf\",\"buf\",-213913340),text], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n\r\n}\r\n}\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/lists.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.lists","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^S","~$string","^S","~$markdown.common","^U","~$cljs.core","^V","~$goog","^W"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$*substring*","^U","~$make-heading","^U"],"~:require-macros",["^ ","^V","^V"],"~:form",["~#list",["~$ns","^N",["^13",["^Y",["^S","~:as","^T"],["^U","~:refer",["^[","^10"]]]]]],"~:flags",["^ ","^Y",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^S","^U"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","markdown/lists.cljc"],"~:compiled-at",1574163718542,"~:resource-name","markdown/lists.cljc","~:warnings",[],"~:source","(ns markdown.lists\n  (:require [clojure.string :as string]\n            [markdown.common :refer [*substring* make-heading]]))\n\n(defn close-lists [lists]\n  (string/join\n    (for [[list-type] lists]\n      (str \"</li></\" (name list-type) \">\"))))\n\n(defn add-row [row-type list-type num-indents indents content state]\n  (if list-type\n    (cond\n      (< num-indents indents)\n      (let [lists-to-close  (take-while #(> (second %) num-indents) (reverse (:lists state)))\n            remaining-lists (vec (drop-last (count lists-to-close) (:lists state)))]\n\n        [(apply str (close-lists lists-to-close) \"</li><li>\" content)\n         (assoc state :lists (if (> num-indents (second (last remaining-lists)))\n                               (conj remaining-lists [row-type num-indents])\n                               remaining-lists))])\n\n      (> num-indents indents)\n      [(str \"<\" (name row-type) \"><li>\" content)\n       (update-in state [:lists] conj [row-type num-indents])]\n\n      (= num-indents indents)\n      [(str \"</li><li>\" content) state])\n\n    [(str \"<\" (name row-type) \"><li>\" content)\n     (assoc state :lists [[row-type num-indents]])]))\n\n(defn ul [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (*substring* text (inc num-indents)))]\n    (add-row :ul list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn ol [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (string/join (drop-while (partial not= \\space) (string/trim text))))]\n    (add-row :ol list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn li [text {:keys [codeblock last-line-empty? eof lists] :as state}]\n  (cond\n\n    (and last-line-empty? (string/blank? text))\n    [(str (close-lists (reverse lists)) text)\n     (-> state (dissoc :lists) (assoc :last-line-empty? false))]\n\n    (and lists codeblock)\n    [text state]\n\n    (and (not eof)\n         lists\n         (string/blank? text))\n    [text (assoc state :last-line-empty? false :eof false)]\n\n    :else\n    (let [indents  (if last-line-empty? 0 (count (take-while (partial = \\space) text)))\n          trimmed  (string/trim text)\n          in-list? (:lists state)]\n      (cond\n        (re-find #\"^[\\*\\+-] \" trimmed)\n        (ul (if in-list? text trimmed) state)\n\n        (re-find #\"^[0-9]+\\. \" trimmed)\n        (ol (if in-list? text trimmed) state)\n\n        (pos? indents)\n        [text state]\n\n        (and (or eof last-line-empty?)\n             (not-empty lists))\n        [(close-lists (reverse lists))\n         (assoc state :lists [] :buf text)]\n\n        :else\n        [text state]))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.lists/close-lists","lists","clojure.string.join.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__32628","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__32630","cljs.core/chunk-buffer","i__32629","vec__32641","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32627","cljs.core/chunk-rest","vec__32649","cljs.core/first","cljs.core/cons","cljs.core/rest","list-type","cljs.core/name","markdown.lists/add-row","row-type","num-indents","indents","content","state","lists-to-close","p1__32654#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core/reverse","remaining-lists","cljs.core/vec","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/str","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/last","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","markdown.lists/ul","text","vec__32685","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","clojure.string/trim","G__32689","G__32690","markdown.common/*substring*","or__4131__auto__","markdown.common/make-heading","markdown.lists/ol","vec__32710","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","p__32734","map__32735","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markdown.lists/li","codeblock","last-line-empty?","eof","and__4120__auto__","clojure.string/blank?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","trimmed","in-list?","cljs.core/re-find","cljs.core/not-empty","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^1;","goog/math/math.js"],[1567356087625,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^W","~$goog.array","~$goog.asserts"]]],["^1;","goog/array/array.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1M"]]],["^1;","goog/debug/error.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/dom/nodetype.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","markdown/common.cljc"],[1567356142405,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^V","^S"]]],["^1;","goog/object/object.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1;","goog/math/long.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1M","~$goog.reflect"]]],["^1;","goog/functions/functions.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/structs/map.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^1;","goog/asserts/asserts.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"]]],["^1;","goog/uri/uri.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1L","^1M","^1U","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1;","goog/base.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",[]]],["^1;","goog/structs/structs.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1L","^1R"]]],["^1;","markdown/lists.cljc"],[1567356142405,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^V","^S","^U"]]],["^1;","clojure/string.cljs"],[1567262080081,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^V","^1U","~$goog.string.StringBuffer"]]],["^1;","goog/string/string.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/reflect/reflect.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/string/stringbuffer.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/iter/iter.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1L","^1M","~$goog.functions","~$goog.math"]]],["^1;","cljs/core.cljs"],[1567262080081,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["~$goog.math.Long","~$goog.math.Integer","^1U","^1R","^1L","~$goog.Uri","^1["]]],["^1;","goog/math/integer.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W"]]],["^1;","goog/uri/utils.js"],[1567356087625,"^1H",["^ ","^1I",null,"^1J",["^L",[]],"^1K",["^W","^1L","^1M","^1U"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/lists.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V","^W","^W"],"^X",["^L",["^Y"]],"^Z",["^ ","^[","^U","^10","^U"],"~:defs",["^ ","~$close-lists",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/lists.cljc","^7",5,"^8",7,"^9",5,"^:",18,"~:arglists",["^13",["~$quote",["^13",[["~$lists"]]]]]],"^M","~$markdown.lists/close-lists","^6","markdown/lists.cljc","^:",18,"~:method-params",["^13",[["^2U"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^8",1,"~:variadic?",false,"^7",5,"~:ret-tag","~$any","^9",5,"~:max-fixed-arity",1,"~:fn-var",true,"^2S",["^13",["^2T",["^13",[["^2U"]]]]]],"~$add-row",["^ ","^2R",null,"^5",["^ ","^6","markdown/lists.cljc","^7",10,"^8",7,"^9",10,"^:",14,"^2S",["^13",["^2T",["^13",[["~$row-type","~$list-type","~$num-indents","~$indents","~$content","~$state"]]]]]],"^M","~$markdown.lists/add-row","^6","markdown/lists.cljc","^:",14,"^2W",["^13",[["^34","^35","^36","^37","^38","^39"]]],"^2X",null,"^2Y",["^13",[null,null]],"^8",1,"^2Z",false,"^7",10,"^2[",["^L",["~$cljs.core/IVector","~$clj-nil"]],"^9",10,"^31",6,"^32",true,"^2S",["^13",["^2T",["^13",[["^34","^35","^36","^37","^38","^39"]]]]]],"~$ul",["^ ","^2R",null,"^5",["^ ","^6","markdown/lists.cljc","^7",32,"^8",7,"^9",32,"^:",9,"^2S",["^13",["^2T",["^13",[["~$text","^39"]]]]]],"^M","~$markdown.lists/ul","^6","markdown/lists.cljc","^:",9,"^2W",["^13",[["^3>","^39"]]],"^2X",null,"^2Y",["^13",[null,null]],"^8",1,"^2Z",false,"^7",32,"^2[",["^L",["^3;","^3<"]],"^9",32,"^31",2,"^32",true,"^2S",["^13",["^2T",["^13",[["^3>","^39"]]]]]],"~$ol",["^ ","^2R",null,"^5",["^ ","^6","markdown/lists.cljc","^7",38,"^8",7,"^9",38,"^:",9,"^2S",["^13",["^2T",["^13",[["^3>","^39"]]]]]],"^M","~$markdown.lists/ol","^6","markdown/lists.cljc","^:",9,"^2W",["^13",[["^3>","^39"]]],"^2X",null,"^2Y",["^13",[null,null]],"^8",1,"^2Z",false,"^7",38,"^2[",["^L",["^3;","^3<"]],"^9",38,"^31",2,"^32",true,"^2S",["^13",["^2T",["^13",[["^3>","^39"]]]]]],"~$li",["^ ","^2R",null,"^5",["^ ","^6","markdown/lists.cljc","^7",44,"^8",7,"^9",44,"^:",9,"^2S",["^13",["^2T",["^13",[["^3>",["^ ","~:keys",["~$codeblock","~$last-line-empty?","~$eof","^2U"],"^15","^39"]]]]]]],"^M","~$markdown.lists/li","^6","markdown/lists.cljc","^:",9,"^2W",["^13",[["^3>","~$p__32734"]]],"^2X",null,"^2Y",["^13",[null,null]],"^8",1,"^2Z",false,"^7",44,"^2[",["^L",["^3;","^3<"]],"^9",44,"^31",2,"^32",true,"^2S",["^13",["^2T",["^13",[["^3>",["^ ","^3C",["^3D","^3E","^3F","^2U"],"^15","^39"]]]]]]]],"^11",["^ ","^V","^V"],"~:cljs.analyzer/constants",["^ ","^X",["^L",["~:codeblock","~:lists","~:buf","~:ul","~:else","~:last-line-empty?","~:ol","~:eof"]],"~:order",["^3K","^3M","^3P","^3J","^3O","^3Q","^3N","^3L"]],"^17",["^ ","^Y",["^L",[]]],"^18",["^ "],"^19",["^W","^V","^S","^U"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1G",[["^3U","~:static-fns"],true,["^3U","~:elide-asserts"],false,["^3U","~:optimize-constants"],null,["^3U","^1>"],null,["^3U","~:external-config"],null,["^3U","~:tooling-config"],null,["^3U","~:emit-constants"],null,["^3U","~:load-tests"],null,["^3U","~:form-size-threshold"],null,["^3U","~:infer-externs"],true,["^3U","^1@"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3U","~:fn-invoke-direct"],null,["^3U","~:source-map"],"/dev/null"]]]