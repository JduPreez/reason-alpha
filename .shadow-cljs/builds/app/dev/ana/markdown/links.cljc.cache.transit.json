["^ ","~:output",["^ ","~:js","goog.provide('markdown.links');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\ngoog.require('markdown.common');\r\nmarkdown.links.href = (function markdown$links$href(text,link,state){\r\nvar vec__32633 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),link);\r\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32633,(0),null);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32633,(1),null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<a href='\"),link__$1,cljs.core.seq(\"'\"),(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title)),\">\")):cljs.core.seq(\">\")),text,cljs.core.seq(\"</a>\"),state], 0));\r\n});\r\nmarkdown.links.img = (function markdown$links$img(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___32833 = arguments.length;\r\nvar i__4731__auto___32834 = (0);\r\nwhile(true){\r\nif((i__4731__auto___32834 < len__4730__auto___32833)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___32834]));\r\n\r\nvar G__32835 = (i__4731__auto___32834 + (1));\r\ni__4731__auto___32834 = G__32835;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\r\nreturn markdown.links.img.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\r\n});\r\n\r\nmarkdown.links.img.cljs$core$IFn$_invoke$arity$variadic = (function (alt,url,state,p__32656){\r\nvar vec__32657 = p__32656;\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32657,(0),null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<img src=\\\"\"),url,cljs.core.seq(\"\\\" alt=\\\"\"),alt,(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\" />\")):cljs.core.seq(\"\\\" />\")),state], 0));\r\n});\r\n\r\nmarkdown.links.img.cljs$lang$maxFixedArity = (3);\r\n\r\n/** @this {Function} */\r\nmarkdown.links.img.cljs$lang$applyTo = (function (seq32645){\r\nvar G__32646 = cljs.core.first(seq32645);\r\nvar seq32645__$1 = cljs.core.next(seq32645);\r\nvar G__32647 = cljs.core.first(seq32645__$1);\r\nvar seq32645__$2 = cljs.core.next(seq32645__$1);\r\nvar G__32648 = cljs.core.first(seq32645__$2);\r\nvar seq32645__$3 = cljs.core.next(seq32645__$2);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32646,G__32647,G__32648,seq32645__$3);\r\n});\r\n\r\nmarkdown.links.handle_img_link = (function markdown$links$handle_img_link(xs,state){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"[\",\"!\",\"[\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),xs))){\r\nvar xs__$1 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),xs);\r\nvar vec__32668 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32668,(0),null);\r\nvar xy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32668,(1),null);\r\nvar vec__32672 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),xy));\r\nvar url_title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32672,(0),null);\r\nvar zy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32672,(1),null);\r\nvar vec__32675 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),url_title);\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32675,(0),null);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32675,(1),null);\r\nvar vec__32678 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,state,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.not_empty(title)], 0));\r\nvar new_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32678,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32678,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(\"[\",new_text,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(zy)], 0)),new_state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs,state], null);\r\n}\r\n});\r\nmarkdown.links.process_link_title = (function markdown$links$process_link_title(title,state){\r\nreturn cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__32698_SHARP_,p2__32697_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(p2__32697_SHARP_,p1__32698_SHARP_);\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title,state], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.italics,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough], null)));\r\n});\r\nmarkdown.links.make_link = (function markdown$links$make_link(img_QMARK_){\r\nreturn (function markdown$links$make_link_$_link(text,p__32728){\r\nvar map__32730 = p__32728;\r\nvar map__32730__$1 = (((((!((map__32730 == null))))?(((((map__32730.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32730.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32730):map__32730);\r\nvar state = map__32730__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32730__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32730__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar out = cljs.core.PersistentVector.EMPTY;\r\nvar tokens = cljs.core.seq(text);\r\nvar loop_state = state;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(tokens)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(out),loop_state], null);\r\n} else {\r\nvar vec__32767 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"[\"),tokens);\r\nvar head = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32767,(0),null);\r\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32767,(1),null);\r\nvar vec__32770 = markdown.links.handle_img_link(xs,loop_state);\r\nvar xs__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32770,(0),null);\r\nvar loop_state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32770,(1),null);\r\nvar vec__32773 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32773,(0),null);\r\nvar ys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32773,(1),null);\r\nvar vec__32776 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"(\"),ys);\r\nvar dud = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32776,(0),null);\r\nvar zs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32776,(1),null);\r\nvar vec__32779 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),zs);\r\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32779,(0),null);\r\nvar tail = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32779,(1),null);\r\nif((((cljs.core.count(tail) < (1))) || ((cljs.core.count(link__$1) < (2))) || ((cljs.core.count(dud) > (1))))){\r\nvar G__32839 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title], 0));\r\nvar G__32840 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(dud,link__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tail], 0));\r\nvar G__32841 = loop_state__$1;\r\nout = G__32839;\r\ntokens = G__32840;\r\nloop_state = G__32841;\r\ncontinue;\r\n} else {\r\nif(((cljs.core.not(img_QMARK_)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\")))){\r\nvar vec__32782 = markdown.links.href(cljs.core.rest(markdown.links.process_link_title(title,state)),cljs.core.rest(link__$1),loop_state__$1);\r\nvar link_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32782,(0),null);\r\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32782,(1),null);\r\nvar G__32842 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([link_text], 0));\r\nvar G__32843 = cljs.core.rest(tail);\r\nvar G__32844 = new_loop_state;\r\nout = G__32842;\r\ntokens = G__32843;\r\nloop_state = G__32844;\r\ncontinue;\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = img_QMARK_;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\");\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nvar alt = cljs.core.rest(title);\r\nvar vec__32785 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),cljs.core.rest(link__$1));\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32785,(0),null);\r\nvar title__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32785,(1),null);\r\nvar title__$2 = markdown.links.process_link_title(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title__$1)),loop_state__$1);\r\nvar vec__32788 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,loop_state__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title__$2], 0));\r\nvar img_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32788,(0),null);\r\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32788,(1),null);\r\nvar G__32848 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.butlast(head),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([img_text], 0));\r\nvar G__32849 = cljs.core.rest(tail);\r\nvar G__32850 = new_loop_state;\r\nout = G__32848;\r\ntokens = G__32849;\r\nloop_state = G__32850;\r\ncontinue;\r\n} else {\r\nvar G__32851 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title,dud,link__$1], 0));\r\nvar G__32852 = tail;\r\nvar G__32853 = loop_state__$1;\r\nout = G__32851;\r\ntokens = G__32852;\r\nloop_state = G__32853;\r\ncontinue;\r\n\r\n}\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n});\r\nmarkdown.links.link = markdown.links.make_link(false);\r\nmarkdown.links.image = markdown.links.make_link(true);\r\nmarkdown.links.reference = (function markdown$links$reference(text){\r\nreturn cljs.core.re_find(/^\\[[a-zA-Z0-9 \\-_\\.]+\\]:/,text);\r\n});\r\nmarkdown.links.parse_reference = (function markdown$links$parse_reference(reference,start){\r\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$3(clojure.string.trim(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(reference,start)),/\\s+/,(2));\r\n});\r\nmarkdown.links.parse_reference_link = (function markdown$links$parse_reference_link(line,references){\r\nvar trimmed = clojure.string.trim(line);\r\nvar temp__5720__auto__ = markdown.links.reference(trimmed);\r\nif(cljs.core.truth_(temp__5720__auto__)){\r\nvar link = temp__5720__auto__;\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(references,cljs.core.assoc,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1))),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.links.replace_reference_link = (function markdown$links$replace_reference_link(references,reference){\r\nvar vec__32791 = clojure.string.split.cljs$core$IFn$_invoke$arity$3(reference,/\\]\\s*/,(2));\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32791,(0),null);\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32791,(1),null);\r\nvar vec__32794 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,id);\r\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32794,(0),null);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32794,(1),null);\r\nreturn [\"<a href='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(link),\"'\",(cljs.core.truth_(alt)?[\" title='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(alt,(1),(cljs.core.count(alt) - (1)))),\"'\"].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(title,(1))),\"</a>\"].join('');\r\n});\r\nmarkdown.links.encode_links = (function markdown$links$encode_links(links,i){\r\nreturn cljs.core.second(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__32797,link){\r\nvar vec__32798 = p__32797;\r\nvar i__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32798,(0),null);\r\nvar encoded = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32798,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(i__$1 + (1)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(encoded,markdown.common.gen_token(i__$1),link)], null);\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i,cljs.core.PersistentArrayMap.EMPTY], null),links));\r\n});\r\nmarkdown.links.parse_links = (function markdown$links$parse_links(references,links){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__32801){\r\nvar vec__32803 = p__32801;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32803,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32803,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,markdown.links.replace_reference_link(references,v)], null);\r\n}),links));\r\n});\r\nmarkdown.links.freeze_links = (function markdown$links$freeze_links(references,text,state){\r\nvar links = cljs.core.re_seq(/\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]/,text);\r\nvar encoded_links = markdown.links.encode_links(links,(function (){var G__32807 = new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state);\r\nvar fexpr__32806 = cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.count,cljs.core.PersistentVector.EMPTY);\r\nreturn (fexpr__32806.cljs$core$IFn$_invoke$arity$1 ? fexpr__32806.cljs$core$IFn$_invoke$arity$1(G__32807) : fexpr__32806.call(null,G__32807));\r\n})());\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (links,encoded_links){\r\nreturn (function (s,p__32808){\r\nvar vec__32809 = p__32808;\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32809,(0),null);\r\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32809,(1),null);\r\nreturn clojure.string.replace(s,link,id);\r\n});})(links,encoded_links))\r\n,text,encoded_links),cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),cljs.core.merge,markdown.links.parse_links(references,encoded_links))], null);\r\n});\r\nmarkdown.links.reference_link = (function markdown$links$reference_link(text,p__32812){\r\nvar map__32813 = p__32812;\r\nvar map__32813__$1 = (((((!((map__32813 == null))))?(((((map__32813.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32813.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32813):map__32813);\r\nvar state = map__32813__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32813__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32813__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32813__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = (references == null);\r\nif(or__4131__auto__){\r\nreturn or__4131__auto__;\r\n} else {\r\nvar or__4131__auto____$1 = code;\r\nif(cljs.core.truth_(or__4131__auto____$1)){\r\nreturn or__4131__auto____$1;\r\n} else {\r\nreturn codeblock;\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.links.reference(clojure.string.trim(text)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\r\n} else {\r\nreturn markdown.links.freeze_links(references,text,state);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.links.implicit_reference_link = (function markdown$links$implicit_reference_link(text,state){\r\nvar replacement_text = clojure.string.replace(text,/\\[([^\\]]+)\\]\\[\\]/,\"[$1][$1]\");\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [replacement_text,state], null);\r\n});\r\nmarkdown.links.footnote = (function markdown$links$footnote(text){\r\nreturn cljs.core.re_find(/^\\[\\^[a-zA-Z0-9_-]+\\]:/,text);\r\n});\r\nmarkdown.links.parse_footnote_link = (function markdown$links$parse_footnote_link(line,footnotes){\r\nvar trimmed = clojure.string.trim(line);\r\nvar temp__5720__auto__ = markdown.links.footnote(trimmed);\r\nif(cljs.core.truth_(temp__5720__auto__)){\r\nvar link = temp__5720__auto__;\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(footnotes,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1)))], null),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.links.replace_footnote_link = (function markdown$links$replace_footnote_link(footnotes,footnote){\r\nvar next_fn_id = new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636).cljs$core$IFn$_invoke$arity$1(footnotes);\r\nvar link = [\"#fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id)].join('');\r\nreturn [\"<a href='\",link,\"' id='fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"'><sup>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"</sup></a>\"].join('');\r\n});\r\nmarkdown.links.replace_all_footnote_links = (function markdown$links$replace_all_footnote_links(text,p__32815){\r\nwhile(true){\r\nvar map__32816 = p__32815;\r\nvar map__32816__$1 = (((((!((map__32816 == null))))?(((((map__32816.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32816.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32816):map__32816);\r\nvar state = map__32816__$1;\r\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32816__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\r\nvar matcher = /\\[\\^[a-zA-Z0-9_-]+\\]/;\r\nvar match = cljs.core.re_find(matcher,text);\r\nif((match == null)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar next_text = clojure.string.replace_first(text,matcher,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(markdown.links.replace_footnote_link,footnotes));\r\nvar next_state = cljs.core.assoc_in(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null),cljs.core.inc),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null))], null),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),match], null)));\r\nvar G__32870 = next_text;\r\nvar G__32871 = next_state;\r\ntext = G__32870;\r\np__32815 = G__32871;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\nmarkdown.links.footnote_link = (function markdown$links$footnote_link(text,p__32818){\r\nvar map__32819 = p__32818;\r\nvar map__32819__$1 = (((((!((map__32819 == null))))?(((((map__32819.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32819.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32819):map__32819);\r\nvar state = map__32819__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32819__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32819__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32819__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = (new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972).cljs$core$IFn$_invoke$arity$1(footnotes) == null);\r\nif(or__4131__auto__){\r\nreturn or__4131__auto__;\r\n} else {\r\nvar or__4131__auto____$1 = code;\r\nif(cljs.core.truth_(or__4131__auto____$1)){\r\nreturn or__4131__auto____$1;\r\n} else {\r\nreturn codeblock;\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.links.footnote(clojure.string.trim(text)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\r\n} else {\r\nvar vec__32821 = markdown.links.replace_all_footnote_links(text,state);\r\nvar text__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32821,(0),null);\r\nvar state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32821,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1,state__$1], null);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.links.make_image_reference = (function markdown$links$make_image_reference(src,alt,title){\r\nvar title_text = (cljs.core.truth_(title)?[\"\\\" title=\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(title)),\"\"].join(''):\"\\\"\");\r\nreturn [\"<img src=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(src),\"\\\" alt=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(alt),title_text,\" />\"].join('');\r\n});\r\nmarkdown.links.image_reference_link = (function markdown$links$image_reference_link(text,p__32824){\r\nvar map__32825 = p__32824;\r\nvar map__32825__$1 = (((((!((map__32825 == null))))?(((((map__32825.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32825.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32825):map__32825);\r\nvar state = map__32825__$1;\r\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32825__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\r\nif(((cljs.core.not(new cljs.core.Keyword(null,\"reference-links?\",\"reference-links?\",-2003778981).cljs$core$IFn$_invoke$arity$1(state))) || (cljs.core.empty_QMARK_(references)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar matcher = /!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])/;\r\nvar matches = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.re_seq(matcher,text));\r\nvar ms = matches;\r\nvar new_text = text;\r\nwhile(true){\r\nif(cljs.core.seq(ms)){\r\nvar vec__32830 = cljs.core.first(ms);\r\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32830,(0),null);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32830,(1),null);\r\nvar ref = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32830,(2),null);\r\nvar refval = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,ref);\r\nvar im = markdown.links.make_image_reference(cljs.core.first(refval),alt,cljs.core.second(refval));\r\nvar G__32877 = cljs.core.rest(ms);\r\nvar G__32878 = clojure.string.replace(new_text,m,im);\r\nms = G__32877;\r\nnew_text = G__32878;\r\ncontinue;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_text,state], null);\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/links.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.links","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^S","~$string","^S","~$markdown.common","^U","~$cljs.core","^V","~$goog","^W"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$freeze-string","^U","~$gen-token","^U","~$strong","^U","~$bold","^U","~$em","^U","~$italics","^U","~$strikethrough","^U"],"~:require-macros",["^ ","^V","^V"],"~:form",["~#list",["~$ns","^N",["^18",["^Y",["^S","~:as","^T"],["^U","~:refer",["^[","^10","^11","^12","^13","^14","^15"]]]]]],"~:flags",["^ ","^Y",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^S","^U"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","markdown/links.cljc"],"~:compiled-at",1574163718616,"~:resource-name","markdown/links.cljc","~:warnings",[],"~:source","(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (cond\n              ;; Skip invalid tags and continue\n              (or (< (count tail) 1) ;; nothing after closing parens, i.e. no link/image found\n                  (< (count link) 2) ;; empty link contents, e.g. [missing link]()\n                  (> (count dud) 1)) ;; content between ] and ( means not a link/image\n              (recur (concat out head title) (concat dud link tail) loop-state)\n              \n              ;; Process Link if needed\n              (and (not img?) (not= (last head) \\!))\n              (let [[link-text new-loop-state] (href\n                                                (rest (process-link-title title state))\n                                                (rest link) loop-state)]\n                (recur (concat out head link-text) (rest tail) new-loop-state))\n              \n              ;; Process Image if needed\n              (and img? (= (last head) \\!))\n              (let [alt (rest title)\n                    [url title] (split-with (partial not= \\space) (rest link))\n                    title (process-link-title (string/join (rest title)) loop-state)\n                    ;; Now process / generate the img data\n                    [img-text new-loop-state] (img alt url loop-state title)]\n                (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n              \n              ;; Otherwise skip link and continue\n              :else (recur (concat out head title dud link) tail loop-state))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.links/href","text","link","state","vec__32633","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","title","cljs.core/split-with","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/not-empty","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/rest","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.links/img","p__32656","vec__32657","seq32645","G__32646","cljs.core/first","cljs.core/next","G__32647","G__32648","self__4717__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","vec__32668","vec__32672","vec__32675","vec__32678","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","xy","url-title","zy","new-text","new-state","markdown.links.img.cljs$core$IFn$_invoke$arity$variadic","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","markdown.links/process-link-title","p1__32698#","p2__32697#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__32728","map__32730","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","code","codeblock","or__4131__auto__","out","tokens","loop-state","cljs.core/empty?","vec__32767","vec__32770","vec__32773","vec__32776","vec__32779","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/last","vec__32782","link-text","new-loop-state","and__4120__auto__","vec__32785","vec__32788","img-text","cljs.core/butlast","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$3","markdown.links/parse-reference-link","line","references","trimmed","temp__5720__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","markdown.links/replace-reference-link","vec__32791","vec__32794","id","markdown.links/encode-links","links","i","cljs.core/second","p__32797","vec__32798","encoded","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__32801","vec__32803","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","G__32807","fexpr__32806","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","p__32808","vec__32809","s","clojure.string/replace","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","p__32812","map__32813","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__32815","map__32816","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__32818","map__32819","markdown.links/footnote-link","vec__32821","markdown.links/make-image-reference","src","title-text","p__32824","map__32825","markdown.links/image-reference-link","matches","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","ms","vec__32830","m","ref","refval","im"]]],"~:cache-keys",["~#cmap",[["^1@","goog/math/math.js"],[1567356087625,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^W","~$goog.array","~$goog.asserts"]]],["^1@","goog/array/array.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1R"]]],["^1@","goog/debug/error.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","goog/dom/nodetype.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","markdown/common.cljc"],[1567356142405,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^V","^S"]]],["^1@","goog/object/object.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1@","goog/math/long.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1R","~$goog.reflect"]]],["^1@","goog/functions/functions.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","goog/structs/map.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^1@","goog/asserts/asserts.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"]]],["^1@","goog/uri/uri.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1Q","^1R","^1Z","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/base.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",[]]],["^1@","goog/structs/structs.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1Q","^1W"]]],["^1@","clojure/string.cljs"],[1567262080081,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^V","^1Z","~$goog.string.StringBuffer"]]],["^1@","goog/string/string.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","goog/reflect/reflect.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","goog/string/stringbuffer.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","goog/iter/iter.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1Q","^1R","~$goog.functions","~$goog.math"]]],["^1@","cljs/core.cljs"],[1567262080081,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["~$goog.math.Long","~$goog.math.Integer","^1Z","^1W","^1Q","~$goog.Uri","^24"]]],["^1@","goog/math/integer.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W"]]],["^1@","markdown/links.cljc"],[1567356142405,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^V","^S","^U"]]],["^1@","goog/uri/utils.js"],[1567356087625,"^1M",["^ ","^1N",null,"^1O",["^L",[]],"^1P",["^W","^1Q","^1R","^1Z"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/links.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V","^W","^W"],"^X",["^L",["^Y"]],"^Z",["^ ","^[","^U","^10","^U","^11","^U","^12","^U","^13","^U","^14","^U","^15","^U"],"~:defs",["^ ","~$replace-all-footnote-links",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/links.cljc","^7",169,"^8",7,"^9",169,"^:",33,"~:arglists",["^18",["~$quote",["^18",[["~$text",["^ ","~:keys",["~$footnotes"],"^1:","~$state"]]]]]]],"^M","~$markdown.links/replace-all-footnote-links","^6","markdown/links.cljc","^:",33,"~:method-params",["^18",[["^2Z","~$p__32815"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^8",1,"~:variadic?",false,"^7",169,"~:ret-tag","~$cljs.core/IVector","^9",169,"~:max-fixed-arity",2,"~:fn-var",true,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^30"],"^1:","^31"]]]]]]],"~$make-image-reference",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",193,"^8",7,"^9",193,"^:",27,"^2X",["^18",["^2Y",["^18",[["~$src","~$alt","~$title"]]]]]],"^M","~$markdown.links/make-image-reference","^6","markdown/links.cljc","^:",27,"^33",["^18",[["^3=","^3>","^3?"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",193,"^38","^T","^9",193,"^3:",3,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3=","^3>","^3?"]]]]]],"~$href",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",13,"^8",7,"^9",13,"^:",11,"^2X",["^18",["^2Y",["^18",[["^2Z","~$link","^31"]]]]]],"^M","~$markdown.links/href","^6","markdown/links.cljc","^:",11,"^33",["^18",[["^2Z","^3B","^31"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",13,"^38","^39","^9",13,"^3:",3,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z","^3B","^31"]]]]]],"~$img",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",22,"^8",7,"^9",22,"^:",10,"^2X",["^18",["^2Y",["^18",[["^3>","~$url","^31","~$&",["^3?"]]]]]],"~:top-fn",["^ ","^37",true,"~:fixed-arity",3,"^3:",3,"^33",[["^18",["^3>","^3E","^31",["^3?"]]]],"^2X",["^18",[["^3>","^3E","^31","~$&",["^3?"]]]],"^36",["^18",[null]]]],"^M","~$markdown.links/img","^6","markdown/links.cljc","^:",10,"^3F",["^ ","^37",true,"^3G",3,"^3:",3,"^33",[["^18",["^3>","^3E","^31",["^3?"]]]],"^2X",["^18",[["^3>","^3E","^31","~$&",["^3?"]]]],"^36",["^18",[null]]],"^33",[["^18",["^3>","^3E","^31",["^3?"]]]],"^35",null,"^3G",3,"^36",["^18",[null]],"^8",1,"^37",true,"~:methods",[["^ ","^3G",3,"^37",true,"~:tag","^39"]],"^7",22,"^38","~$any","^9",22,"^3:",3,"^3;",true,"^2X",["^18",[["^3>","^3E","^31","~$&",["^3?"]]]]],"~$parse-footnote-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",158,"^8",7,"^9",158,"^:",26,"^2X",["^18",["^2Y",["^18",[["~$line","^30"]]]]]],"^M","~$markdown.links/parse-footnote-link","^6","markdown/links.cljc","^:",26,"^33",["^18",[["^3M","^30"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",158,"^38",["^L",[null,"^3K","~$clj-nil"]],"^9",158,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3M","^30"]]]]]],"~$implicit-reference-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",151,"^8",7,"^9",151,"^:",30,"^2X",["^18",["^2Y",["^18",[["^2Z","^31"]]]]]],"^M","~$markdown.links/implicit-reference-link","^6","markdown/links.cljc","^:",30,"^33",["^18",[["^2Z","^31"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",151,"^38","^39","^9",151,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z","^31"]]]]]],"~$parse-links",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",121,"^8",7,"^9",121,"^:",18,"^2X",["^18",["^2Y",["^18",[["~$references","~$links"]]]]]],"^M","~$markdown.links/parse-links","^6","markdown/links.cljc","^:",18,"^33",["^18",[["^3S","^3T"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",121,"^38",["^L",[null,"~$clj","^3K"]],"^9",121,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3S","^3T"]]]]]],"~$footnote-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",181,"^8",7,"^9",181,"^:",20,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["~$code","~$codeblock","^30"],"^1:","^31"]]]]]]],"^M","~$markdown.links/footnote-link","^6","markdown/links.cljc","^:",20,"^33",["^18",[["^2Z","~$p__32818"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",181,"^38","^39","^9",181,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^3X","^3Y","^30"],"^1:","^31"]]]]]]],"~$reference-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",140,"^8",7,"^9",140,"^:",21,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^3X","^3Y","^3S"],"^1:","^31"]]]]]]],"^M","~$markdown.links/reference-link","^6","markdown/links.cljc","^:",21,"^33",["^18",[["^2Z","~$p__32812"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",140,"^38","^39","^9",140,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^3X","^3Y","^3S"],"^1:","^31"]]]]]]],"~$image-reference-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",197,"^8",7,"^9",197,"^:",27,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^3S"],"^1:","^31"]]]]]]],"^M","~$markdown.links/image-reference-link","^6","markdown/links.cljc","^:",27,"^33",["^18",[["^2Z","~$p__32824"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",197,"^38","^39","^9",197,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z",["^ ","^2[",["^3S"],"^1:","^31"]]]]]]],"~$make-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",47,"^8",7,"^9",47,"^:",16,"^2X",["^18",["^2Y",["^18",[["~$img?"]]]]]],"^M","~$markdown.links/make-link","^6","markdown/links.cljc","^:",16,"^33",["^18",[["^47"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",47,"^38","~$function","^9",47,"^3:",1,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^47"]]]]]],"~$replace-footnote-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",164,"^8",7,"^9",164,"^:",28,"^2X",["^18",["^2Y",["^18",[["^30","~$footnote"]]]]]],"^M","~$markdown.links/replace-footnote-link","^6","markdown/links.cljc","^:",28,"^33",["^18",[["^30","^4;"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",164,"^38","^T","^9",164,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^30","^4;"]]]]]],"~$replace-reference-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",108,"^8",7,"^9",108,"^:",29,"^2X",["^18",["^2Y",["^18",[["^3S","~$reference"]]]]]],"^M","~$markdown.links/replace-reference-link","^6","markdown/links.cljc","^:",29,"^33",["^18",[["^3S","^4>"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",108,"^38","^T","^9",108,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3S","^4>"]]]]]],"~$handle-img-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",30,"^8",7,"^9",30,"^:",22,"^2X",["^18",["^2Y",["^18",[["~$xs","^31"]]]]]],"^M","~$markdown.links/handle-img-link","^6","markdown/links.cljc","^:",22,"^33",["^18",[["^4A","^31"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",30,"^38","^39","^9",30,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^4A","^31"]]]]]],"~$parse-reference",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",96,"^8",7,"^9",96,"^:",22,"^2X",["^18",["^2Y",["^18",[["^4>","~$start"]]]]]],"^M","~$markdown.links/parse-reference","^6","markdown/links.cljc","^:",22,"^33",["^18",[["^4>","^4D"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",96,"^38",["^L",[null,"^3K"]],"^9",96,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^4>","^4D"]]]]]],"^4;",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",155,"^8",7,"^9",155,"^:",15,"^2X",["^18",["^2Y",["^18",[["^2Z"]]]]]],"^M","~$markdown.links/footnote","^6","markdown/links.cljc","^:",15,"^33",["^18",[["^2Z"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",155,"^38",["^L",["^3V","^39","^3K","~$cljs.core/MetaFn","^3O"]],"^9",155,"^3:",1,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z"]]]]]],"~$parse-reference-link",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",102,"^8",7,"^9",102,"^:",27,"^2X",["^18",["^2Y",["^18",[["^3M","^3S"]]]]]],"^M","~$markdown.links/parse-reference-link","^6","markdown/links.cljc","^:",27,"^33",["^18",[["^3M","^3S"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",102,"^38",["^L",[null,"^3K","^3O"]],"^9",102,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3M","^3S"]]]]]],"^4>",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",93,"^8",7,"^9",93,"^:",16,"^2X",["^18",["^2Y",["^18",[["^2Z"]]]]]],"^M","~$markdown.links/reference","^6","markdown/links.cljc","^:",16,"^33",["^18",[["^2Z"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",93,"^38",["^L",["^3V","^39","^3K","^4G","^3O"]],"^9",93,"^3:",1,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^2Z"]]]]]],"^3B",["^ ","^M","~$markdown.links/link","^6","markdown/links.cljc","^7",90,"^8",1,"^9",90,"^:",10,"^5",["^ ","^6","markdown/links.cljc","^7",90,"^8",6,"^9",90,"^:",10],"^3J","^49"],"~$freeze-links",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",127,"^8",7,"^9",127,"^:",19,"^2X",["^18",["^2Y",["^18",[["^3S","^2Z","^31"]]]]]],"^M","~$markdown.links/freeze-links","^6","markdown/links.cljc","^:",19,"^33",["^18",[["^3S","^2Z","^31"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",127,"^38","^39","^9",127,"^3:",3,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3S","^2Z","^31"]]]]]],"~$encode-links",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",113,"^8",7,"^9",113,"^:",19,"^2X",["^18",["^2Y",["^18",[["^3T","~$i"]]]]]],"^M","~$markdown.links/encode-links","^6","markdown/links.cljc","^:",19,"^33",["^18",[["^3T","~$i"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",113,"^38",["^L",["^3K","^3O"]],"^9",113,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3T","~$i"]]]]]],"~$image",["^ ","^M","~$markdown.links/image","^6","markdown/links.cljc","^7",91,"^8",1,"^9",91,"^:",11,"^5",["^ ","^6","markdown/links.cljc","^7",91,"^8",6,"^9",91,"^:",11],"^3J","^49"],"~$process-link-title",["^ ","^2W",null,"^5",["^ ","^6","markdown/links.cljc","^7",40,"^8",7,"^9",40,"^:",25,"^2X",["^18",["^2Y",["^18",[["^3?","^31"]]]]]],"^M","~$markdown.links/process-link-title","^6","markdown/links.cljc","^:",25,"^33",["^18",[["^3?","^31"]]],"^35",null,"^36",["^18",[null,null]],"^8",1,"^37",false,"^7",40,"^38",["^L",["^3K","^3O"]],"^9",40,"^3:",2,"^3;",true,"^2X",["^18",["^2Y",["^18",[["^3?","^31"]]]]]]],"^16",["^ ","^V","^V"],"~:cljs.analyzer/constants",["^ ","^X",["^L",["~:codeblock","~:footnotes","~:unprocessed","~:else","~:frozen-strings","~:references","~:next-fn-id","~:code","~:processed","~:reference-links?"]],"~:order",["^50","^4U","^4X","^4Y","^4Z","^4W","^4[","^4V","^51","^52"]],"^1<",["^ ","^Y",["^L",[]]],"^1=",["^ "],"^1>",["^W","^V","^S","^U"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1L",[["^56","~:static-fns"],true,["^56","~:elide-asserts"],false,["^56","~:optimize-constants"],null,["^56","^1C"],null,["^56","~:external-config"],null,["^56","~:tooling-config"],null,["^56","~:emit-constants"],null,["^56","~:load-tests"],null,["^56","~:form-size-threshold"],null,["^56","~:infer-externs"],true,["^56","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^56","~:fn-invoke-direct"],null,["^56","~:source-map"],"/dev/null"]]]