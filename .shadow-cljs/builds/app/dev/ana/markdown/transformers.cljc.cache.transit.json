["^ ","~:output",["^ ","~:js","goog.provide('markdown.transformers');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\ngoog.require('cljs.reader');\r\ngoog.require('markdown.links');\r\ngoog.require('markdown.lists');\r\ngoog.require('markdown.tables');\r\ngoog.require('markdown.common');\r\nmarkdown.transformers.heading_QMARK_ = (function markdown$transformers$heading_QMARK_(text,type){\r\nif(cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text))){\r\nreturn null;\r\n} else {\r\nvar trimmed = (cljs.core.truth_(text)?clojure.string.trim(text):null);\r\nvar and__4120__auto__ = cljs.core.not_empty(trimmed);\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn cljs.core.every_QMARK_(cljs.core.PersistentHashSet.createAsIfByAssoc([type]),trimmed);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n}\r\n});\r\nmarkdown.transformers.h1_QMARK_ = (function markdown$transformers$h1_QMARK_(text){\r\nreturn markdown.transformers.heading_QMARK_(text,\"=\");\r\n});\r\nmarkdown.transformers.h2_QMARK_ = (function markdown$transformers$h2_QMARK_(text){\r\nreturn markdown.transformers.heading_QMARK_(text,\"-\");\r\n});\r\nmarkdown.transformers.empty_line = (function markdown$transformers$empty_line(text,p__32836){\r\nvar map__32837 = p__32836;\r\nvar map__32837__$1 = (((((!((map__32837 == null))))?(((((map__32837.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32837.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32837):map__32837);\r\nvar state = map__32837__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32837__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32837__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = markdown.transformers.h1_QMARK_(text);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn markdown.transformers.h2_QMARK_(text);\r\n}\r\n})())?\"\":text),((clojure.string.blank_QMARK_(text))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873)], 0)):state)], null);\r\n}\r\n});\r\nmarkdown.transformers.superscript = (function markdown$transformers$superscript(text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.contains_QMARK_,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"^\",null], null), null)),text);\r\nvar buf = cljs.core.PersistentVector.EMPTY;\r\nvar remaining = tokens;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(remaining)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf),state], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"^\"], null))){\r\nvar G__32962 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(\"<sup>\"),cljs.core.second(remaining),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"</sup>\")], 0)));\r\nvar G__32963 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),remaining);\r\nbuf = G__32962;\r\nremaining = G__32963;\r\ncontinue;\r\n} else {\r\nvar G__32964 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(remaining));\r\nvar G__32965 = cljs.core.rest(remaining);\r\nbuf = G__32964;\r\nremaining = G__32965;\r\ncontinue;\r\n\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\nmarkdown.transformers.heading = (function markdown$transformers$heading(text,p__32845){\r\nvar map__32846 = p__32845;\r\nvar map__32846__$1 = (((((!((map__32846 == null))))?(((((map__32846.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32846.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32846):map__32846);\r\nvar state = map__32846__$1;\r\nvar buf = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32846__$1,new cljs.core.Keyword(null,\"buf\",\"buf\",-213913340));\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32846__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32846__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32846__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar heading_anchors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32846__$1,new cljs.core.Keyword(null,\"heading-anchors\",\"heading-anchors\",1713527866));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = codeblock;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn code;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.transformers.h1_QMARK_((function (){var or__4131__auto__ = buf;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn next_line;\r\n}\r\n})()))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h1>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h1>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.transformers.h2_QMARK_((function (){var or__4131__auto__ = buf;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn next_line;\r\n}\r\n})()))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h2>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h2>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\r\n} else {\r\nvar temp__5718__auto__ = markdown.common.make_heading(text,heading_anchors);\r\nif(cljs.core.truth_(temp__5718__auto__)){\r\nvar heading = temp__5718__auto__;\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.br = (function markdown$transformers$br(text,p__32854){\r\nvar map__32855 = p__32854;\r\nvar map__32855__$1 = (((((!((map__32855 == null))))?(((((map__32855.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32855.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32855):map__32855);\r\nvar state = map__32855__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32855__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32855__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),text))) && (cljs.core.not((function (){var or__4131__auto__ = code;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn lists;\r\n}\r\n})()))))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((2),text))),\"<br />\"].join(''):text),state], null);\r\n});\r\nmarkdown.transformers.autourl_transformer = (function markdown$transformers$autourl_transformer(text,p__32858){\r\nvar map__32859 = p__32858;\r\nvar map__32859__$1 = (((((!((map__32859 == null))))?(((((map__32859.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32859.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32859):map__32859);\r\nvar state = map__32859__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32859__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar frozen_strings = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32859__$1,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560));\r\nif(cljs.core.truth_(code)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar currently_frozen = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),frozen_strings], null));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.replace(text,/<https?:\\/\\/[-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\\/%=~_()|]>/,((function (currently_frozen,map__32859,map__32859__$1,state,code,frozen_strings){\r\nreturn (function (p1__32857_SHARP_){\r\nvar vec__32861 = markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__32857_SHARP_,(1),(cljs.core.count(p1__32857_SHARP_) - (1))),cljs.core.deref(currently_frozen)], 0));\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32861,(0),null);\r\nvar frozen_strings__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32861,(1),null);\r\ncljs.core.vreset_BANG_(currently_frozen,frozen_strings__$1);\r\n\r\nreturn [\"<a href=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"</a>\"].join('');\r\n});})(currently_frozen,map__32859,map__32859__$1,state,code,frozen_strings))\r\n),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([state,cljs.core.deref(currently_frozen)], 0))], null);\r\n}\r\n});\r\nmarkdown.transformers.autoemail_transformer = (function markdown$transformers$autoemail_transformer(text,state){\r\nvar left_pad = (function (s){\r\nvar G__32865 = s;\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(s))){\r\nreturn [\"0\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__32865)].join('');\r\n} else {\r\nreturn G__32865;\r\n}\r\n});\r\nvar encoder = (cljs.core.truth_(new cljs.core.Keyword(null,\"clojurescript\",\"clojurescript\",-299769403).cljs$core$IFn$_invoke$arity$1(state))?((function (left_pad){\r\nreturn (function (c){\r\nreturn [\"&#x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(left_pad(c.charCodeAt((0)).toString((16)))),\";\"].join('');\r\n});})(left_pad))\r\n:((function (left_pad){\r\nreturn (function (c){\r\nvar G__32866 = \"&#x%02x;\";\r\nvar G__32867 = (c | (0));\r\nreturn (markdown.transformers._STAR_formatter_STAR_.cljs$core$IFn$_invoke$arity$2 ? markdown.transformers._STAR_formatter_STAR_.cljs$core$IFn$_invoke$arity$2(G__32866,G__32867) : markdown.transformers._STAR_formatter_STAR_.call(null,G__32866,G__32867));\r\n});})(left_pad))\r\n);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(text,/<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>/,((function (left_pad,encoder){\r\nreturn (function (p1__32864_SHARP_){\r\nvar encoded = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(encoder,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__32864_SHARP_,(1),(cljs.core.count(p1__32864_SHARP_) - (1)))));\r\nreturn [\"<a href=\\\"mailto:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"</a>\"].join('');\r\n});})(left_pad,encoder))\r\n)),state], null);\r\n});\r\nmarkdown.transformers.set_line_state = (function markdown$transformers$set_line_state(text,p__32868){\r\nvar map__32869 = p__32868;\r\nvar map__32869__$1 = (((((!((map__32869 == null))))?(((((map__32869.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32869.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32869):map__32869);\r\nvar state = map__32869__$1;\r\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32869__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284),new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)], null),inline_heading)], null);\r\n});\r\nmarkdown.transformers.clear_line_state = (function markdown$transformers$clear_line_state(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284))], null);\r\n});\r\nmarkdown.transformers.paragraph_text = (function markdown$transformers$paragraph_text(last_line_empty_QMARK_,text){\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(last_line_empty_QMARK_);\r\nif(and__4120__auto__){\r\nreturn cljs.core.not_empty(text);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn [\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join('');\r\n} else {\r\nreturn text;\r\n}\r\n});\r\nmarkdown.transformers.open_paragraph = (function markdown$transformers$open_paragraph(text,p__32873){\r\nvar map__32874 = p__32873;\r\nvar map__32874__$1 = (((((!((map__32874 == null))))?(((((map__32874.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32874.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32874):map__32874);\r\nvar state = map__32874__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\r\nvar blockquote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190));\r\nvar heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873));\r\nvar hr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067));\r\nvar temp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\r\nvar last_line_empty_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32874__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = paragraph;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn lists;\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = heading;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nvar or__4131__auto____$1 = inline_heading;\r\nif(cljs.core.truth_(or__4131__auto____$1)){\r\nreturn or__4131__auto____$1;\r\n} else {\r\nvar or__4131__auto____$2 = hr;\r\nif(cljs.core.truth_(or__4131__auto____$2)){\r\nreturn or__4131__auto____$2;\r\n} else {\r\nvar or__4131__auto____$3 = code;\r\nif(cljs.core.truth_(or__4131__auto____$3)){\r\nreturn or__4131__auto____$3;\r\n} else {\r\nvar or__4131__auto____$4 = lists;\r\nif(cljs.core.truth_(or__4131__auto____$4)){\r\nreturn or__4131__auto____$4;\r\n} else {\r\nreturn blockquote;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(paragraph)){\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn cljs.core.empty_QMARK_(clojure.string.trim(text));\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.transformers.paragraph_text(last_line_empty_QMARK_,text)),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text(last_line_empty_QMARK_,text),state], null);\r\n}\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(eof);\r\nif(and__4120__auto__){\r\nvar and__4120__auto____$1 = (!(clojure.string.blank_QMARK_(text)));\r\nif(and__4120__auto____$1){\r\nvar or__4131__auto__ = new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818).cljs$core$IFn$_invoke$arity$1(temp);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn last_line_empty_QMARK_;\r\n}\r\n} else {\r\nreturn and__4120__auto____$1;\r\n}\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.close_paragraph = (function markdown$transformers$close_paragraph(text,p__32880){\r\nvar map__32881 = p__32880;\r\nvar map__32881__$1 = (((((!((map__32881 == null))))?(((((map__32881.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32881.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32881):map__32881);\r\nvar state = map__32881__$1;\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32881__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32881__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = paragraph;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__32885 = next_line;\r\nif((G__32885 == null)){\r\nreturn null;\r\n} else {\r\nreturn clojure.string.trim(G__32885);\r\n}\r\n})()));\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.transformers.paragraph = (function markdown$transformers$paragraph(text,state){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(markdown.transformers.close_paragraph,markdown.transformers.open_paragraph(text,state));\r\n});\r\nmarkdown.transformers.code = (function markdown$transformers$code(text,p__32886){\r\nvar map__32887 = p__32886;\r\nvar map__32887__$1 = (((((!((map__32887 == null))))?(((((map__32887.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32887.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32887):map__32887);\r\nvar state = map__32887__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32887__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32887__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32887__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32887__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = lists;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(code)){\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"    \",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text)));\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</code></pre>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"code\",\"code\",1586293142),new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527)], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\")))].join(''),state], null);\r\n}\r\n} else {\r\nif(cljs.core.empty_QMARK_(clojure.string.trim(text))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar num_spaces = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\r\nif((num_spaces > (3))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\")))].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),true], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.codeblock = (function markdown$transformers$codeblock(text,p__32890){\r\nvar map__32894 = p__32890;\r\nvar map__32894__$1 = (((((!((map__32894 == null))))?(((((map__32894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32894):map__32894);\r\nvar state = map__32894__$1;\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32894__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar codeblock_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32894__$1,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736));\r\nvar indented_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32894__$1,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175));\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32894__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32894__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar trimmed = clojure.string.trim(text);\r\nvar next_line_closes_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__32897 = next_line;\r\nif((G__32897 == null)){\r\nreturn null;\r\n} else {\r\nreturn clojure.string.trim(G__32897);\r\n}\r\n})()));\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = lists;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn codeblock_end;\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\r\n} else {\r\nif(cljs.core.truth_(codeblock_end)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),true),new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = next_line_closes_QMARK_;\r\nif(and__4120__auto__){\r\nreturn codeblock;\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code([cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.first(clojure.string.split.cljs$core$IFn$_invoke$arity$2(next_line,/```/))))].join(''))),\"</code></pre>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),cljs.core.not(lists),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),cljs.core.not(lists)], 0))], null);\r\n} else {\r\nif(((cljs.core.not(indented_code)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),trimmed))))){\r\nvar vec__32909 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"\\n\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),trimmed));\r\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32909,(0),null);\r\nvar code = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32909,(1),null);\r\nvar lang__$1 = clojure.string.trim(clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang));\r\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(code));\r\nvar formatter = new cljs.core.Keyword(null,\"code-style\",\"code-style\",-2144009586).cljs$core$IFn$_invoke$arity$1(state);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code\",(cljs.core.truth_(cljs.core.not_empty(lang__$1))?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(formatter)?(formatter.cljs$core$IFn$_invoke$arity$1 ? formatter.cljs$core$IFn$_invoke$arity$1(lang__$1) : formatter.call(null,lang__$1)):[\"class=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang__$1)),\"\\\"\"].join('')))].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(((cljs.core.empty_QMARK_(s))?s:[cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\n\"].join('')))),((next_line_closes_QMARK_)?\"</code></pre>\":null)].join(''),((next_line_closes_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),true], 0)):cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),true], 0)))], null);\r\n} else {\r\nif(cljs.core.truth_(codeblock)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(text)),\"\\n\"].join(''),state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.hr = (function markdown$transformers$hr(text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(((((cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"*\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"-\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"_\",null], null), null),text))))) && ((cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),text)) > (2))))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"<hr/>\",cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n}\r\n});\r\n/**\r\n * Check for blockquotes and signal to blockquote-2 function with\r\n *   states blockquote-start and blockquote-end so that tags can be added.\r\n *   This approach enables lists to be included in blockquotes.\r\n */\r\nmarkdown.transformers.blockquote_1 = (function markdown$transformers$blockquote_1(text,p__32917){\r\nvar map__32918 = p__32917;\r\nvar map__32918__$1 = (((((!((map__32918 == null))))?(((((map__32918.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32918.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32918):map__32918);\r\nvar state = map__32918__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32918__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32918__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32918__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32918__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar trimmed = clojure.string.trim(text);\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190).cljs$core$IFn$_invoke$arity$1(state))){\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn cljs.core.empty_QMARK_(trimmed);\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),false], 0))], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",trimmed)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<p>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n} else {\r\nif((((cljs.core.count(trimmed) >= (2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">-\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(2)))))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<footer>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(2))),\"</footer>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),false)], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(1)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(1))),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.first(text))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(text))),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),true,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n});\r\n/**\r\n * Check for change in blockquote states and add start or end tags.\r\n *   Closing a blockquote with a list in it is a bit more complex,\r\n *   as the list is not closed until the following blank line.\r\n */\r\nmarkdown.transformers.blockquote_2 = (function markdown$transformers$blockquote_2(text,p__32920){\r\nvar map__32921 = p__32920;\r\nvar map__32921__$1 = (((((!((map__32921 == null))))?(((((map__32921.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32921.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32921):map__32921);\r\nvar state = map__32921__$1;\r\nvar blockquote_start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32921__$1,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935));\r\nvar blockquote_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32921__$1,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964));\r\nvar blockquote_paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32921__$1,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32921__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar not_in_list = ((cljs.core.not(lists)) || (cljs.core.empty_QMARK_(lists)));\r\nif(cljs.core.truth_(blockquote_start)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<blockquote><p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935))], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = blockquote_end;\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn not_in_list;\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),(cljs.core.truth_(blockquote_paragraph)?\"</p>\":null),\"</blockquote>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964)], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.transformers.footer = (function markdown$transformers$footer(footnotes){\r\nif(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))){\r\nreturn \"\";\r\n} else {\r\nvar G__32934 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (footnotes__$1,p__32935){\r\nvar vec__32936 = p__32935;\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32936,(0),null);\r\nvar label = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32936,(1),null);\r\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(footnotes__$1),\"<li id='fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\" \",label))),\"<a href='#fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>&#8617;</a></li>\"].join('');\r\n}),\"\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map(),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes)));\r\nvar fexpr__32933 = ((function (G__32934){\r\nreturn (function (p1__32929_SHARP_){\r\nreturn [\"<ol class='footnotes'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__32929_SHARP_),\"</ol>\"].join('');\r\n});})(G__32934))\r\n;\r\nreturn fexpr__32933(G__32934);\r\n}\r\n});\r\n/**\r\n * Given a line of metadata header text return either a list containing a parsed\r\n *   and normalizd key and the original text of the value, or if no header is found\r\n *   (this is a continuation or new value from a pervious header key) simply\r\n *   return the text. If a blank or invalid line is found return nil.\r\n */\r\nmarkdown.transformers.parse_metadata_line = (function markdown$transformers$parse_metadata_line(line){\r\nif(cljs.core.truth_(line)){\r\nvar vec__32941 = cljs.core.re_matches(/^([0-9A-Za-z_-]*):(.*)$/,line);\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32941,(0),null);\r\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32941,(1),null);\r\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32941,(2),null);\r\nvar vec__32944 = cljs.core.re_matches(/^    (.*)$/,line);\r\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32944,(0),null);\r\nvar next_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32944,(1),null);\r\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(clojure.string.trim(line),\"\")){\r\nif(cljs.core.truth_(key)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case(key)),val], null);\r\n} else {\r\nif(cljs.core.truth_(next_val)){\r\nreturn line;\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Given a list of maps which contain a single key/value, flatten them all into\r\n *   a single map with all the leading spaces removed. If an empty list is provided\r\n *   then return nil.\r\n */\r\nmarkdown.transformers.flatten_metadata = (function markdown$transformers$flatten_metadata(metadata){\r\nif((cljs.core.count(metadata) > (0))){\r\nvar acc = cljs.core.PersistentArrayMap.EMPTY;\r\nvar remain = metadata;\r\nvar prev_key = null;\r\nwhile(true){\r\nif((!(cljs.core.empty_QMARK_(remain)))){\r\nvar data = cljs.core.first(remain);\r\nvar vec__32953 = ((cljs.core.sequential_QMARK_(data))?data:new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key,data], null));\r\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32953,(0),null);\r\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32953,(1),null);\r\nvar prev_val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(acc,key,cljs.core.PersistentVector.EMPTY);\r\nvar postfix = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),val)))?\"\\n\":\"\");\r\nvar norm_val = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.trim(val)),postfix].join('');\r\nvar new_val = (((!(cljs.core.empty_QMARK_(norm_val))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(prev_val,norm_val):prev_val);\r\nvar G__33090 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,cljs.core.PersistentArrayMap.createAsIfByAssoc([key,new_val])], 0));\r\nvar G__33091 = cljs.core.rest(remain);\r\nvar G__33092 = key;\r\nacc = G__33090;\r\nremain = G__33091;\r\nprev_key = G__33092;\r\ncontinue;\r\n} else {\r\nreturn acc;\r\n}\r\nbreak;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.transformers.parse_wiki_metadata_headers = (function markdown$transformers$parse_wiki_metadata_headers(lines_seq){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,line){\r\nvar temp__5718__auto__ = markdown.transformers.parse_metadata_line(line);\r\nif(cljs.core.truth_(temp__5718__auto__)){\r\nvar parsed = temp__5718__auto__;\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,parsed);\r\n} else {\r\nreturn cljs.core.reduced(markdown.transformers.flatten_metadata(acc));\r\n}\r\n}),cljs.core.PersistentVector.EMPTY,lines_seq);\r\n});\r\nmarkdown.transformers.parse_yaml_metadata_headers = (function markdown$transformers$parse_yaml_metadata_headers(lines_seq){\r\nthrow (new Error(\"YAML is unsupported in ClojureScript mode\"));\r\n});\r\nmarkdown.transformers.parse_edn_metadata_headers = (function markdown$transformers$parse_edn_metadata_headers(lines_seq){\r\nreturn cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,/\\s*/)),lines_seq)));\r\n});\r\n/**\r\n * Given a sequence of lines from a markdown document, attempt to parse a\r\n *   metadata header if it exists. Accepts wiki, yaml, and edn formats.\r\n */\r\nmarkdown.transformers.parse_metadata_headers = (function markdown$transformers$parse_metadata_headers(lines_seq){\r\nif(cljs.core.sequential_QMARK_(lines_seq)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (sequential? lines-seq)\"));\r\n}\r\n\r\nif(cljs.core.every_QMARK_(cljs.core.string_QMARK_,lines_seq)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (every? string? lines-seq)\"));\r\n}\r\n\r\nif(cljs.core.truth_(cljs.core.re_matches(/--- */,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_yaml_metadata_headers(lines_seq);\r\n} else {\r\nif(cljs.core.truth_(cljs.core.re_matches(/\\w+: .*/,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_wiki_metadata_headers(lines_seq);\r\n} else {\r\nif(cljs.core.truth_(cljs.core.re_matches(/\\{.*/,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_edn_metadata_headers(lines_seq);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.transformer_vector = cljs.core.PersistentVector.fromArray([markdown.transformers.set_line_state,markdown.transformers.empty_line,markdown.common.inhibit,markdown.common.escape_inhibit_separator,markdown.transformers.code,markdown.transformers.codeblock,markdown.common.escaped_chars,markdown.common.inline_code,markdown.transformers.autoemail_transformer,markdown.transformers.autourl_transformer,markdown.links.image,markdown.links.image_reference_link,markdown.links.link,markdown.links.implicit_reference_link,markdown.links.reference_link,markdown.links.footnote_link,markdown.transformers.hr,markdown.transformers.blockquote_1,markdown.lists.li,markdown.transformers.heading,markdown.transformers.blockquote_2,markdown.common.italics,markdown.common.bold_italic,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough,markdown.transformers.superscript,markdown.tables.table,markdown.transformers.paragraph,markdown.transformers.br,markdown.common.thaw_strings,markdown.common.dashes,markdown.transformers.clear_line_state], true);\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/transformers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.transformers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^S","~$markdown.tables","^T","~$goog","^U","~$markdown.lists","^V","~$string","~$clojure.string","~$markdown.links","^Y","^X","^X","~$cljs.reader","^Z","~$edn","^Z","~$markdown.common","^10"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$italics","^10","~$separator","^10","~$make-heading","^10","~$dashes","^10","~$thaw-strings","^10","~$inhibit","^10","~$implicit-reference-link","^Y","~$bold","^10","~$freeze-string","^10","~$footnote-link","^Y","~$escape-code","^10","~$table","^T","~$strong","^10","~$li","^V","~$reference-link","^Y","~$image-reference-link","^Y","~$em","^10","~$escaped-chars","^10","~$inline-code","^10","~$strikethrough","^10","~$bold-italic","^10","~$link","^Y","~$escape-inhibit-separator","^10","~$image","^Y"],"~:require-macros",["^ ","^S","^S","^Z","^Z","^[","^Z"],"~:form",["~#list",["~$ns","^N",["^1N",["^12",["^X","~:as","^W"],["^Z","^1P","^["],["^Y","~:refer",["^1I","^1K","^1B","^1C","^1:","^1="]],["^V","^1Q",["^1A"]],["^T","^1Q",["^1?"]],["^10","^1Q",["^1>","^1E","^1<","^15","^18","^1@","^1;","^1H","^1D","^14","^1G","^1F","^1J","^19","^16","^17"]]]]]],"~:flags",["^ ","^12",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^U","^S","^X","^Z","^Y","^V","^T","^10"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","markdown/transformers.cljc"],"~:compiled-at",1574163718739,"~:resource-name","markdown/transformers.cljc","~:warnings",[],"~:source","(ns markdown.transformers\n  (:require [clojure.string :as string]\n            #?(:clj  [clojure.edn :as edn]\n               :cljs [cljs.reader :as edn])\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              separator\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]\n            #?(:clj [clj-yaml.core :as yaml])))\n\n(declare ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (if text (string/trim text))]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                            (= 1 (count s)) (str \"0\")))\n        encoder  (if (:clojurescript state)\n                   (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                   (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n         text\n         #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n         #(let [encoded (->> (subs % 1 (dec (count %)))\n                             (map encoder)\n                             (apply str))]\n            (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim))))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof lists code codeblock] :as state}]\n  (cond\n    (or lists codeblock)\n    [text state]\n\n    code\n    (if (or eof (not= \"    \" (string/join (take 4 text))))\n      [(str \"</code></pre>\" text) (dissoc state :indented-code :code :last-line-empty?)]\n      [(str \"\\n\" (escape-code (string/replace-first text #\"    \" \"\"))) state])\n\n    (empty? (string/trim text))\n    [text state]\n\n    :default\n    (let [num-spaces (count (take-while (partial = \\space) text))]\n      (if (> num-spaces 3)\n        [(str \"<pre><code>\" (escape-code (string/replace-first text #\"    \" \"\")))\n         (assoc state :code true :indented-code true)]\n        [text state]))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed           (string/trim text)\n        next-line-closes? (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim)))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \"\\n\" (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (= [\\` \\` \\`] (take 3 trimmed)))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (if (not-empty lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock lists] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end)]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (not (empty? remain))\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n\n(defn parse-wiki-metadata-headers\n  [lines-seq]\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced (flatten-metadata acc))))\n    [] lines-seq))\n\n(defn parse-yaml-metadata-headers\n  [lines-seq]\n  #?(:clj\n     (->> lines-seq\n          ;; leave off opening ---\n          (drop 1)\n          ;; take lines until we see the closing ---\n          (take-while (comp not (partial re-matches #\"---\\s*\")))\n          ;; join together and parse\n          (string/join \"\\n\")\n          yaml/parse-string)\n     :cljs\n     (throw (js/Error. \"YAML is unsupported in ClojureScript mode\"))))\n\n(defn parse-edn-metadata-headers\n  [lines-seq]\n  (->> lines-seq\n       ;; take sequences until you hit an empty line\n       (take-while (comp not (partial re-matches #\"\\s*\")))\n       ;; join together and parse\n       (string/join \"\\n\")\n       edn/read-string))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (cond\n    ;; Treat as yaml\n    (re-matches #\"--- *\" (first lines-seq))\n    (parse-yaml-metadata-headers lines-seq)\n    ;; Treat as wiki\n    (re-matches #\"\\w+: .*\" (first lines-seq))\n    (parse-wiki-metadata-headers lines-seq)\n    ;; Treat as edn\n    (re-matches #\"\\{.*\" (first lines-seq))\n    (parse-edn-metadata-headers lines-seq)))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take.cljs$core$IFn$_invoke$arity$2","trimmed","clojure.string/trim","and__4120__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__32836","map__32837","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markdown.transformers/empty-line","code","codeblock","state","or__4131__auto__","clojure.string/blank?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/superscript","tokens","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/second","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p__32845","map__32846","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","temp__5718__auto__","heading","markdown.common/make-heading","p__32854","map__32855","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core/str","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","p__32858","map__32859","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__32857#","clojure.string/replace","vec__32861","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","url","cljs.core/deref","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/vreset!","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/autoemail-transformer","left-pad","s","G__32865","encoder","c","G__32866","G__32867","markdown.transformers/*formatter*","p1__32864#","encoded","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__32868","map__32869","markdown.transformers/set-line-state","inline-heading","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__32873","map__32874","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__32880","map__32881","markdown.transformers/close-paragraph","G__32885","markdown.transformers/paragraph","p__32886","map__32887","markdown.transformers/code","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","markdown.common/escape-code","clojure.string/replace-first","num-spaces","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p__32890","map__32894","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__32897","clojure.string.split.cljs$core$IFn$_invoke$arity$2","vec__32909","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__32917","map__32918","markdown.transformers/blockquote-1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__32920","map__32921","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__32935","vec__32936","id","label","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","G__32934","fexpr__32933","p1__32929#","markdown.transformers/parse-metadata-line","line","vec__32941","vec__32944","_","key","val","cljs.core/re-matches","next-val","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__32953","data","cljs.core/sequential?","prev-val","cljs.core.get.cljs$core$IFn$_invoke$arity$3","postfix","norm-val","new-val","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","markdown.transformers/parse-wiki-metadata-headers","lines-seq","parsed","cljs.core/reduced","markdown.transformers/parse-yaml-metadata-headers","js/Error","markdown.transformers/parse-edn-metadata-headers","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","markdown.transformers/parse-metadata-headers","cljs.core/string?","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"]]],"~:cache-keys",["~#cmap",[["^1V","cljs/tools/reader/impl/utils.cljs"],[1567262077127,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^U","^S","^X","~$goog.string"]]],["^1V","goog/math/math.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","~$goog.array","~$goog.asserts"]]],["^1V","goog/array/array.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2="]]],["^1V","goog/debug/error.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","markdown/transformers.cljc"],[1567356142405,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^X","^Z","^Y","^V","^T","^10"]]],["^1V","cljs/tools/reader/edn.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2;","~$goog.string.StringBuffer"]]],["^1V","goog/dom/nodetype.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","cljs/tools/reader/impl/inspect.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S"]]],["^1V","markdown/common.cljc"],[1567356142405,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^X"]]],["^1V","cljs/tools/reader.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2?","^2@","^2A","^2>","^2<","^2;","^2C"]]],["^1V","goog/object/object.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^1V","goog/math/long.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2=","~$goog.reflect"]]],["^1V","goog/functions/functions.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","goog/structs/map.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^1V","cljs/reader.cljs"],[1567262080081,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2H","^2B","~$cljs.tools.reader.edn","^2C"]]],["^1V","goog/asserts/asserts.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","~$goog.debug.Error","~$goog.dom.NodeType","^2;"]]],["^1V","goog/uri/uri.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2<","^2=","^2;","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","markdown/tables.cljc"],[1567356142405,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^X"]]],["^1V","goog/base.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",[]]],["^1V","goog/structs/structs.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2<","^2H"]]],["^1V","cljs/tools/reader/impl/errors.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2?","^X","~$cljs.tools.reader.impl.inspect"]]],["^1V","markdown/lists.cljc"],[1567356142405,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^X","^10"]]],["^1V","clojure/string.cljs"],[1567262080081,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2;","^2C"]]],["^1V","goog/string/string.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","goog/reflect/reflect.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","goog/string/stringbuffer.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","cljs/tools/reader/reader_types.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2@","^2;","^2C"]]],["^1V","goog/iter/iter.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2<","^2=","~$goog.functions","~$goog.math"]]],["^1V","cljs/tools/reader/impl/commons.cljs"],[1567262077127,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^2>","^2?","^2@"]]],["^1V","cljs/core.cljs"],[1567262080081,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["~$goog.math.Long","~$goog.math.Integer","^2;","^2H","^2<","~$goog.Uri","^2C"]]],["^1V","goog/math/integer.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U"]]],["^1V","markdown/links.cljc"],[1567356142405,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^S","^X","^10"]]],["^1V","goog/uri/utils.js"],[1567356087625,"^27",["^ ","^28",null,"^29",["^L",[]],"^2:",["^U","^2<","^2=","^2;"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/transformers.cljc","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","^V","^V","^W","^X","^Y","^Y","^X","^X","^Z","^Z","^[","^Z","^10","^10"],"^11",["^L",["^12"]],"~:shadow/js-access-global",["^L",["Error"]],"^13",["^ ","^14","^10","^15","^10","^16","^10","^17","^10","^18","^10","^19","^10","^1:","^Y","^1;","^10","^1<","^10","^1=","^Y","^1>","^10","^1?","^T","^1@","^10","^1A","^V","^1B","^Y","^1C","^Y","^1D","^10","^1E","^10","^1F","^10","^1G","^10","^1H","^10","^1I","^Y","^1J","^10","^1K","^Y"],"~:defs",["^ ","~$parse-wiki-metadata-headers",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",337,"^8",7,"^9",337,"^:",34,"~:arglists",["^1N",["~$quote",["^1N",[["~$lines-seq"]]]]]],"^M","~$markdown.transformers/parse-wiki-metadata-headers","^6","markdown/transformers.cljc","^:",34,"~:method-params",["^1N",[["^3N"]]],"~:protocol-impl",null,"~:arglists-meta",["^1N",[null,null]],"^8",1,"~:variadic?",false,"^7",337,"~:ret-tag",["^L",[null,"~$any"]],"^9",337,"~:max-fixed-arity",1,"~:fn-var",true,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]]],"~$h2?",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",44,"^8",7,"^9",44,"^:",10,"^3L",["^1N",["^3M",["^1N",[["~$text"]]]]]],"^M","~$markdown.transformers/h2?","^6","markdown/transformers.cljc","^:",10,"^3P",["^1N",[["^3Y"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",44,"^3T",["^L",[null,"~$boolean","~$clj-nil"]],"^9",44,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y"]]]]]],"~$*formatter*",["^ ","^5",["^ ","^6","markdown/transformers.cljc","^7",34,"^8",20,"^9",34,"^:",31,"~:dynamic",true,"~:declared",true],"^M","~$markdown.transformers/*formatter*","^6","markdown/transformers.cljc","^:",31,"^8",1,"^42",true,"^7",34,"^43",true,"^9",34],"~$parse-yaml-metadata-headers",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",346,"^8",7,"^9",346,"^:",34,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]]],"^M","~$markdown.transformers/parse-yaml-metadata-headers","^6","markdown/transformers.cljc","^:",34,"^3P",["^1N",[["^3N"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",346,"^3T","~$ignore","^9",346,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]]],"~$paragraph",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",162,"^8",7,"^9",162,"^:",16,"^3L",["^1N",["^3M",["^1N",[["^3Y","~$state"]]]]]],"^M","~$markdown.transformers/paragraph","^6","markdown/transformers.cljc","^:",16,"^3P",["^1N",[["^3Y","^49"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",162,"^3T","^3U","^9",162,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"~$close-paragraph",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",157,"^8",7,"^9",157,"^:",22,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","~:keys",["~$next-line","^48"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/close-paragraph","^6","markdown/transformers.cljc","^:",22,"^3P",["^1N",[["^3Y","~$p__32880"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",157,"^3T","~$cljs.core/IVector","^9",157,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4=","^48"],"^1P","^49"]]]]]]],"~$blockquote-1",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",238,"^8",7,"^9",238,"^:",19,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["~$eof","~$code","~$codeblock","~$lists"],"^1P","^49"]]]]]],"~:doc","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"^M","~$markdown.transformers/blockquote-1","^6","markdown/transformers.cljc","^:",19,"^3P",["^1N",[["^3Y","~$p__32917"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",238,"^3T","^4@","^9",238,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4B","^4C","^4D","^4E"],"^1P","^49"]]]]]],"^4F","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"~$heading",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",70,"^8",7,"^9",70,"^:",14,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["~$buf","^4=","^4C","^4D","~$heading-anchors"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/heading","^6","markdown/transformers.cljc","^:",14,"^3P",["^1N",[["^3Y","~$p__32845"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",70,"^3T","^4@","^9",70,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4J","^4=","^4C","^4D","^4K"],"^1P","^49"]]]]]]],"~$superscript",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",53,"^8",7,"^9",53,"^:",18,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"^M","~$markdown.transformers/superscript","^6","markdown/transformers.cljc","^:",18,"^3P",["^1N",[["^3Y","^49"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",53,"^3T","^4@","^9",53,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"~$autourl-transformer",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",93,"^8",7,"^9",93,"^:",26,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","~$frozen-strings"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/autourl-transformer","^6","markdown/transformers.cljc","^:",26,"^3P",["^1N",[["^3Y","~$p__32858"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",93,"^3T","^4@","^9",93,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","^4Q"],"^1P","^49"]]]]]]],"~$h1?",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",41,"^8",7,"^9",41,"^:",10,"^3L",["^1N",["^3M",["^1N",[["^3Y"]]]]]],"^M","~$markdown.transformers/h1?","^6","markdown/transformers.cljc","^:",10,"^3P",["^1N",[["^3Y"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",41,"^3T",["^L",[null,"^3[","^40"]],"^9",41,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y"]]]]]],"^4D",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",185,"^8",7,"^9",185,"^:",16,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4D","~$codeblock-end","~$indented-code","^4=","^4E"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/codeblock","^6","markdown/transformers.cljc","^:",16,"^3P",["^1N",[["^3Y","~$p__32890"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",185,"^3T","^4@","^9",185,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4D","^4V","^4W","^4=","^4E"],"^1P","^49"]]]]]]],"~$flatten-metadata",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",315,"^8",7,"^9",315,"^:",23,"^3L",["^1N",["^3M",["^1N",[["~$metadata"]]]]],"^4F","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"^M","~$markdown.transformers/flatten-metadata","^6","markdown/transformers.cljc","^:",23,"^3P",["^1N",[["^4["]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",315,"^3T",["^L",["^3U","^40"]],"^9",315,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^4["]]]]],"^4F","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"~$hr",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",227,"^8",7,"^9",227,"^:",9,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"^M","~$markdown.transformers/hr","^6","markdown/transformers.cljc","^:",9,"^3P",["^1N",[["^3Y","^49"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",227,"^3T","^4@","^9",227,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"~$transformer-vector",["^ ","^M","~$markdown.transformers/transformer-vector","^6","markdown/transformers.cljc","^7",386,"^8",1,"^9",386,"^:",24,"^5",["^ ","^6","markdown/transformers.cljc","^7",386,"^8",6,"^9",386,"^:",24],"~:tag","^4@"],"~$autoemail-transformer",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",105,"^8",7,"^9",105,"^:",28,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"^M","~$markdown.transformers/autoemail-transformer","^6","markdown/transformers.cljc","^:",28,"^3P",["^1N",[["^3Y","^49"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",105,"^3T","^4@","^9",105,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"~$parse-metadata-line",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",301,"^8",7,"^9",301,"^:",26,"^3L",["^1N",["^3M",["^1N",[["~$line"]]]]],"^4F","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"^M","~$markdown.transformers/parse-metadata-line","^6","markdown/transformers.cljc","^:",26,"^3P",["^1N",[["^59"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",301,"^3T",["^L",[null,"^4@","^40"]],"^9",301,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^59"]]]]],"^4F","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"~$blockquote-2",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",270,"^8",7,"^9",270,"^:",19,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["~$blockquote-start","~$blockquote-end","~$blockquote-paragraph","^4E"],"^1P","^49"]]]]]],"^4F","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"^M","~$markdown.transformers/blockquote-2","^6","markdown/transformers.cljc","^:",19,"^3P",["^1N",[["^3Y","~$p__32920"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",270,"^3T","^4@","^9",270,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^5<","^5=","^5>","^4E"],"^1P","^49"]]]]]],"^4F","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"~$empty-line",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",47,"^8",7,"^9",47,"^:",17,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","^4D"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/empty-line","^6","markdown/transformers.cljc","^:",17,"^3P",["^1N",[["^3Y","~$p__32836"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",47,"^3T","^4@","^9",47,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","^4D"],"^1P","^49"]]]]]]],"~$open-paragraph",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",137,"^8",7,"^9",137,"^:",21,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4B","^4I","~$inline-heading","~$temp","^51","^4C","^4E","~$blockquote","^48","~$last-line-empty?"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/open-paragraph","^6","markdown/transformers.cljc","^:",21,"^3P",["^1N",[["^3Y","~$p__32873"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",137,"^3T","^4@","^9",137,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4B","^4I","^5E","^5F","^51","^4C","^4E","^5G","^48","^5H"],"^1P","^49"]]]]]]],"~$footer",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",287,"^8",7,"^9",287,"^:",13,"^3L",["^1N",["^3M",["^1N",[["~$footnotes"]]]]]],"^M","~$markdown.transformers/footer","^6","markdown/transformers.cljc","^:",13,"^3P",["^1N",[["^5L"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",287,"^3T","^W","^9",287,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^5L"]]]]]],"~$parse-edn-metadata-headers",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",360,"^8",7,"^9",360,"^:",33,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]]],"^M","~$markdown.transformers/parse-edn-metadata-headers","^6","markdown/transformers.cljc","^:",33,"^3P",["^1N",[["^3N"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",360,"^3T",["^L",["^3U","^40"]],"^9",360,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]]],"~$heading?",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",36,"^8",7,"^9",36,"^:",15,"^3L",["^1N",["^3M",["^1N",[["^3Y","~$type"]]]]]],"^M","~$markdown.transformers/heading?","^6","markdown/transformers.cljc","^:",15,"^3P",["^1N",[["^3Y","^5Q"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",36,"^3T",["^L",[null,"^3[","^40"]],"^9",36,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^5Q"]]]]]],"~$set-line-state",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",123,"^8",7,"^9",123,"^:",21,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^5E"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/set-line-state","^6","markdown/transformers.cljc","^:",21,"^3P",["^1N",[["^3Y","~$p__32868"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",123,"^3T","^4@","^9",123,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^5E"],"^1P","^49"]]]]]]],"~$clear-line-state",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",129,"^8",7,"^9",129,"^:",23,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"^M","~$markdown.transformers/clear-line-state","^6","markdown/transformers.cljc","^:",23,"^3P",["^1N",[["^3Y","^49"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",129,"^3T","^4@","^9",129,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y","^49"]]]]]],"^4C",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",165,"^8",7,"^9",165,"^:",11,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4B","^4E","^4C","^4D"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/code","^6","markdown/transformers.cljc","^:",11,"^3P",["^1N",[["^3Y","~$p__32886"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",165,"^3T","^4@","^9",165,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4B","^4E","^4C","^4D"],"^1P","^49"]]]]]]],"~$parse-metadata-headers",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",369,"^8",7,"^9",369,"^:",29,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]],"^4F","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats."],"^M","~$markdown.transformers/parse-metadata-headers","^6","markdown/transformers.cljc","^:",29,"^3P",["^1N",[["^3N"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",369,"^3T",["^L",[null,"^3U","^40"]],"^9",369,"^3V",1,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3N"]]]]],"^4F","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats."],"~$br",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",86,"^8",7,"^9",86,"^:",9,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","^4E"],"^1P","^49"]]]]]]],"^M","~$markdown.transformers/br","^6","markdown/transformers.cljc","^:",9,"^3P",["^1N",[["^3Y","~$p__32854"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",86,"^3T","^4@","^9",86,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^3Y",["^ ","^4<",["^4C","^4E"],"^1P","^49"]]]]]]],"~$paragraph-text",["^ ","^3K",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",132,"^8",7,"^9",132,"^:",21,"^3L",["^1N",["^3M",["^1N",[["^5H","^3Y"]]]]]],"^M","~$markdown.transformers/paragraph-text","^6","markdown/transformers.cljc","^:",21,"^3P",["^1N",[["^5H","^3Y"]]],"^3Q",null,"^3R",["^1N",[null,null]],"^8",1,"^3S",false,"^7",132,"^3T",["^L",[null,"^W"]],"^9",132,"^3V",2,"^3W",true,"^3L",["^1N",["^3M",["^1N",[["^5H","^3Y"]]]]]]],"^1L",["^ ","^S","^S","^Z","^Z","^[","^Z"],"~:cljs.analyzer/constants",["^ ","^11",["^L",["~:next-line","~:codeblock","~:indented-code","~:blockquote-paragraph","~:hr","~:temp","~:lists","~:buf","~:blockquote-end","~:clojurescript","~:inline-heading","~:else","~:last-line-empty?","~:default","~:frozen-strings","~:code-style","~:codeblock-end","~:skip-next-line?","~:code","~:blockquote-start","~:processed","~:heading-anchors","~:eof","~:paragraph","~:blockquote","~:heading"]],"~:order",["^6H","^67","^6:","^6O","^6C","^6=","^66","^6K","^6A","^6@","^6<","^6D","^6?","^6;","^6L","^6M","^6N","^6B","^68","^6F","^6G","^6E","^6>","^69","^6I","^6J"]],"^1R",["^ ","^12",["^L",[]]],"^1S",["^ "],"^1T",["^U","^S","^X","^Z","^Y","^V","^T","^10"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^26",[["^6S","~:static-fns"],true,["^6S","~:elide-asserts"],false,["^6S","~:optimize-constants"],null,["^6S","^1Y"],null,["^6S","~:external-config"],null,["^6S","~:tooling-config"],null,["^6S","~:emit-constants"],null,["^6S","~:load-tests"],null,["^6S","~:form-size-threshold"],null,["^6S","~:infer-externs"],true,["^6S","^1["],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6S","~:fn-invoke-direct"],null,["^6S","~:source-map"],"/dev/null"]]]