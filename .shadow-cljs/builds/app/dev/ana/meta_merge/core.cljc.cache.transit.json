["^ ","~:output",["^ ","~:js","goog.provide('meta_merge.core');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.set');\r\n/**\r\n * Returns the metadata of an object, or nil if the object cannot hold\r\n *   metadata.\r\n */\r\nmeta_merge.core.meta_STAR_ = (function meta_merge$core$meta_STAR_(obj){\r\nif((((!((obj == null))))?(((((obj.cljs$lang$protocol_mask$partition0$ & (131072))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$))))?true:(((!obj.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IMeta,obj):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IMeta,obj))){\r\nreturn cljs.core.meta(obj);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Returns an object of the same type and value as obj, with map m as its\r\n *   metadata if the object can hold metadata.\r\n */\r\nmeta_merge.core.with_meta_STAR_ = (function meta_merge$core$with_meta_STAR_(obj,m){\r\nif((((!((obj == null))))?(((((obj.cljs$lang$protocol_mask$partition0$ & (262144))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IWithMeta$))))?true:(((!obj.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj))){\r\nreturn cljs.core.with_meta(obj,m);\r\n} else {\r\nreturn obj;\r\n}\r\n});\r\n/**\r\n * Returns true if the object is marked as displaceable\r\n */\r\nmeta_merge.core.displace_QMARK_ = (function meta_merge$core$displace_QMARK_(obj){\r\nreturn new cljs.core.Keyword(null,\"displace\",\"displace\",-1153355602).cljs$core$IFn$_invoke$arity$1(meta_merge.core.meta_STAR_(obj));\r\n});\r\n/**\r\n * Returns true if the object is marked as replaceable\r\n */\r\nmeta_merge.core.replace_QMARK_ = (function meta_merge$core$replace_QMARK_(obj){\r\nreturn new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770).cljs$core$IFn$_invoke$arity$1(meta_merge.core.meta_STAR_(obj));\r\n});\r\n/**\r\n * Returns true if the object is marked as top-displaceable\r\n */\r\nmeta_merge.core.top_displace_QMARK_ = (function meta_merge$core$top_displace_QMARK_(obj){\r\nreturn new cljs.core.Keyword(null,\"top-displace\",\"top-displace\",-2094589019).cljs$core$IFn$_invoke$arity$1(meta_merge.core.meta_STAR_(obj));\r\n});\r\n/**\r\n * Returns true if either left has a higher priority than right or vice versa.\r\n */\r\nmeta_merge.core.different_priority_QMARK_ = (function meta_merge$core$different_priority_QMARK_(left,right){\r\nreturn cljs.core.boolean$((function (){var or__4131__auto__ = cljs.core.some(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(cljs.core.nil_QMARK_,meta_merge.core.displace_QMARK_,meta_merge.core.replace_QMARK_),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left,right], null));\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn meta_merge.core.top_displace_QMARK_(left);\r\n}\r\n})());\r\n});\r\nmeta_merge.core.remove_top_displace = (function meta_merge$core$remove_top_displace(obj){\r\nif(cljs.core.not(meta_merge.core.top_displace_QMARK_(obj))){\r\nreturn obj;\r\n} else {\r\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(obj,cljs.core.dissoc,new cljs.core.Keyword(null,\"top-displace\",\"top-displace\",-2094589019));\r\n}\r\n});\r\n/**\r\n * Picks the highest prioritized element of left and right and merge their\r\n *   metadata.\r\n */\r\nmeta_merge.core.pick_prioritized = (function meta_merge$core$pick_prioritized(left,right){\r\nif((left == null)){\r\nreturn right;\r\n} else {\r\nif((right == null)){\r\nreturn meta_merge.core.remove_top_displace(left);\r\n} else {\r\nif(cljs.core.truth_(meta_merge.core.top_displace_QMARK_(left))){\r\nreturn right;\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = meta_merge.core.displace_QMARK_(left);\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn meta_merge.core.displace_QMARK_(right);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn meta_merge.core.with_meta_STAR_(right,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([meta_merge.core.meta_STAR_(left),meta_merge.core.meta_STAR_(right)], 0)));\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4120__auto__ = meta_merge.core.replace_QMARK_(left);\r\nif(cljs.core.truth_(and__4120__auto__)){\r\nreturn meta_merge.core.replace_QMARK_(right);\r\n} else {\r\nreturn and__4120__auto__;\r\n}\r\n})())){\r\nreturn meta_merge.core.with_meta_STAR_(right,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([meta_merge.core.meta_STAR_(left),meta_merge.core.meta_STAR_(right)], 0)));\r\n} else {\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = meta_merge.core.displace_QMARK_(left);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn meta_merge.core.replace_QMARK_(right);\r\n}\r\n})())){\r\nreturn meta_merge.core.with_meta_STAR_(right,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(meta_merge.core.meta_STAR_(left),new cljs.core.Keyword(null,\"displace\",\"displace\",-1153355602)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(meta_merge.core.meta_STAR_(right),new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770))], 0)));\r\n} else {\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = meta_merge.core.replace_QMARK_(left);\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn meta_merge.core.displace_QMARK_(right);\r\n}\r\n})())){\r\nreturn meta_merge.core.with_meta_STAR_(left,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(meta_merge.core.meta_STAR_(right),new cljs.core.Keyword(null,\"displace\",\"displace\",-1153355602)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(meta_merge.core.meta_STAR_(left),new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770))], 0)));\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Recursively merge values based on the information in their metadata.\r\n */\r\nmeta_merge.core.meta_merge = (function meta_merge$core$meta_merge(var_args){\r\nvar G__32901 = arguments.length;\r\nswitch (G__32901) {\r\ncase 0:\r\nreturn meta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn meta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn meta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4751__auto__ = [];\r\nvar len__4730__auto___32930 = arguments.length;\r\nvar i__4731__auto___32931 = (0);\r\nwhile(true){\r\nif((i__4731__auto___32931 < len__4730__auto___32930)){\r\nargs_arr__4751__auto__.push((arguments[i__4731__auto___32931]));\r\n\r\nvar G__32932 = (i__4731__auto___32931 + (1));\r\ni__4731__auto___32931 = G__32932;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\r\nreturn meta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\r\n\r\n}\r\n});\r\n\r\nmeta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n});\r\n\r\nmeta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$1 = (function (left){\r\nreturn left;\r\n});\r\n\r\nmeta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$2 = (function (left,right){\r\nif(meta_merge.core.different_priority_QMARK_(left,right)){\r\nreturn meta_merge.core.pick_prioritized(left,right);\r\n} else {\r\nif(((cljs.core.map_QMARK_(left)) && (cljs.core.map_QMARK_(right)))){\r\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(meta_merge.core.meta_merge,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([left,right], 0));\r\n} else {\r\nif(((cljs.core.set_QMARK_(left)) && (cljs.core.set_QMARK_(right)))){\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(right,left);\r\n} else {\r\nif(((cljs.core.coll_QMARK_(left)) && (cljs.core.coll_QMARK_(right)))){\r\nif(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"prepend\",\"prepend\",342616040).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(left));\r\nif(cljs.core.truth_(or__4131__auto__)){\r\nreturn or__4131__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"prepend\",\"prepend\",342616040).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(right));\r\n}\r\n})())){\r\nreturn cljs.core.with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(left),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(right,left)),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.meta(left),cljs.core.select_keys(cljs.core.meta(right),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"displace\",\"displace\",-1153355602)], null))], 0)));\r\n} else {\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(left),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(left,right));\r\n}\r\n} else {\r\nreturn right;\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\n\r\nmeta_merge.core.meta_merge.cljs$core$IFn$_invoke$arity$variadic = (function (left,right,more){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(meta_merge.core.meta_merge,left,cljs.core.cons(right,more));\r\n});\r\n\r\n/** @this {Function} */\r\nmeta_merge.core.meta_merge.cljs$lang$applyTo = (function (seq32898){\r\nvar G__32899 = cljs.core.first(seq32898);\r\nvar seq32898__$1 = cljs.core.next(seq32898);\r\nvar G__32900 = cljs.core.first(seq32898__$1);\r\nvar seq32898__$2 = cljs.core.next(seq32898__$1);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32899,G__32900,seq32898__$2);\r\n});\r\n\r\nmeta_merge.core.meta_merge.cljs$lang$maxFixedArity = (2);\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","meta_merge/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$meta-merge.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^S","~$set","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^N",["^10",["^X",["^S","~:as","^T"]]]]],"~:flags",["^ ","^X",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","meta_merge/core.cljc"],"~:compiled-at",1574163718656,"~:resource-name","meta_merge/core.cljc","~:warnings",[],"~:source","(ns meta-merge.core\n  (:require [clojure.set :as set]))\n\n(defn- meta*\n  \"Returns the metadata of an object, or nil if the object cannot hold\n  metadata.\"\n  [obj]\n  (if #?(:clj (instance? clojure.lang.IObj obj)\n         :cljs (satisfies? IMeta obj))\n    (meta obj)\n    nil))\n\n(defn- with-meta*\n  \"Returns an object of the same type and value as obj, with map m as its\n  metadata if the object can hold metadata.\"\n  [obj m]\n  (if #?(:clj (instance? clojure.lang.IObj obj)\n         :cljs (satisfies? IWithMeta obj))\n    (with-meta obj m)\n    obj))\n\n(defn- displace?\n  \"Returns true if the object is marked as displaceable\"\n  [obj]\n  (-> obj meta* :displace))\n\n(defn- replace?\n  \"Returns true if the object is marked as replaceable\"\n  [obj]\n  (-> obj meta* :replace))\n\n(defn- top-displace?\n  \"Returns true if the object is marked as top-displaceable\"\n  [obj]\n  (-> obj meta* :top-displace))\n\n(defn- different-priority?\n  \"Returns true if either left has a higher priority than right or vice versa.\"\n  [left right]\n  (boolean\n   (or (some (some-fn nil? displace? replace?) [left right])\n       (top-displace? left))))\n\n(defn- remove-top-displace [obj]\n  (if-not (top-displace? obj)\n    obj\n    (vary-meta obj dissoc :top-displace)))\n\n(defn- pick-prioritized\n  \"Picks the highest prioritized element of left and right and merge their\n  metadata.\"\n  [left right]\n  (cond (nil? left) right\n        (nil? right) (remove-top-displace left)\n\n        (top-displace? left) right\n\n        (and (displace? left)   ;; Pick the rightmost\n             (displace? right)) ;; if both are marked as displaceable\n        (with-meta* right\n          (merge (meta* left) (meta* right)))\n\n        (and (replace? left)    ;; Pick the rightmost\n             (replace? right))  ;; if both are marked as replaceable\n        (with-meta* right\n          (merge (meta* left) (meta* right)))\n\n        (or (displace? left)\n            (replace? right))\n        (with-meta* right\n          (merge (-> left meta* (dissoc :displace))\n                 (-> right meta* (dissoc :replace))))\n\n        (or (replace? left)\n            (displace? right))\n        (with-meta* left\n          (merge (-> right meta* (dissoc :displace))\n                 (-> left meta* (dissoc :replace))))))\n\n(defn meta-merge\n  \"Recursively merge values based on the information in their metadata.\"\n  ([] {})\n  ([left] left)\n  ([left right]\n   (cond (different-priority? left right)\n         (pick-prioritized left right)\n\n         (and (map? left) (map? right))\n         (merge-with meta-merge left right)\n\n         (and (set? left) (set? right))\n         (set/union right left)\n\n         (and (coll? left) (coll? right))\n         (if (or (-> left meta :prepend)\n                 (-> right meta :prepend))\n           (-> (into (empty left) (concat right left))\n             (with-meta (merge (meta left)\n                               (select-keys (meta right) [:displace]))))\n           (into (empty left) (concat left right)))\n\n         :else right))\n  ([left right & more]\n   (reduce meta-merge left (cons right more))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["meta-merge.core/meta*","obj","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IMeta","cljs.core/meta","meta-merge.core/with-meta*","m","cljs.core/IWithMeta","cljs.core/with-meta","meta-merge.core/displace?","meta-merge.core/replace?","meta-merge.core/top-displace?","meta-merge.core/different-priority?","left","right","cljs.core/boolean","or__4131__auto__","cljs.core/some","cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3","cljs.core/nil?","meta-merge.core/remove-top-displace","cljs.core/not","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","meta-merge.core/pick-prioritized","and__4120__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","var_args","G__32901","meta-merge.core/meta-merge","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq32898","G__32899","cljs.core/first","cljs.core/next","G__32900","self__4717__auto__","cljs.core/map?","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set?","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core/coll?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","more","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/cons"]]],"~:cache-keys",["~#cmap",[["^17","goog/math/math.js"],[1567356087625,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I"]]],["^17","goog/debug/error.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/dom/nodetype.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/object/object.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^17","goog/math/long.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I","~$goog.reflect"]]],["^17","goog/functions/functions.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/structs/map.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^17","goog/asserts/asserts.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"]]],["^17","goog/uri/uri.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/base.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",[]]],["^17","goog/structs/structs.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1N"]]],["^17","meta_merge/core.cljc"],[1567356149981,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U","^S"]]],["^17","goog/string/string.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/reflect/reflect.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/string/stringbuffer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/iter/iter.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1N","^1H","~$goog.Uri","~$goog.string.StringBuffer"]]],["^17","goog/math/integer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","clojure/set.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U"]]],["^17","goog/uri/utils.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","meta_merge/core.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^L",["^X"]],"^Y",null,"~:defs",["^ ","~$displace?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",22,"^8",8,"^9",22,"^:",17,"~:private",true,"~:arglists",["^10",["~$quote",["^10",[["~$obj"]]]]],"~:doc","Returns true if the object is marked as displaceable"],"^2O",true,"^M","~$meta-merge.core/displace?","^6","meta_merge/core.cljc","^:",17,"~:method-params",["^10",[["^2R"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",22,"~:ret-tag","~$any","^9",22,"~:max-fixed-arity",1,"~:fn-var",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns true if the object is marked as displaceable"],"~$with-meta*",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",13,"^8",8,"^9",13,"^:",18,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^2R","~$m"]]]]],"^2S","Returns an object of the same type and value as obj, with map m as its\n  metadata if the object can hold metadata."],"^2O",true,"^M","~$meta-merge.core/with-meta*","^6","meta_merge/core.cljc","^:",18,"^2U",["^10",[["^2R","~$m"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",13,"^2Y",["^L",[null,"~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^9",13,"^2[",2,"^30",true,"^2P",["^10",["^2Q",["^10",[["^2R","~$m"]]]]],"^2S","Returns an object of the same type and value as obj, with map m as its\n  metadata if the object can hold metadata."],"~$meta-merge",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",80,"^8",7,"^9",80,"^:",17,"^2P",["^10",["^2Q",["^10",[[],["~$left"],["^37","~$right"],["^37","^38","~$&","~$more"]]]]],"^2S","Recursively merge values based on the information in their metadata.","~:top-fn",["^ ","^2X",true,"~:fixed-arity",2,"^2[",2,"^2U",["^10",[[],["^37"],["^37","^38"]]],"^2P",["^10",[[],["^37"],["^37","^38"],["^37","^38","~$&","^39"]]],"^2W",["^10",[null,null,null,null]]]],"^M","~$meta-merge.core/meta-merge","^6","meta_merge/core.cljc","^:",17,"^3:",["^ ","^2X",true,"^3;",2,"^2[",2,"^2U",["^10",[[],["^37"],["^37","^38"]]],"^2P",["^10",[[],["^37"],["^37","^38"],["^37","^38","~$&","^39"]]],"^2W",["^10",[null,null,null,null]]],"^2U",["^10",[[],["^37"],["^37","^38"]]],"^2V",null,"^3;",2,"^2W",["^10",[null,null,null,null]],"^8",1,"^2X",true,"~:methods",[["^ ","^3;",0,"^2X",false,"~:tag","~$cljs.core/IMap"],["^ ","^3;",1,"^2X",false],["^ ","^3;",2,"^2X",false,"^3>",["^L",[null,"^33","^2Z","^34","^35"]]],["^ ","^3;",2,"^2X",true,"^3>",["^L",[null,"^2Z"]]]],"^7",80,"^9",80,"^2[",2,"^30",true,"^2P",["^10",[[],["^37"],["^37","^38"],["^37","^38","~$&","^39"]]],"^2S","Recursively merge values based on the information in their metadata."],"~$meta*",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",4,"^8",8,"^9",4,"^:",13,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns the metadata of an object, or nil if the object cannot hold\n  metadata."],"^2O",true,"^M","~$meta-merge.core/meta*","^6","meta_merge/core.cljc","^:",13,"^2U",["^10",[["^2R"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",4,"^2Y",["^L",["~$clj-or-nil","^35"]],"^9",4,"^2[",1,"^30",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns the metadata of an object, or nil if the object cannot hold\n  metadata."],"~$replace?",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",27,"^8",8,"^9",27,"^:",16,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns true if the object is marked as replaceable"],"^2O",true,"^M","~$meta-merge.core/replace?","^6","meta_merge/core.cljc","^:",16,"^2U",["^10",[["^2R"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",27,"^2Y","^2Z","^9",27,"^2[",1,"^30",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns true if the object is marked as replaceable"],"~$remove-top-displace",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",44,"^8",8,"^9",44,"^:",27,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]]],"^2O",true,"^M","~$meta-merge.core/remove-top-displace","^6","meta_merge/core.cljc","^:",27,"^2U",["^10",[["^2R"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",44,"^2Y",["^L",[null,"^33","^34","^35"]],"^9",44,"^2[",1,"^30",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]]],"~$different-priority?",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",37,"^8",8,"^9",37,"^:",27,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^37","^38"]]]]],"^2S","Returns true if either left has a higher priority than right or vice versa."],"^2O",true,"^M","~$meta-merge.core/different-priority?","^6","meta_merge/core.cljc","^:",27,"^2U",["^10",[["^37","^38"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",37,"^2Y","~$boolean","^9",37,"^2[",2,"^30",true,"^2P",["^10",["^2Q",["^10",[["^37","^38"]]]]],"^2S","Returns true if either left has a higher priority than right or vice versa."],"~$pick-prioritized",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",49,"^8",8,"^9",49,"^:",24,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^37","^38"]]]]],"^2S","Picks the highest prioritized element of left and right and merge their\n  metadata."],"^2O",true,"^M","~$meta-merge.core/pick-prioritized","^6","meta_merge/core.cljc","^:",24,"^2U",["^10",[["^37","^38"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",49,"^2Y",["^L",[null,"^33","^34","^35"]],"^9",49,"^2[",2,"^30",true,"^2P",["^10",["^2Q",["^10",[["^37","^38"]]]]],"^2S","Picks the highest prioritized element of left and right and merge their\n  metadata."],"~$top-displace?",["^ ","^2N",null,"^5",["^ ","^6","meta_merge/core.cljc","^7",32,"^8",8,"^9",32,"^:",21,"^2O",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns true if the object is marked as top-displaceable"],"^2O",true,"^M","~$meta-merge.core/top-displace?","^6","meta_merge/core.cljc","^:",21,"^2U",["^10",[["^2R"]]],"^2V",null,"^2W",["^10",[null,null]],"^8",1,"^2X",false,"^7",32,"^2Y","^2Z","^9",32,"^2[",1,"^30",true,"^2P",["^10",["^2Q",["^10",[["^2R"]]]]],"^2S","Returns true if the object is marked as top-displaceable"]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^L",["~:top-displace","~:else","~:replace","~:prepend","~:displace"]],"~:order",["^3S","^3Q","^3O","^3R","^3P"]],"^13",["^ ","^X",["^L",[]]],"^14",["^ "],"^15",["^V","^U","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1C",[["^3W","~:static-fns"],true,["^3W","~:elide-asserts"],false,["^3W","~:optimize-constants"],null,["^3W","^1:"],null,["^3W","~:external-config"],null,["^3W","~:tooling-config"],null,["^3W","~:emit-constants"],null,["^3W","~:load-tests"],null,["^3W","~:form-size-threshold"],null,["^3W","~:infer-externs"],true,["^3W","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3W","~:fn-invoke-direct"],null,["^3W","~:source-map"],"/dev/null"]]]