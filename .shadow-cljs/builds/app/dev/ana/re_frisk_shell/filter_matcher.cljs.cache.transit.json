["^ ","~:output",["^ ","~:js","goog.provide('re_frisk_shell.filter_matcher');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\nre_frisk_shell.filter_matcher.match_expr = (function re_frisk_shell$filter_matcher$match_expr(f,p){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,p);\r\n});\r\nre_frisk_shell.filter_matcher.match_string_prefix = (function re_frisk_shell$filter_matcher$match_string_prefix(f,p){\r\nreturn ((typeof p === 'string') && (clojure.string.starts_with_QMARK_(p,f)));\r\n});\r\nre_frisk_shell.filter_matcher.match_free = (function re_frisk_shell$filter_matcher$match_free(f,p){\r\nreturn clojure.string.includes_QMARK_(cljs.core.str.cljs$core$IFn$_invoke$arity$1(p),f);\r\n});\r\nre_frisk_shell.filter_matcher.match_value = (function re_frisk_shell$filter_matcher$match_value(f,p){\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"expr\",\"expr\",745722291))){\r\nreturn re_frisk_shell.filter_matcher.match_expr(new cljs.core.Keyword(null,\"expr\",\"expr\",745722291).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"string-prefix\",\"string-prefix\",2091851734))){\r\nreturn re_frisk_shell.filter_matcher.match_string_prefix(new cljs.core.Keyword(null,\"string-prefix\",\"string-prefix\",2091851734).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"free\",\"free\",801364328))){\r\nreturn re_frisk_shell.filter_matcher.match_free(new cljs.core.Keyword(null,\"free\",\"free\",801364328).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nthrow (new Error([\"Unknown kind of filter-path: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(f)].join('')));\r\n\r\n}\r\n}\r\n}\r\n});\r\nre_frisk_shell.filter_matcher.match = (function re_frisk_shell$filter_matcher$match(filter,path){\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(filter)){\r\nreturn null;\r\n} else {\r\nif(cljs.core.empty_QMARK_(path)){\r\nreturn null;\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(filter),(1))){\r\nreturn re_frisk_shell.filter_matcher.match_value(cljs.core.first(filter),cljs.core.last(path));\r\n} else {\r\nif(re_frisk_shell.filter_matcher.match_value(cljs.core.first(filter),cljs.core.first(path))){\r\nvar G__31272 = cljs.core.rest(filter);\r\nvar G__31273 = cljs.core.rest(path);\r\nfilter = G__31272;\r\npath = G__31273;\r\ncontinue;\r\n} else {\r\nvar G__31274 = filter;\r\nvar G__31275 = cljs.core.rest(path);\r\nfilter = G__31274;\r\npath = G__31275;\r\ncontinue;\r\n}\r\n\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frisk_shell/filter_matcher.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frisk-shell.filter-matcher","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^S","~$str","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^N",["^10",["^X",["^S","~:as","^T"]]]]],"~:flags",["^ ","^X",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","re_frisk_shell/filter_matcher.cljs"],"~:compiled-at",1574163717541,"~:resource-name","re_frisk_shell/filter_matcher.cljs","~:warnings",[],"~:source","(ns re-frisk-shell.filter-matcher\n  (:require [clojure.string :as str]))\n\n(defn- match-expr [f p]\n  (= f p))\n\n(defn- match-string-prefix [f p]\n  (and (string? p) (str/starts-with? p f)))\n\n(defn- match-free [f p]\n  (str/includes? (str p) f))\n\n(defn- match-value [f p]\n  (cond (contains? f :expr) (match-expr (:expr f) p)\n        (contains? f :string-prefix) (match-string-prefix (:string-prefix f) p)\n        (contains? f :free) (match-free (:free f) p)\n        :else (throw (js/Error. (str \"Unknown kind of filter-path: \" f)))))\n\n(defn match [filter path]\n  (cond (empty? filter) nil\n        (empty? path) nil\n        (= (count filter) 1) (match-value (first filter) (last path))\n        :else (if (match-value (first filter) (first path))\n                (recur (rest filter) (rest path))\n                (recur filter (rest path)))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAGA,AAAA,AAAOA,AAAYC,AAAEC;AAArB,AACE,AAACC,AAAEF,AAAEC;;AAEP,AAAA,AAAOE,AAAqBH,AAAEC;AAA9B,AACE,AAAK,AAASA,AAAG,AAACG,AAAiBH,AAAED;;AAEvC,AAAA,AAAOK,AAAYL,AAAEC;AAArB,AACE,AAACK,AAAc,AAAKL,AAAGD;;AAEzB,AAAA,AAAOO,AAAaP,AAAEC;AAAtB,AACE,AAAM,AAAA,AAACO,AAAUR;AAAS,AAACD,AAAW,AAAA,AAAOC,AAAGC;;AAAhD,AACM,AAAA,AAACO,AAAUR;AAAkB,AAACG,AAAoB,AAAA,AAAgBH,AAAGC;;AAD3E,AAEM,AAAA,AAACO,AAAUR;AAAS,AAACK,AAAW,AAAA,AAAOL,AAAGC;;AAFhD,AAGY,AAAO,AAAAQ,AAAW,AAAA,AAAqCT;;;;;;AAErE,AAAA,AAAMU,AAAOC,AAAOC;;AAApB,AACE,AAAM,AAACC,AAAOF;AAAd;;AAAA,AACM,AAACE,AAAOD;AADd;;AAAA,AAEM,AAAA,AAACV,AAAE,AAACY,AAAMH;AAAW,AAACJ,AAAY,AAACQ,AAAMJ,AAAQ,AAACK,AAAKJ;;AAF7D,AAGY,AAAI,AAACL,AAAY,AAACQ,AAAMJ,AAAQ,AAACI,AAAMH;AACrC,AAAO,AAACK,AAAKN;AAAQ,AAACM,AAAKL;;;;;AAC3B,AAAOD;AAAO,AAACM,AAAKL","names",["re-frisk-shell.filter-matcher/match-expr","f","p","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re-frisk-shell.filter-matcher/match-string-prefix","clojure.string/starts-with?","re-frisk-shell.filter-matcher/match-free","clojure.string/includes?","re-frisk-shell.filter-matcher/match-value","cljs.core/contains?","js/Error","re-frisk-shell.filter-matcher/match","filter","path","cljs.core/empty?","cljs.core/count","cljs.core/first","cljs.core/last","cljs.core/rest"]]],"~:cache-keys",["~#cmap",[["^17","goog/math/math.js"],[1567356087625,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I"]]],["^17","goog/debug/error.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/dom/nodetype.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/object/object.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],"~:SHADOW-TIMESTAMP",[1574163601000,1567262080000],["^17","goog/math/long.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1I","~$goog.reflect"]]],["^17","goog/functions/functions.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/structs/map.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"]]],["^17","goog/asserts/asserts.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"]]],["^17","goog/uri/uri.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/base.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",[]]],["^17","goog/structs/structs.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1N"]]],["^17","clojure/string.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U","^1Q","~$goog.string.StringBuffer"]]],["^17","re_frisk_shell/filter_matcher.cljs"],[1574085174347,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^U","^S"]]],["^17","goog/string/string.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/reflect/reflect.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/string/stringbuffer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/iter/iter.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1567262080081,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1N","^1H","~$goog.Uri","^1W"]]],["^17","goog/math/integer.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V"]]],["^17","goog/uri/utils.js"],[1567356087625,"^1D",["^ ","^1E",null,"^1F",["^L",[]],"^1G",["^V","^1H","^1I","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1567262076000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1567262098000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1567262080000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1567262077000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1568573460000,"jar:file:/C:/Users/jacqu/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1567262080000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",1,"^8",5,"^9",1,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^L",["^X"]],"~:shadow/js-access-global",["^L",["Error"]],"^Y",null,"~:defs",["^ ","~$match-expr",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",4,"^8",8,"^9",4,"^:",18,"~:private",true,"~:arglists",["^10",["~$quote",["^10",[["~$f","~$p"]]]]]],"^2P",true,"^M","~$re-frisk-shell.filter-matcher/match-expr","^6","re_frisk_shell/filter_matcher.cljs","^:",18,"~:method-params",["^10",[["~$f","~$p"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",4,"~:ret-tag","~$boolean","^9",4,"~:max-fixed-arity",2,"~:fn-var",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"~$match-string-prefix",["^ ","^2O",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",7,"^8",8,"^9",7,"^:",27,"^2P",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"^2P",true,"^M","~$re-frisk-shell.filter-matcher/match-string-prefix","^6","re_frisk_shell/filter_matcher.cljs","^:",27,"^2T",["^10",[["~$f","~$p"]]],"^2U",null,"^2V",["^10",[null,null]],"^8",1,"^2W",false,"^7",7,"^2X","^2Y","^9",7,"^2Z",2,"^2[",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"~$match-free",["^ ","^2O",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",10,"^8",8,"^9",10,"^:",18,"^2P",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"^2P",true,"^M","~$re-frisk-shell.filter-matcher/match-free","^6","re_frisk_shell/filter_matcher.cljs","^:",18,"^2T",["^10",[["~$f","~$p"]]],"^2U",null,"^2V",["^10",[null,null]],"^8",1,"^2W",false,"^7",10,"^2X","^2Y","^9",10,"^2Z",2,"^2[",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"~$match-value",["^ ","^2O",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",13,"^8",8,"^9",13,"^:",19,"^2P",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"^2P",true,"^M","~$re-frisk-shell.filter-matcher/match-value","^6","re_frisk_shell/filter_matcher.cljs","^:",19,"^2T",["^10",[["~$f","~$p"]]],"^2U",null,"^2V",["^10",[null,null]],"^8",1,"^2W",false,"^7",13,"^2X","^2Y","^9",13,"^2Z",2,"^2[",true,"^2Q",["^10",["^2R",["^10",[["~$f","~$p"]]]]]],"~$match",["^ ","^2O",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",19,"^8",7,"^9",19,"^:",12,"^2Q",["^10",["^2R",["^10",[["~$filter","~$path"]]]]]],"^M","~$re-frisk-shell.filter-matcher/match","^6","re_frisk_shell/filter_matcher.cljs","^:",12,"^2T",["^10",[["^37","^38"]]],"^2U",null,"^2V",["^10",[null,null]],"^8",1,"^2W",false,"^7",19,"^2X",["^L",["^2Y","~$clj-nil"]],"^9",19,"^2Z",2,"^2[",true,"^2Q",["^10",["^2R",["^10",[["^37","^38"]]]]]]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^L",["~:else","~:free","~:expr","~:string-prefix"]],"~:order",["^3>","^3?","^3=","^3<"]],"^13",["^ ","^X",["^L",[]]],"^14",["^ "],"^15",["^V","^U","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1C",[["^3C","~:static-fns"],true,["^3C","~:elide-asserts"],false,["^3C","~:optimize-constants"],null,["^3C","^1:"],null,["^3C","~:external-config"],null,["^3C","~:tooling-config"],null,["^3C","~:emit-constants"],null,["^3C","~:load-tests"],null,["^3C","~:form-size-threshold"],null,["^3C","~:infer-externs"],true,["^3C","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3C","~:fn-invoke-direct"],null,["^3C","~:source-map"],"/dev/null"]]]