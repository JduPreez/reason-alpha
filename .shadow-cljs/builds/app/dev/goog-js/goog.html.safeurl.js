["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/html/safeurl.js"],"~:js","goog.provide(\"goog.html.SafeUrl\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.fs.url\");\ngoog.require(\"goog.html.TrustedResourceUrl\");\ngoog.require(\"goog.i18n.bidi.Dir\");\ngoog.require(\"goog.i18n.bidi.DirectionalString\");\ngoog.require(\"goog.string\");\ngoog.require(\"goog.string.Const\");\ngoog.require(\"goog.string.TypedString\");\n/**\n * @final\n * @struct\n * @constructor\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeUrl = function() {\n  /** @private @type {string} */ this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = \"\";\n  /** @private @const @type {!Object} */ this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n/** @const @type {string} */ goog.html.SafeUrl.INNOCUOUS_STRING = \"about:invalid#zClosurez\";\n/** @const @override */ goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;\n/** @override */ goog.html.SafeUrl.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n};\n/** @const @override */ goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;\n/** @override */ goog.html.SafeUrl.prototype.getDirection = function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\nif (goog.DEBUG) {\n  /** @override */ goog.html.SafeUrl.prototype.toString = function() {\n    return \"SafeUrl{\" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + \"}\";\n  };\n}\n/**\n * @param {!goog.html.SafeUrl} safeUrl\n * @return {string}\n */\ngoog.html.SafeUrl.unwrap = function(safeUrl) {\n  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n  } else {\n    goog.asserts.fail(\"expected object of type SafeUrl, got '\" + safeUrl + \"' of type \" + goog.typeOf(safeUrl));\n    return \"type_error:SafeUrl\";\n  }\n};\n/**\n * @param {!goog.string.Const} url\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromConstant = function(url) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));\n};\n/** @private @const */ goog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp(\"^(?:audio/(?:3gpp|3gpp2|aac|midi|mp4|mpeg|ogg|x-m4a|x-wav|webm)|\" + \"image/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|\" + \"text/csv|\" + \"video/(?:mpeg|mp4|ogg|webm))$\", \"i\");\n/**\n * @param {!Blob} blob\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromBlob = function(blob) {\n  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n/** @private @const */ goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {string} dataUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromDataUrl = function(dataUrl) {\n  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);\n  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);\n};\n/**\n * @param {string} telUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromTelUrl = function(telUrl) {\n  if (!goog.string.caseInsensitiveStartsWith(telUrl, \"tel:\")) {\n    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(telUrl);\n};\n/**\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));\n};\n/** @private @const @type {!RegExp} */ goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\n/**\n * @param {(string|!goog.string.TypedString)} url\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.sanitize = function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else {\n    if (url.implementsGoogStringTypedString) {\n      url = url.getTypedStringValue();\n    } else {\n      url = String(url);\n    }\n  }\n  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n/**\n * @param {(string|!goog.string.TypedString)} url\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.sanitizeAssertUnchanged = function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else {\n    if (url.implementsGoogStringTypedString) {\n      url = url.getTypedStringValue();\n    } else {\n      url = String(url);\n    }\n  }\n  if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n/** @private @const @type {!Object} */ goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n/**\n * @package\n * @param {string} url\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {\n  var safeUrl = new goog.html.SafeUrl;\n  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;\n  return safeUrl;\n};\n/** @const @type {!goog.html.SafeUrl} */ goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\"about:blank\");\n","~:source","// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.SafeUrl');\n\ngoog.require('goog.asserts');\ngoog.require('goog.fs.url');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.i18n.bidi.Dir');\ngoog.require('goog.i18n.bidi.DirectionalString');\ngoog.require('goog.string');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * A string that is safe to use in URL context in DOM APIs and HTML documents.\n *\n * A SafeUrl is a string-like object that carries the security type contract\n * that its value as a string will not cause untrusted script execution\n * when evaluated as a hyperlink URL in a browser.\n *\n * Values of this type are guaranteed to be safe to use in URL/hyperlink\n * contexts, such as assignment to URL-valued DOM properties, in the sense that\n * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,\n * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,\n * inside a href attribute). However, appropriate HTML-escaping must still be\n * applied.\n *\n * Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's\n * contract does not guarantee that instances are safe to interpolate into HTML\n * without appropriate escaping.\n *\n * Note also that this type's contract does not imply any guarantees regarding\n * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>\n * safe to use in a context where the referred-to resource is interpreted as\n * trusted code, e.g., as the src of a script tag.\n *\n * Instances of this type must be created via the factory methods\n * ({@code goog.html.SafeUrl.fromConstant}, {@code goog.html.SafeUrl.sanitize}),\n * etc and not by invoking its constructor.  The constructor intentionally\n * takes no parameters and the type is immutable; hence only a default instance\n * corresponding to the empty string can be obtained via constructor invocation.\n *\n * @see goog.html.SafeUrl#fromConstant\n * @see goog.html.SafeUrl#from\n * @see goog.html.SafeUrl#sanitize\n * @constructor\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeUrl = function() {\n  /**\n   * The contained value of this SafeUrl.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeUrl#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\n      goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * The innocuous string generated by goog.html.SafeUrl.sanitize when passed\n * an unsafe URL.\n *\n * about:invalid is registered in\n * http://www.w3.org/TR/css3-values/#about-invalid.\n * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to\n * contain a fragment, which is not to be considered when determining if an\n * about URL is well-known.\n *\n * Using about:invalid seems preferable to using a fixed data URL, since\n * browsers might choose to not report CSP violations on it, as legitimate\n * CSS function calls to attr() can result in this URL being produced. It is\n * also a standard URL which matches exactly the semantics we need:\n * \"The about:invalid URI references a non-existent document with a generic\n * error condition. It can be used when a URI is necessary, but the default\n * value shouldn't be resolveable as any type of document\".\n *\n * @const {string}\n */\ngoog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this SafeUrl's value a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap} instead of this\n * method. If in doubt, assume that it's security relevant. In particular, note\n * that goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type. For example:\n *\n * <pre>\n * var fakeSafeHtml = new String('fake');\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n * // goog.html.SafeHtml.\n * </pre>\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @see goog.html.SafeUrl#unwrap\n * @override\n */\ngoog.html.SafeUrl.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;\n\n\n/**\n * Returns this URLs directionality, which is always {@code LTR}.\n * @override\n */\ngoog.html.SafeUrl.prototype.getDirection = function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeUrl, use\n   * {@code goog.html.SafeUrl.unwrap}.\n   *\n   * @see goog.html.SafeUrl#unwrap\n   * @override\n   */\n  goog.html.SafeUrl.prototype.toString = function() {\n    return 'SafeUrl{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +\n        '}';\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a SafeUrl\n * object, and returns its value.\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @param {!goog.html.SafeUrl} safeUrl The object to extract from.\n * @return {string} The SafeUrl object's contained string, unless the run-time\n *     type check fails. In that case, {@code unwrap} returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     {@code goog.asserts.AssertionError}.\n */\ngoog.html.SafeUrl.unwrap = function(safeUrl) {\n  // Perform additional Run-time type-checking to ensure that safeUrl is indeed\n  // an instance of the expected type.  This provides some additional protection\n  // against security bugs due to application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \"Faking\" an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeUrl instanceof goog.html.SafeUrl &&\n      safeUrl.constructor === goog.html.SafeUrl &&\n      safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\n          goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n  } else {\n    goog.asserts.fail('expected object of type SafeUrl, got \\'' +\n        safeUrl + '\\' of type ' + goog.typeOf(safeUrl));\n    return 'type_error:SafeUrl';\n  }\n};\n\n\n/**\n * Creates a SafeUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *         create a SafeUrl.\n * @return {!goog.html.SafeUrl} A SafeUrl object initialized to {@code url}.\n */\ngoog.html.SafeUrl.fromConstant = function(url) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.string.Const.unwrap(url));\n};\n\n\n/**\n * A pattern that matches Blob or data types that can have SafeUrls created\n * from URL.createObjectURL(blob) or via a data: URI.\n * @const\n * @private\n */\ngoog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp(\n    '^(?:audio/(?:3gpp|3gpp2|aac|midi|mp4|mpeg|ogg|x-m4a|x-wav|webm)|' +\n        'image/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|' +\n        'text/csv|' +\n        'video/(?:mpeg|mp4|ogg|webm))$',\n    'i');\n\n\n/**\n * Creates a SafeUrl wrapping a blob URL for the given {@code blob}.\n *\n * The blob URL is created with {@code URL.createObjectURL}. If the MIME type\n * for {@code blob} is not of a known safe audio, image or video MIME type,\n * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.\n *\n * @see http://www.w3.org/TR/FileAPI/#url\n * @param {!Blob} blob\n * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped\n *   as a SafeUrl.\n */\ngoog.html.SafeUrl.fromBlob = function(blob) {\n  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ?\n      goog.fs.url.createObjectUrl(blob) :\n      goog.html.SafeUrl.INNOCUOUS_STRING;\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Matches a base-64 data URL, with the first match group being the MIME type.\n * @const\n * @private\n */\ngoog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\\/]+=*$/i;\n\n\n/**\n * Creates a SafeUrl wrapping a data: URL, after validating it matches a\n * known-safe audio, image or video MIME type.\n *\n * @param {string} dataUrl A valid base64 data URL with one of the whitelisted\n *     audio, image or video MIME types.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromDataUrl = function(dataUrl) {\n  // There's a slight risk here that a browser sniffs the content type if it\n  // doesn't know the MIME type and executes HTML within the data: URL. For this\n  // to cause XSS it would also have to execute the HTML in the same origin\n  // of the page with the link. It seems unlikely that both of these will\n  // happen, particularly in not really old IEs.\n  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);\n  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);\n};\n\n\n/**\n * Creates a SafeUrl wrapping a tel: URL.\n *\n * @param {string} telUrl A tel URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromTelUrl = function(telUrl) {\n  // There's a risk that a tel: URL could immediately place a call once\n  // clicked, without requiring user confirmation. For that reason it is\n  // handled in this separate function.\n  if (!goog.string.caseInsensitiveStartsWith(telUrl, 'tel:')) {\n    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      telUrl);\n};\n\n\n/**\n * Creates a SafeUrl from TrustedResourceUrl. This is safe because\n * TrustedResourceUrl is more tightly restricted than SafeUrl.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));\n};\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that satisfy\n * the SafeUrl contract.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * @private\n * @const {!RegExp}\n */\ngoog.html.SAFE_URL_PATTERN_ =\n    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\n\n\n/**\n * Creates a SafeUrl object from {@code url}. If {@code url} is a\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs.\n *\n * {@code url} may be a URL with the http, https, mailto or ftp scheme,\n * or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitize = function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else if (url.implementsGoogStringTypedString) {\n    url = url.getTypedStringValue();\n  } else {\n    url = String(url);\n  }\n  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n/**\n * Creates a SafeUrl object from {@code url}. If {@code url} is a\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs.\n *\n * {@code url} may be a URL with the http, https, mailto or ftp scheme,\n * or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * This function asserts (using goog.asserts) that the URL matches this pattern.\n * If it does not, in addition to failing the assert, an innocous URL will be\n * returned.\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitizeAssertUnchanged = function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else if (url.implementsGoogStringTypedString) {\n    url = url.getTypedStringValue();\n  } else {\n    url = String(url);\n  }\n  if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n\n/**\n * Type marker for the SafeUrl type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n\n\n/**\n * Package-internal utility method to create SafeUrl instances.\n *\n * @param {string} url The string to initialize the SafeUrl object with.\n * @return {!goog.html.SafeUrl} The initialized SafeUrl object.\n * @package\n */\ngoog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(\n    url) {\n  var safeUrl = new goog.html.SafeUrl();\n  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;\n  return safeUrl;\n};\n\n\n/**\n * A SafeUrl corresponding to the special about:blank url.\n * @const {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.ABOUT_BLANK =\n    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n        'about:blank');\n","~:compiled-at",1574163696317,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.html.safeurl.js\",\n\"lineCount\":141,\n\"mappings\":\"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\",\n\"sources\":[\"goog/html/safeurl.js\"],\n\"sourcesContent\":[\"// Copyright 2013 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview The SafeUrl type and its builders.\\n *\\n * TODO(xtof): Link to document stating type contract.\\n */\\n\\ngoog.provide('goog.html.SafeUrl');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.fs.url');\\ngoog.require('goog.html.TrustedResourceUrl');\\ngoog.require('goog.i18n.bidi.Dir');\\ngoog.require('goog.i18n.bidi.DirectionalString');\\ngoog.require('goog.string');\\ngoog.require('goog.string.Const');\\ngoog.require('goog.string.TypedString');\\n\\n\\n\\n/**\\n * A string that is safe to use in URL context in DOM APIs and HTML documents.\\n *\\n * A SafeUrl is a string-like object that carries the security type contract\\n * that its value as a string will not cause untrusted script execution\\n * when evaluated as a hyperlink URL in a browser.\\n *\\n * Values of this type are guaranteed to be safe to use in URL/hyperlink\\n * contexts, such as assignment to URL-valued DOM properties, in the sense that\\n * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,\\n * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,\\n * inside a href attribute). However, appropriate HTML-escaping must still be\\n * applied.\\n *\\n * Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's\\n * contract does not guarantee that instances are safe to interpolate into HTML\\n * without appropriate escaping.\\n *\\n * Note also that this type's contract does not imply any guarantees regarding\\n * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>\\n * safe to use in a context where the referred-to resource is interpreted as\\n * trusted code, e.g., as the src of a script tag.\\n *\\n * Instances of this type must be created via the factory methods\\n * ({@code goog.html.SafeUrl.fromConstant}, {@code goog.html.SafeUrl.sanitize}),\\n * etc and not by invoking its constructor.  The constructor intentionally\\n * takes no parameters and the type is immutable; hence only a default instance\\n * corresponding to the empty string can be obtained via constructor invocation.\\n *\\n * @see goog.html.SafeUrl#fromConstant\\n * @see goog.html.SafeUrl#from\\n * @see goog.html.SafeUrl#sanitize\\n * @constructor\\n * @final\\n * @struct\\n * @implements {goog.i18n.bidi.DirectionalString}\\n * @implements {goog.string.TypedString}\\n */\\ngoog.html.SafeUrl = function() {\\n  /**\\n   * The contained value of this SafeUrl.  The field has a purposely ugly\\n   * name to make (non-compiled) code that attempts to directly access this\\n   * field stand out.\\n   * @private {string}\\n   */\\n  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';\\n\\n  /**\\n   * A type marker used to implement additional run-time type checking.\\n   * @see goog.html.SafeUrl#unwrap\\n   * @const {!Object}\\n   * @private\\n   */\\n  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\\n      goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\\n};\\n\\n\\n/**\\n * The innocuous string generated by goog.html.SafeUrl.sanitize when passed\\n * an unsafe URL.\\n *\\n * about:invalid is registered in\\n * http://www.w3.org/TR/css3-values/#about-invalid.\\n * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to\\n * contain a fragment, which is not to be considered when determining if an\\n * about URL is well-known.\\n *\\n * Using about:invalid seems preferable to using a fixed data URL, since\\n * browsers might choose to not report CSP violations on it, as legitimate\\n * CSS function calls to attr() can result in this URL being produced. It is\\n * also a standard URL which matches exactly the semantics we need:\\n * \\\"The about:invalid URI references a non-existent document with a generic\\n * error condition. It can be used when a URI is necessary, but the default\\n * value shouldn't be resolveable as any type of document\\\".\\n *\\n * @const {string}\\n */\\ngoog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;\\n\\n\\n/**\\n * Returns this SafeUrl's value a string.\\n *\\n * IMPORTANT: In code where it is security relevant that an object's type is\\n * indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap} instead of this\\n * method. If in doubt, assume that it's security relevant. In particular, note\\n * that goog.html functions which return a goog.html type do not guarantee that\\n * the returned instance is of the right type. For example:\\n *\\n * <pre>\\n * var fakeSafeHtml = new String('fake');\\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\\n * // goog.html.SafeHtml.\\n * </pre>\\n *\\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\\n * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST\\n * be appropriately escaped before embedding in a HTML document. Note that the\\n * required escaping is context-sensitive (e.g. a different escaping is\\n * required for embedding a URL in a style property within a style\\n * attribute, as opposed to embedding in a href attribute).\\n *\\n * @see goog.html.SafeUrl#unwrap\\n * @override\\n */\\ngoog.html.SafeUrl.prototype.getTypedStringValue = function() {\\n  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;\\n\\n\\n/**\\n * Returns this URLs directionality, which is always {@code LTR}.\\n * @override\\n */\\ngoog.html.SafeUrl.prototype.getDirection = function() {\\n  return goog.i18n.bidi.Dir.LTR;\\n};\\n\\n\\nif (goog.DEBUG) {\\n  /**\\n   * Returns a debug string-representation of this value.\\n   *\\n   * To obtain the actual string value wrapped in a SafeUrl, use\\n   * {@code goog.html.SafeUrl.unwrap}.\\n   *\\n   * @see goog.html.SafeUrl#unwrap\\n   * @override\\n   */\\n  goog.html.SafeUrl.prototype.toString = function() {\\n    return 'SafeUrl{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +\\n        '}';\\n  };\\n}\\n\\n\\n/**\\n * Performs a runtime check that the provided object is indeed a SafeUrl\\n * object, and returns its value.\\n *\\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\\n * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST\\n * be appropriately escaped before embedding in a HTML document. Note that the\\n * required escaping is context-sensitive (e.g. a different escaping is\\n * required for embedding a URL in a style property within a style\\n * attribute, as opposed to embedding in a href attribute).\\n *\\n * @param {!goog.html.SafeUrl} safeUrl The object to extract from.\\n * @return {string} The SafeUrl object's contained string, unless the run-time\\n *     type check fails. In that case, {@code unwrap} returns an innocuous\\n *     string, or, if assertions are enabled, throws\\n *     {@code goog.asserts.AssertionError}.\\n */\\ngoog.html.SafeUrl.unwrap = function(safeUrl) {\\n  // Perform additional Run-time type-checking to ensure that safeUrl is indeed\\n  // an instance of the expected type.  This provides some additional protection\\n  // against security bugs due to application code that disables type checks.\\n  // Specifically, the following checks are performed:\\n  // 1. The object is an instance of the expected type.\\n  // 2. The object is not an instance of a subclass.\\n  // 3. The object carries a type marker for the expected type. \\\"Faking\\\" an\\n  // object requires a reference to the type marker, which has names intended\\n  // to stand out in code reviews.\\n  if (safeUrl instanceof goog.html.SafeUrl &&\\n      safeUrl.constructor === goog.html.SafeUrl &&\\n      safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\\n          goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\\n    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\\n  } else {\\n    goog.asserts.fail('expected object of type SafeUrl, got \\\\'' +\\n        safeUrl + '\\\\' of type ' + goog.typeOf(safeUrl));\\n    return 'type_error:SafeUrl';\\n  }\\n};\\n\\n\\n/**\\n * Creates a SafeUrl object from a compile-time constant string.\\n *\\n * Compile-time constant strings are inherently program-controlled and hence\\n * trusted.\\n *\\n * @param {!goog.string.Const} url A compile-time-constant string from which to\\n *         create a SafeUrl.\\n * @return {!goog.html.SafeUrl} A SafeUrl object initialized to {@code url}.\\n */\\ngoog.html.SafeUrl.fromConstant = function(url) {\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\n      goog.string.Const.unwrap(url));\\n};\\n\\n\\n/**\\n * A pattern that matches Blob or data types that can have SafeUrls created\\n * from URL.createObjectURL(blob) or via a data: URI.\\n * @const\\n * @private\\n */\\ngoog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp(\\n    '^(?:audio/(?:3gpp|3gpp2|aac|midi|mp4|mpeg|ogg|x-m4a|x-wav|webm)|' +\\n        'image/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|' +\\n        'text/csv|' +\\n        'video/(?:mpeg|mp4|ogg|webm))$',\\n    'i');\\n\\n\\n/**\\n * Creates a SafeUrl wrapping a blob URL for the given {@code blob}.\\n *\\n * The blob URL is created with {@code URL.createObjectURL}. If the MIME type\\n * for {@code blob} is not of a known safe audio, image or video MIME type,\\n * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.\\n *\\n * @see http://www.w3.org/TR/FileAPI/#url\\n * @param {!Blob} blob\\n * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped\\n *   as a SafeUrl.\\n */\\ngoog.html.SafeUrl.fromBlob = function(blob) {\\n  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ?\\n      goog.fs.url.createObjectUrl(blob) :\\n      goog.html.SafeUrl.INNOCUOUS_STRING;\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\\n};\\n\\n\\n/**\\n * Matches a base-64 data URL, with the first match group being the MIME type.\\n * @const\\n * @private\\n */\\ngoog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\\\\/]+=*$/i;\\n\\n\\n/**\\n * Creates a SafeUrl wrapping a data: URL, after validating it matches a\\n * known-safe audio, image or video MIME type.\\n *\\n * @param {string} dataUrl A valid base64 data URL with one of the whitelisted\\n *     audio, image or video MIME types.\\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\\n *     wrapped as a SafeUrl if it does not pass.\\n */\\ngoog.html.SafeUrl.fromDataUrl = function(dataUrl) {\\n  // There's a slight risk here that a browser sniffs the content type if it\\n  // doesn't know the MIME type and executes HTML within the data: URL. For this\\n  // to cause XSS it would also have to execute the HTML in the same origin\\n  // of the page with the link. It seems unlikely that both of these will\\n  // happen, particularly in not really old IEs.\\n  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);\\n  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\n      valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);\\n};\\n\\n\\n/**\\n * Creates a SafeUrl wrapping a tel: URL.\\n *\\n * @param {string} telUrl A tel URL.\\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\\n *     wrapped as a SafeUrl if it does not pass.\\n */\\ngoog.html.SafeUrl.fromTelUrl = function(telUrl) {\\n  // There's a risk that a tel: URL could immediately place a call once\\n  // clicked, without requiring user confirmation. For that reason it is\\n  // handled in this separate function.\\n  if (!goog.string.caseInsensitiveStartsWith(telUrl, 'tel:')) {\\n    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\\n  }\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\n      telUrl);\\n};\\n\\n\\n/**\\n * Creates a SafeUrl from TrustedResourceUrl. This is safe because\\n * TrustedResourceUrl is more tightly restricted than SafeUrl.\\n *\\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\\n * @return {!goog.html.SafeUrl}\\n */\\ngoog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\n      goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));\\n};\\n\\n\\n/**\\n * A pattern that recognizes a commonly useful subset of URLs that satisfy\\n * the SafeUrl contract.\\n *\\n * This regular expression matches a subset of URLs that will not cause script\\n * execution if used in URL context within a HTML document. Specifically, this\\n * regular expression matches if (comment from here on and regex copied from\\n * Soy's EscapingConventions):\\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\\n * (2) or no protocol.  A protocol must be followed by a colon. The below\\n *     allows that by allowing colons only after one of the characters [/?#].\\n *     A colon after a hash (#) must be in the fragment.\\n *     Otherwise, a colon after a (?) must be in a query.\\n *     Otherwise, a colon after a single solidus (/) must be in a path.\\n *     Otherwise, a colon after a double solidus (//) must be in the authority\\n *     (before port).\\n *\\n * @private\\n * @const {!RegExp}\\n */\\ngoog.html.SAFE_URL_PATTERN_ =\\n    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\\n\\n\\n/**\\n * Creates a SafeUrl object from {@code url}. If {@code url} is a\\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\\n * validated to match a pattern of commonly used safe URLs.\\n *\\n * {@code url} may be a URL with the http, https, mailto or ftp scheme,\\n * or a relative URL (i.e., a URL without a scheme; specifically, a\\n * scheme-relative, absolute-path-relative, or path-relative URL).\\n *\\n * @see http://url.spec.whatwg.org/#concept-relative-url\\n * @param {string|!goog.string.TypedString} url The URL to validate.\\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\\n */\\ngoog.html.SafeUrl.sanitize = function(url) {\\n  if (url instanceof goog.html.SafeUrl) {\\n    return url;\\n  } else if (url.implementsGoogStringTypedString) {\\n    url = url.getTypedStringValue();\\n  } else {\\n    url = String(url);\\n  }\\n  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {\\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\\n  }\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\\n};\\n\\n/**\\n * Creates a SafeUrl object from {@code url}. If {@code url} is a\\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\\n * validated to match a pattern of commonly used safe URLs.\\n *\\n * {@code url} may be a URL with the http, https, mailto or ftp scheme,\\n * or a relative URL (i.e., a URL without a scheme; specifically, a\\n * scheme-relative, absolute-path-relative, or path-relative URL).\\n *\\n * This function asserts (using goog.asserts) that the URL matches this pattern.\\n * If it does not, in addition to failing the assert, an innocous URL will be\\n * returned.\\n *\\n * @see http://url.spec.whatwg.org/#concept-relative-url\\n * @param {string|!goog.string.TypedString} url The URL to validate.\\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\\n */\\ngoog.html.SafeUrl.sanitizeAssertUnchanged = function(url) {\\n  if (url instanceof goog.html.SafeUrl) {\\n    return url;\\n  } else if (url.implementsGoogStringTypedString) {\\n    url = url.getTypedStringValue();\\n  } else {\\n    url = String(url);\\n  }\\n  if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {\\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\\n  }\\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\\n};\\n\\n\\n\\n/**\\n * Type marker for the SafeUrl type, used to implement additional run-time\\n * type checking.\\n * @const {!Object}\\n * @private\\n */\\ngoog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\\n\\n\\n/**\\n * Package-internal utility method to create SafeUrl instances.\\n *\\n * @param {string} url The string to initialize the SafeUrl object with.\\n * @return {!goog.html.SafeUrl} The initialized SafeUrl object.\\n * @package\\n */\\ngoog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(\\n    url) {\\n  var safeUrl = new goog.html.SafeUrl();\\n  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;\\n  return safeUrl;\\n};\\n\\n\\n/**\\n * A SafeUrl corresponding to the special about:blank url.\\n * @const {!goog.html.SafeUrl}\\n */\\ngoog.html.SafeUrl.ABOUT_BLANK =\\n    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\n        'about:blank');\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"html\",\"SafeUrl\",\"goog.html.SafeUrl\",\"privateDoNotAccessOrElseSafeHtmlWrappedValue_\",\"SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"INNOCUOUS_STRING\",\"prototype\",\"implementsGoogStringTypedString\",\"getTypedStringValue\",\"goog.html.SafeUrl.prototype.getTypedStringValue\",\"implementsGoogI18nBidiDirectionalString\",\"getDirection\",\"goog.html.SafeUrl.prototype.getDirection\",\"i18n\",\"bidi\",\"Dir\",\"LTR\",\"DEBUG\",\"toString\",\"goog.html.SafeUrl.prototype.toString\",\"unwrap\",\"goog.html.SafeUrl.unwrap\",\"safeUrl\",\"constructor\",\"asserts\",\"fail\",\"typeOf\",\"fromConstant\",\"goog.html.SafeUrl.fromConstant\",\"url\",\"createSafeUrlSecurityPrivateDoNotAccessOrElse\",\"string\",\"Const\",\"SAFE_MIME_TYPE_PATTERN_\",\"RegExp\",\"fromBlob\",\"goog.html.SafeUrl.fromBlob\",\"blob\",\"test\",\"type\",\"fs\",\"createObjectUrl\",\"DATA_URL_PATTERN_\",\"fromDataUrl\",\"goog.html.SafeUrl.fromDataUrl\",\"dataUrl\",\"match\",\"valid\",\"fromTelUrl\",\"goog.html.SafeUrl.fromTelUrl\",\"telUrl\",\"caseInsensitiveStartsWith\",\"fromTrustedResourceUrl\",\"goog.html.SafeUrl.fromTrustedResourceUrl\",\"trustedResourceUrl\",\"TrustedResourceUrl\",\"SAFE_URL_PATTERN_\",\"sanitize\",\"goog.html.SafeUrl.sanitize\",\"String\",\"sanitizeAssertUnchanged\",\"goog.html.SafeUrl.sanitizeAssertUnchanged\",\"assert\",\"goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse\",\"ABOUT_BLANK\"]\n}\n"]