["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/dom/asserts.js"],"~:js","goog.provide(\"goog.dom.asserts\");\ngoog.require(\"goog.asserts\");\n/**\n * @param {?Object} o\n * @return {!Location}\n */\ngoog.dom.asserts.assertIsLocation = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.Location != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.Location || !(o instanceof win.Element)), \"Argument is not a Location (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!Location} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLAnchorElement}\n */\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLAnchorElement != \"undefined\" && typeof win.Location != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLAnchorElement || !(o instanceof win.Location || o instanceof win.Element)), \"Argument is not a HTMLAnchorElement (or a non-Element mock); \" + \"got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLAnchorElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLLinkElement}\n */\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLLinkElement != \"undefined\" && typeof win.Location != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLLinkElement || !(o instanceof win.Location || o instanceof win.Element)), \"Argument is not a HTMLLinkElement (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLLinkElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLImageElement}\n */\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLImageElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLImageElement || !(o instanceof win.Element)), \"Argument is not a HTMLImageElement (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLImageElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLEmbedElement}\n */\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLEmbedElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLEmbedElement || !(o instanceof win.Element)), \"Argument is not a HTMLEmbedElement (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLEmbedElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLFrameElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLFrameElement || !(o instanceof win.Element)), \"Argument is not a HTMLFrameElement (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLFrameElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLIFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLIFrameElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLIFrameElement || !(o instanceof win.Element)), \"Argument is not a HTMLIFrameElement (or a non-Element mock); \" + \"got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLIFrameElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLObjectElement}\n */\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLObjectElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLObjectElement || !(o instanceof win.Element)), \"Argument is not a HTMLObjectElement (or a non-Element mock); \" + \"got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLObjectElement} */ (o));\n};\n/**\n * @param {?Object} o\n * @return {!HTMLScriptElement}\n */\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLScriptElement != \"undefined\" && typeof win.Element != \"undefined\") {\n      goog.asserts.assert(o && (o instanceof win.HTMLScriptElement || !(o instanceof win.Element)), \"Argument is not a HTMLScriptElement (or a non-Element mock); \" + \"got: %s\", goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return (/** @type {!HTMLScriptElement} */ (o));\n};\n/**\n * @private\n * @param {*} value\n * @return {string}\n */\ngoog.dom.asserts.debugStringForType_ = function(value) {\n  if (goog.isObject(value)) {\n    return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);\n  } else {\n    return value === undefined ? \"undefined\" : value === null ? \"null\" : typeof value;\n  }\n};\n/**\n * @private\n * @param {?Object} o\n * @return {!Window}\n */\ngoog.dom.asserts.getWindow_ = function(o) {\n  var doc = o && o.ownerDocument;\n  var win = doc && (/** @type {?Window} */ (doc.defaultView || doc.parentWindow));\n  return win || /** @type {!Window} */ (goog.global);\n};\n","~:source","// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide('goog.dom.asserts');\n\ngoog.require('goog.asserts');\n\n/**\n * @fileoverview Custom assertions to ensure that an element has the appropriate\n * type.\n *\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\n * incorrect static type cast) can result in security bugs: For instance,\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\n * However, the value assigned to a HTMLLinkElement's .href property requires\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\n * of type HTMLLinkElement can result in a security vulnerability.\n * Assertions of the correct run-time type help prevent such incorrect use.\n *\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\n * plain object such as {'href': url} instead of an actual Location object).\n * To allow such mocking, the assertions permit objects of types that are not\n * relevant DOM API objects at all (for instance, not Element or Location).\n *\n * Note that instanceof checks don't work straightforwardly in older versions of\n * IE, or across frames (see,\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\n *\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\n * risk of security bugs is limited by the following factors:\n *  - A bug can only arise in scenarios involving incorrect static typing (the\n *    wrapper methods are statically typed to demand objects of the appropriate,\n *    precise type).\n *  - Typically, code is tested and exercised in multiple browsers.\n */\n\n/**\n * Asserts that a given object is a Location.\n *\n * To permit this assertion to pass in the context of tests where DOM APIs might\n * be mocked, also accepts any other type except for subtypes of {!Element}.\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\n * place of a Location, since this could result in security bugs due to stronger\n * contracts required for assignments to the href property of the latter.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!Location}\n */\ngoog.dom.asserts.assertIsLocation = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.Location != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o && (o instanceof win.Location || !(o instanceof win.Element)),\n          'Argument is not a Location (or a non-Element mock); got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!Location} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLAnchorElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not of type Location nor a subtype\n * of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAnchorElement}\n */\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLAnchorElement != 'undefined' &&\n        typeof win.Location != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLAnchorElement ||\n               !((o instanceof win.Location) || (o instanceof win.Element))),\n          'Argument is not a HTMLAnchorElement (or a non-Element mock); ' +\n              'got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLAnchorElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLLinkElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLLinkElement}\n */\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLLinkElement != 'undefined' &&\n        typeof win.Location != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLLinkElement ||\n               !((o instanceof win.Location) || (o instanceof win.Element))),\n          'Argument is not a HTMLLinkElement (or a non-Element mock); got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLLinkElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLImageElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLImageElement}\n */\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLImageElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLImageElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLImageElement (or a non-Element mock); got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLImageElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLEmbedElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLEmbedElement}\n */\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLEmbedElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLEmbedElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLEmbedElement (or a non-Element mock); got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLEmbedElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLFrameElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLFrameElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLFrameElement (or a non-Element mock); got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLFrameElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLIFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLIFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLIFrameElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLIFrameElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLIFrameElement (or a non-Element mock); ' +\n              'got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLIFrameElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLObjectElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLObjectElement}\n */\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLObjectElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLObjectElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLObjectElement (or a non-Element mock); ' +\n              'got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLObjectElement} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLScriptElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLScriptElement}\n */\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (typeof win.HTMLScriptElement != 'undefined' &&\n        typeof win.Element != 'undefined') {\n      goog.asserts.assert(\n          o &&\n              (o instanceof win.HTMLScriptElement ||\n               !(o instanceof win.Element)),\n          'Argument is not a HTMLScriptElement (or a non-Element mock); ' +\n              'got: %s',\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!HTMLScriptElement} */ (o);\n};\n\n/**\n * Returns a string representation of a value's type.\n *\n * @param {*} value An object, or primitive.\n * @return {string} The best display name for the value.\n * @private\n */\ngoog.dom.asserts.debugStringForType_ = function(value) {\n  if (goog.isObject(value)) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === undefined ? 'undefined' :\n                                 value === null ? 'null' : typeof value;\n  }\n};\n\n/**\n * Gets window of element.\n * @param {?Object} o\n * @return {!Window}\n * @private\n */\ngoog.dom.asserts.getWindow_ = function(o) {\n  var doc = o && o.ownerDocument;\n  var win = doc && /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\n  return win || /** @type {!Window} */ (goog.global);\n};\n","~:compiled-at",1574163696310,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.dom.asserts.js\",\n\"lineCount\":142,\n\"mappings\":\"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\",\n\"sources\":[\"goog/dom/asserts.js\"],\n\"sourcesContent\":[\"// Copyright 2017 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\ngoog.provide('goog.dom.asserts');\\n\\ngoog.require('goog.asserts');\\n\\n/**\\n * @fileoverview Custom assertions to ensure that an element has the appropriate\\n * type.\\n *\\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\\n * incorrect static type cast) can result in security bugs: For instance,\\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\\n * However, the value assigned to a HTMLLinkElement's .href property requires\\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\\n * of type HTMLLinkElement can result in a security vulnerability.\\n * Assertions of the correct run-time type help prevent such incorrect use.\\n *\\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\\n * plain object such as {'href': url} instead of an actual Location object).\\n * To allow such mocking, the assertions permit objects of types that are not\\n * relevant DOM API objects at all (for instance, not Element or Location).\\n *\\n * Note that instanceof checks don't work straightforwardly in older versions of\\n * IE, or across frames (see,\\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\\n *\\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\\n * risk of security bugs is limited by the following factors:\\n *  - A bug can only arise in scenarios involving incorrect static typing (the\\n *    wrapper methods are statically typed to demand objects of the appropriate,\\n *    precise type).\\n *  - Typically, code is tested and exercised in multiple browsers.\\n */\\n\\n/**\\n * Asserts that a given object is a Location.\\n *\\n * To permit this assertion to pass in the context of tests where DOM APIs might\\n * be mocked, also accepts any other type except for subtypes of {!Element}.\\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\\n * place of a Location, since this could result in security bugs due to stronger\\n * contracts required for assignments to the href property of the latter.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!Location}\\n */\\ngoog.dom.asserts.assertIsLocation = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.Location != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o && (o instanceof win.Location || !(o instanceof win.Element)),\\n          'Argument is not a Location (or a non-Element mock); got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!Location} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLAnchorElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not of type Location nor a subtype\\n * of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLAnchorElement}\\n */\\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLAnchorElement != 'undefined' &&\\n        typeof win.Location != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLAnchorElement ||\\n               !((o instanceof win.Location) || (o instanceof win.Element))),\\n          'Argument is not a HTMLAnchorElement (or a non-Element mock); ' +\\n              'got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLAnchorElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLLinkElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLLinkElement}\\n */\\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLLinkElement != 'undefined' &&\\n        typeof win.Location != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLLinkElement ||\\n               !((o instanceof win.Location) || (o instanceof win.Element))),\\n          'Argument is not a HTMLLinkElement (or a non-Element mock); got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLLinkElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLImageElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLImageElement}\\n */\\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLImageElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLImageElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLImageElement (or a non-Element mock); got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLImageElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLEmbedElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLEmbedElement}\\n */\\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLEmbedElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLEmbedElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLEmbedElement (or a non-Element mock); got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLEmbedElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLFrameElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLFrameElement}\\n */\\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLFrameElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLFrameElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLFrameElement (or a non-Element mock); got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLFrameElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLIFrameElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLIFrameElement}\\n */\\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLIFrameElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLIFrameElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLIFrameElement (or a non-Element mock); ' +\\n              'got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLIFrameElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLObjectElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLObjectElement}\\n */\\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLObjectElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLObjectElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLObjectElement (or a non-Element mock); ' +\\n              'got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLObjectElement} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLScriptElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLScriptElement}\\n */\\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (typeof win.HTMLScriptElement != 'undefined' &&\\n        typeof win.Element != 'undefined') {\\n      goog.asserts.assert(\\n          o &&\\n              (o instanceof win.HTMLScriptElement ||\\n               !(o instanceof win.Element)),\\n          'Argument is not a HTMLScriptElement (or a non-Element mock); ' +\\n              'got: %s',\\n          goog.dom.asserts.debugStringForType_(o));\\n    }\\n  }\\n  return /** @type {!HTMLScriptElement} */ (o);\\n};\\n\\n/**\\n * Returns a string representation of a value's type.\\n *\\n * @param {*} value An object, or primitive.\\n * @return {string} The best display name for the value.\\n * @private\\n */\\ngoog.dom.asserts.debugStringForType_ = function(value) {\\n  if (goog.isObject(value)) {\\n    return value.constructor.displayName || value.constructor.name ||\\n        Object.prototype.toString.call(value);\\n  } else {\\n    return value === undefined ? 'undefined' :\\n                                 value === null ? 'null' : typeof value;\\n  }\\n};\\n\\n/**\\n * Gets window of element.\\n * @param {?Object} o\\n * @return {!Window}\\n * @private\\n */\\ngoog.dom.asserts.getWindow_ = function(o) {\\n  var doc = o && o.ownerDocument;\\n  var win = doc && /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\\n  return win || /** @type {!Window} */ (goog.global);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"dom\",\"asserts\",\"assertIsLocation\",\"goog.dom.asserts.assertIsLocation\",\"o\",\"ENABLE_ASSERTS\",\"win\",\"getWindow_\",\"Location\",\"Element\",\"assert\",\"debugStringForType_\",\"assertIsHTMLAnchorElement\",\"goog.dom.asserts.assertIsHTMLAnchorElement\",\"HTMLAnchorElement\",\"assertIsHTMLLinkElement\",\"goog.dom.asserts.assertIsHTMLLinkElement\",\"HTMLLinkElement\",\"assertIsHTMLImageElement\",\"goog.dom.asserts.assertIsHTMLImageElement\",\"HTMLImageElement\",\"assertIsHTMLEmbedElement\",\"goog.dom.asserts.assertIsHTMLEmbedElement\",\"HTMLEmbedElement\",\"assertIsHTMLFrameElement\",\"goog.dom.asserts.assertIsHTMLFrameElement\",\"HTMLFrameElement\",\"assertIsHTMLIFrameElement\",\"goog.dom.asserts.assertIsHTMLIFrameElement\",\"HTMLIFrameElement\",\"assertIsHTMLObjectElement\",\"goog.dom.asserts.assertIsHTMLObjectElement\",\"HTMLObjectElement\",\"assertIsHTMLScriptElement\",\"goog.dom.asserts.assertIsHTMLScriptElement\",\"HTMLScriptElement\",\"goog.dom.asserts.debugStringForType_\",\"value\",\"isObject\",\"constructor\",\"displayName\",\"name\",\"Object\",\"prototype\",\"toString\",\"call\",\"undefined\",\"goog.dom.asserts.getWindow_\",\"doc\",\"ownerDocument\",\"defaultView\",\"parentWindow\",\"global\"]\n}\n"]