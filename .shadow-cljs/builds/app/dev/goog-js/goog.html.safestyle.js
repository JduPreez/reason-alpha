["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/html/safestyle.js"],"~:js","goog.provide(\"goog.html.SafeStyle\");\ngoog.require(\"goog.array\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.html.SafeUrl\");\ngoog.require(\"goog.string\");\ngoog.require(\"goog.string.Const\");\ngoog.require(\"goog.string.TypedString\");\n/**\n * @final\n * @struct\n * @constructor\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeStyle = function() {\n  /** @private @type {string} */ this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = \"\";\n  /** @private @const @type {!Object} */ this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n/** @const @override */ goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\n/** @private @const @type {!Object} */ goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n/**\n * @param {!goog.string.Const} style\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.fromConstant = function(style) {\n  var styleString = goog.string.Const.unwrap(style);\n  if (styleString.length === 0) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(styleString);\n  goog.asserts.assert(goog.string.endsWith(styleString, \";\"), \"Last character of style string is not ';': \" + styleString);\n  goog.asserts.assert(goog.string.contains(styleString, \":\"), \"Style string must contain at least one ':', to \" + 'specify a \"name: value\" pair: ' + styleString);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);\n};\n/**\n * @private\n * @param {string} style\n */\ngoog.html.SafeStyle.checkStyle_ = function(style) {\n  goog.asserts.assert(!/[<>]/.test(style), \"Forbidden characters in style string: \" + style);\n};\n/** @override */ goog.html.SafeStyle.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n};\nif (goog.DEBUG) {\n  /** @override */ goog.html.SafeStyle.prototype.toString = function() {\n    return \"SafeStyle{\" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + \"}\";\n  };\n}\n/**\n * @param {!goog.html.SafeStyle} safeStyle\n * @return {string}\n */\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\n  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  } else {\n    goog.asserts.fail(\"expected object of type SafeStyle, got '\" + safeStyle + \"' of type \" + goog.typeOf(safeStyle));\n    return \"type_error:SafeStyle\";\n  }\n};\n/**\n * @package\n * @param {string} style\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {\n  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);\n};\n/**\n * @private\n * @param {string} style\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;\n  return this;\n};\n/** @const @type {!goog.html.SafeStyle} */ goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\"\");\n/** @const @type {string} */ goog.html.SafeStyle.INNOCUOUS_STRING = \"zClosurez\";\n/** @typedef {(string|!goog.string.Const|!goog.html.SafeUrl)} */ goog.html.SafeStyle.PropertyValue;\n/** @typedef {!Object<string,(?goog.html.SafeStyle.PropertyValue|?Array<!goog.html.SafeStyle.PropertyValue>)>} */ goog.html.SafeStyle.PropertyMap;\n/**\n * @param {goog.html.SafeStyle.PropertyMap} map\n * @return {!goog.html.SafeStyle}\n * @throws {Error}\n */\ngoog.html.SafeStyle.create = function(map) {\n  var style = \"\";\n  for (var name in map) {\n    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n      throw Error(\"Name allows only [-_a-zA-Z0-9], got: \" + name);\n    }\n    var value = map[name];\n    if (value == null) {\n      continue;\n    }\n    if (goog.isArray(value)) {\n      value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_).join(\" \");\n    } else {\n      value = goog.html.SafeStyle.sanitizePropertyValue_(value);\n    }\n    style += name + \":\" + value + \";\";\n  }\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(style);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n};\n/**\n * @private\n * @param {!goog.html.SafeStyle.PropertyValue} value\n * @return {string}\n */\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\n  if (value instanceof goog.html.SafeUrl) {\n    var url = goog.html.SafeUrl.unwrap(value);\n    return 'url(\"' + url.replace(/</g, \"%3c\").replace(/[\\\\\"]/g, \"\\\\$\\x26\") + '\")';\n  }\n  var result = value instanceof goog.string.Const ? goog.string.Const.unwrap(value) : goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\n  goog.asserts.assert(!/[{;}]/.test(result), \"Value does not allow [{;}].\");\n  return result;\n};\n/**\n * @private\n * @param {string} value\n * @return {string}\n */\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\n  var valueWithoutFunctions = value.replace(goog.html.SafeUrl.FUNCTIONS_RE_, \"$1\").replace(goog.html.SafeUrl.URL_RE_, \"url\");\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\n    goog.asserts.fail(\"String value allows only \" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + \" and simple functions, got: \" + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else {\n    if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\n      goog.asserts.fail(\"String value requires balanced quotes, got: \" + value);\n      return goog.html.SafeStyle.INNOCUOUS_STRING;\n    }\n  }\n  return goog.html.SafeStyle.sanitizeUrl_(value);\n};\n/**\n * @private\n * @param {string} value\n * @return {boolean}\n */\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\n  var outsideSingle = true;\n  var outsideDouble = true;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == \"'\" && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else {\n      if (c == '\"' && outsideSingle) {\n        outsideDouble = !outsideDouble;\n      }\n    }\n  }\n  return outsideSingle && outsideDouble;\n};\n/** @private @type {string} */ goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = \"[-,.\\\"'%_!# a-zA-Z0-9]\";\n/** @private @const @type {!RegExp} */ goog.html.SafeStyle.VALUE_RE_ = new RegExp(\"^\" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + \"+$\");\n/** @private @const @type {!RegExp} */ goog.html.SafeUrl.URL_RE_ = new RegExp(\"\\\\b(url\\\\([ \\t\\n]*)(\" + \"'[ -\\x26(-\\\\[\\\\]-~]*'\" + '|\"[ !#-\\\\[\\\\]-~]*\"' + \"|[!#-\\x26*-\\\\[\\\\]-~]*\" + \")([ \\t\\n]*\\\\))\", \"g\");\n/** @private @const @type {!RegExp} */ goog.html.SafeUrl.FUNCTIONS_RE_ = new RegExp(\"\\\\b(hsl|hsla|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?)\" + \"\\\\([-0-9a-z.%, ]+\\\\)\", \"g\");\n/**\n * @private\n * @param {string} value\n * @return {string}\n */\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\n  return value.replace(goog.html.SafeUrl.URL_RE_, function(match, before, url, after) {\n    var quote = \"\";\n    url = url.replace(/^(['\"])(.*)\\1$/, function(match, start, inside) {\n      quote = start;\n      return inside;\n    });\n    var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\n    return before + quote + sanitized + quote + after;\n  });\n};\n/**\n * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.concat = function(var_args) {\n  var style = \"\";\n  /**\n   * @param {(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} argument\n   */\n  var addArgument = function(argument) {\n    if (goog.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      style += goog.html.SafeStyle.unwrap(argument);\n    }\n  };\n  goog.array.forEach(arguments, addArgument);\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n};\n","~:source","// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeStyle type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.SafeStyle');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.string');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * A string-like object which represents a sequence of CSS declarations\n * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})\n * and that carries the security type contract that its value, as a string,\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\n * browser.\n *\n * Instances of this type must be created via the factory methods\n * ({@code goog.html.SafeStyle.create} or\n * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its\n * constructor. The constructor intentionally takes no parameters and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * SafeStyle's string representation can safely be:\n * <ul>\n *   <li>Interpolated as the content of a *quoted* HTML style attribute.\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\n *       interpolation.\n *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.\n *       '<' characters in the SafeStyle string *must be CSS-escaped* before\n *       interpolation. The SafeStyle string is also guaranteed not to be able\n *       to introduce new properties or elide existing ones.\n *   <li>Interpolated as the content of a {}-wrapped block within an HTML\n *       <style> element. '<' characters in the SafeStyle string\n *       *must be CSS-escaped* before interpolation.\n *   <li>Assigned to the style property of a DOM node. The SafeStyle string\n *       should not be escaped before being assigned to the property.\n * </ul>\n *\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\n * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't\n * be HTML escaped). For example, if the SafeStyle containing\n * \"{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}\" were\n * interpolated within a &lt;style&gt; tag, this would then break out of the\n * style context into HTML.\n *\n * A SafeStyle may contain literal single or double quotes, and as such the\n * entire style string must be escaped when used in a style attribute (if\n * this were not the case, the string could contain a matching quote that\n * would escape from the style attribute).\n *\n * Values of this type must be composable, i.e. for any two values\n * {@code style1} and {@code style2} of this type,\n * {@code goog.html.SafeStyle.unwrap(style1) +\n * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies\n * the SafeStyle type constraint. This requirement implies that for any value\n * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)} must\n * not end in a \"property value\" or \"property name\" context. For example,\n * a value of {@code background:url(\"} or {@code font-} would not satisfy the\n * SafeStyle contract. This is because concatenating such strings with a\n * second value that itself does not contain unsafe CSS can result in an\n * overall string that does. For example, if {@code javascript:evil())\"} is\n * appended to {@code background:url(\"}, the resulting string may result in\n * the execution of a malicious script.\n *\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\n * validity checks and blacklisting of newlines (including Unicode ones) and\n * other whitespace characters (\\t, \\f). Document here if so and also update\n * SafeStyle.fromConstant().\n *\n * The following example values comply with this type's contract:\n * <ul>\n *   <li><pre>width: 1em;</pre>\n *   <li><pre>height:1em;</pre>\n *   <li><pre>width: 1em;height: 1em;</pre>\n *   <li><pre>background:url('http://url');</pre>\n * </ul>\n * In addition, the empty string is safe for use in a CSS attribute.\n *\n * The following example values do NOT comply with this type's contract:\n * <ul>\n *   <li><pre>background: red</pre> (missing a trailing semi-colon)\n *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)\n *   <li><pre>1em</pre> (missing an attribute name, which provides context for\n *       the value)\n * </ul>\n *\n * @see goog.html.SafeStyle#create\n * @see goog.html.SafeStyle#fromConstant\n * @see http://www.w3.org/TR/css3-syntax/\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeStyle = function() {\n  /**\n   * The contained value of this SafeStyle.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = '';\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeStyle#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\n      goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Type marker for the SafeStyle type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n\n\n/**\n * Creates a SafeStyle object from a compile-time constant string.\n *\n * {@code style} should be in the format\n * {@code name: value; [name: value; ...]} and must not have any < or >\n * characters in it. This is so that SafeStyle's contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This method performs basic sanity checks on the format of {@code style}\n * but does not constrain the format of {@code name} and {@code value}, except\n * for disallowing tag characters.\n *\n * @param {!goog.string.Const} style A compile-time-constant string from which\n *     to create a SafeStyle.\n * @return {!goog.html.SafeStyle} A SafeStyle object initialized to\n *     {@code style}.\n */\ngoog.html.SafeStyle.fromConstant = function(style) {\n  var styleString = goog.string.Const.unwrap(style);\n  if (styleString.length === 0) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(styleString);\n  goog.asserts.assert(\n      goog.string.endsWith(styleString, ';'),\n      'Last character of style string is not \\';\\': ' + styleString);\n  goog.asserts.assert(\n      goog.string.contains(styleString, ':'),\n      'Style string must contain at least one \\':\\', to ' +\n          'specify a \"name: value\" pair: ' + styleString);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      styleString);\n};\n\n\n/**\n * Checks if the style definition is valid.\n * @param {string} style\n * @private\n */\ngoog.html.SafeStyle.checkStyle_ = function(style) {\n  goog.asserts.assert(\n      !/[<>]/.test(style), 'Forbidden characters in style string: ' + style);\n};\n\n\n/**\n * Returns this SafeStyle's value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed {@code SafeStyle}, use {@code goog.html.SafeStyle.unwrap} instead of\n * this method. If in doubt, assume that it's security relevant. In particular,\n * note that goog.html functions which return a goog.html type do not guarantee\n * the returned instance is of the right type. For example:\n *\n * <pre>\n * var fakeSafeHtml = new String('fake');\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * </pre>\n *\n * @see goog.html.SafeStyle#unwrap\n * @override\n */\ngoog.html.SafeStyle.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeStyle, use\n   * {@code goog.html.SafeStyle.unwrap}.\n   *\n   * @see goog.html.SafeStyle#unwrap\n   * @override\n   */\n  goog.html.SafeStyle.prototype.toString = function() {\n    return 'SafeStyle{' + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +\n        '}';\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * SafeStyle object, and returns its value.\n *\n * @param {!goog.html.SafeStyle} safeStyle The object to extract from.\n * @return {string} The safeStyle object's contained string, unless\n *     the run-time type check fails. In that case, {@code unwrap} returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     {@code goog.asserts.AssertionError}.\n */\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\n  // Perform additional Run-time type-checking to ensure that\n  // safeStyle is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \"Faking\" an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeStyle instanceof goog.html.SafeStyle &&\n      safeStyle.constructor === goog.html.SafeStyle &&\n      safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\n          goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  } else {\n    goog.asserts.fail('expected object of type SafeStyle, got \\'' +\n        safeStyle + '\\' of type ' + goog.typeOf(safeStyle));\n    return 'type_error:SafeStyle';\n  }\n};\n\n\n/**\n * Package-internal utility method to create SafeStyle instances.\n *\n * @param {string} style The string to initialize the SafeStyle object with.\n * @return {!goog.html.SafeStyle} The initialized SafeStyle object.\n * @package\n */\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(\n    style) {\n  return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(style);\n};\n\n\n/**\n * Called from createSafeStyleSecurityPrivateDoNotAccessOrElse(). This\n * method exists only so that the compiler can dead code eliminate static\n * fields (like EMPTY) when they're not accessed.\n * @param {string} style\n * @return {!goog.html.SafeStyle}\n * @private\n */\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(\n    style) {\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;\n  return this;\n};\n\n\n/**\n * A SafeStyle instance corresponding to the empty string.\n * @const {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.EMPTY =\n    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');\n\n\n/**\n * The innocuous string generated by goog.html.SafeStyle.create when passed\n * an unsafe value.\n * @const {string}\n */\ngoog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';\n\n\n/**\n * A single property value.\n * @typedef {string|!goog.string.Const|!goog.html.SafeUrl}\n */\ngoog.html.SafeStyle.PropertyValue;\n\n\n/**\n * Mapping of property names to their values.\n * We don't support numbers even though some values might be numbers (e.g.\n * line-height or 0 for any length). The reason is that most numeric values need\n * units (e.g. '1px') and allowing numbers could cause users forgetting about\n * them.\n * @typedef {!Object<string, ?goog.html.SafeStyle.PropertyValue|\n *     ?Array<!goog.html.SafeStyle.PropertyValue>>}\n */\ngoog.html.SafeStyle.PropertyMap;\n\n\n/**\n * Creates a new SafeStyle object from the properties specified in the map.\n * @param {goog.html.SafeStyle.PropertyMap} map Mapping of property names to\n *     their values, for example {'margin': '1px'}. Names must consist of\n *     [-_a-zA-Z0-9]. Values might be strings consisting of\n *     [-,.'\"%_!# a-zA-Z0-9], where \" and ' must be properly balanced. We also\n *     allow simple functions like rgb() and url() which sanitizes its contents.\n *     Other values must be wrapped in goog.string.Const. URLs might be passed\n *     as goog.html.SafeUrl which will be wrapped into url(\"\"). We also support\n *     array whose elements are joined with ' '. Null value causes skipping the\n *     property.\n * @return {!goog.html.SafeStyle}\n * @throws {Error} If invalid name is provided.\n * @throws {goog.asserts.AssertionError} If invalid value is provided. With\n *     disabled assertions, invalid value is replaced by\n *     goog.html.SafeStyle.INNOCUOUS_STRING.\n */\ngoog.html.SafeStyle.create = function(map) {\n  var style = '';\n  for (var name in map) {\n    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n      throw Error('Name allows only [-_a-zA-Z0-9], got: ' + name);\n    }\n    var value = map[name];\n    if (value == null) {\n      continue;\n    }\n    if (goog.isArray(value)) {\n      value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)\n                  .join(' ');\n    } else {\n      value = goog.html.SafeStyle.sanitizePropertyValue_(value);\n    }\n    style += name + ':' + value + ';';\n  }\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(style);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n\n/**\n * Checks and converts value to string.\n * @param {!goog.html.SafeStyle.PropertyValue} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\n  if (value instanceof goog.html.SafeUrl) {\n    var url = goog.html.SafeUrl.unwrap(value);\n    return 'url(\"' + url.replace(/</g, '%3c').replace(/[\\\\\"]/g, '\\\\$&') + '\")';\n  }\n  var result = value instanceof goog.string.Const ?\n      goog.string.Const.unwrap(value) :\n      goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\n  // These characters can be used to change context and we don't want that even\n  // with const values.\n  goog.asserts.assert(!/[{;}]/.test(result), 'Value does not allow [{;}].');\n  return result;\n};\n\n\n/**\n * Checks string value.\n * @param {string} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\n  var valueWithoutFunctions =\n      value.replace(goog.html.SafeUrl.FUNCTIONS_RE_, '$1')\n          .replace(goog.html.SafeUrl.URL_RE_, 'url');\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\n    goog.asserts.fail(\n        'String value allows only ' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +\n        ' and simple functions, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\n    goog.asserts.fail('String value requires balanced quotes, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeStyle.sanitizeUrl_(value);\n};\n\n\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to quote\n *     balancedness.\n * @private\n */\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\n  var outsideSingle = true;\n  var outsideDouble = true;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == \"'\" && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c == '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n};\n\n\n/**\n * Characters allowed in goog.html.SafeStyle.VALUE_RE_.\n * @private {string}\n */\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = '[-,.\"\\'%_!# a-zA-Z0-9]';\n\n\n/**\n * Regular expression for safe values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure\n * they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property\n * (e.g. background-attachment or font-family) and hence could allow\n * multiple values to get injected, but that should pose no risk of XSS.\n *\n * The expression checks only for XSS safety, not for CSS validity.\n * @const {!RegExp}\n * @private\n */\ngoog.html.SafeStyle.VALUE_RE_ =\n    new RegExp('^' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + '+$');\n\n\n/**\n * Regular expression for url(). We support URLs allowed by\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\n * sequences. Use percent-encoding if you need to use special characters like\n * backslash.\n * @private @const {!RegExp}\n */\ngoog.html.SafeUrl.URL_RE_ = new RegExp(\n    '\\\\b(url\\\\([ \\t\\n]*)(' +\n        '\\'[ -&(-\\\\[\\\\]-~]*\\'' +  // Printable characters except ' and \\.\n        '|\"[ !#-\\\\[\\\\]-~]*\"' +    // Printable characters except \" and \\.\n        '|[!#-&*-\\\\[\\\\]-~]*' +    // Printable characters except [ \"'()\\\\].\n        ')([ \\t\\n]*\\\\))',\n    'g');\n\n\n/**\n * Regular expression for simple functions.\n * @private @const {!RegExp}\n */\ngoog.html.SafeUrl.FUNCTIONS_RE_ = new RegExp(\n    '\\\\b(hsl|hsla|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?)' +\n        '\\\\([-0-9a-z.%, ]+\\\\)',\n    'g');\n\n\n/**\n * Sanitize URLs inside url().\n *\n * NOTE: We could also consider using CSS.escape once that's available in the\n * browsers. However, loosely matching URL e.g. with url\\(.*\\) and then escaping\n * the contents would result in a slightly different language than CSS leading\n * to confusion of users. E.g. url(\")\") is valid in CSS but it would be invalid\n * as seen by our parser. On the other hand, url(\\) is invalid in CSS but our\n * parser would be fine with it.\n *\n * @param {string} value Untrusted CSS property value.\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\n  return value.replace(\n      goog.html.SafeUrl.URL_RE_, function(match, before, url, after) {\n        var quote = '';\n        url = url.replace(/^(['\"])(.*)\\1$/, function(match, start, inside) {\n          quote = start;\n          return inside;\n        });\n        var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\n        return before + quote + sanitized + quote + after;\n      });\n};\n\n\n/**\n * Creates a new SafeStyle object by concatenating the values.\n * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args\n *     SafeStyles to concatenate.\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.concat = function(var_args) {\n  var style = '';\n\n  /**\n   * @param {!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>} argument\n   */\n  var addArgument = function(argument) {\n    if (goog.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      style += goog.html.SafeStyle.unwrap(argument);\n    }\n  };\n\n  goog.array.forEach(arguments, addArgument);\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n","~:compiled-at",1574163696319,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.html.safestyle.js\",\n\"lineCount\":204,\n\"mappings\":\"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\",\n\"sources\":[\"goog/html/safestyle.js\"],\n\"sourcesContent\":[\"// Copyright 2014 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview The SafeStyle type and its builders.\\n *\\n * TODO(xtof): Link to document stating type contract.\\n */\\n\\ngoog.provide('goog.html.SafeStyle');\\n\\ngoog.require('goog.array');\\ngoog.require('goog.asserts');\\ngoog.require('goog.html.SafeUrl');\\ngoog.require('goog.string');\\ngoog.require('goog.string.Const');\\ngoog.require('goog.string.TypedString');\\n\\n\\n\\n/**\\n * A string-like object which represents a sequence of CSS declarations\\n * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})\\n * and that carries the security type contract that its value, as a string,\\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\\n * browser.\\n *\\n * Instances of this type must be created via the factory methods\\n * ({@code goog.html.SafeStyle.create} or\\n * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its\\n * constructor. The constructor intentionally takes no parameters and the type\\n * is immutable; hence only a default instance corresponding to the empty string\\n * can be obtained via constructor invocation.\\n *\\n * SafeStyle's string representation can safely be:\\n * <ul>\\n *   <li>Interpolated as the content of a *quoted* HTML style attribute.\\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\\n *       interpolation.\\n *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.\\n *       '<' characters in the SafeStyle string *must be CSS-escaped* before\\n *       interpolation. The SafeStyle string is also guaranteed not to be able\\n *       to introduce new properties or elide existing ones.\\n *   <li>Interpolated as the content of a {}-wrapped block within an HTML\\n *       <style> element. '<' characters in the SafeStyle string\\n *       *must be CSS-escaped* before interpolation.\\n *   <li>Assigned to the style property of a DOM node. The SafeStyle string\\n *       should not be escaped before being assigned to the property.\\n * </ul>\\n *\\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\\n * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't\\n * be HTML escaped). For example, if the SafeStyle containing\\n * \\\"{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}\\\" were\\n * interpolated within a &lt;style&gt; tag, this would then break out of the\\n * style context into HTML.\\n *\\n * A SafeStyle may contain literal single or double quotes, and as such the\\n * entire style string must be escaped when used in a style attribute (if\\n * this were not the case, the string could contain a matching quote that\\n * would escape from the style attribute).\\n *\\n * Values of this type must be composable, i.e. for any two values\\n * {@code style1} and {@code style2} of this type,\\n * {@code goog.html.SafeStyle.unwrap(style1) +\\n * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies\\n * the SafeStyle type constraint. This requirement implies that for any value\\n * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)} must\\n * not end in a \\\"property value\\\" or \\\"property name\\\" context. For example,\\n * a value of {@code background:url(\\\"} or {@code font-} would not satisfy the\\n * SafeStyle contract. This is because concatenating such strings with a\\n * second value that itself does not contain unsafe CSS can result in an\\n * overall string that does. For example, if {@code javascript:evil())\\\"} is\\n * appended to {@code background:url(\\\"}, the resulting string may result in\\n * the execution of a malicious script.\\n *\\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\\n * validity checks and blacklisting of newlines (including Unicode ones) and\\n * other whitespace characters (\\\\t, \\\\f). Document here if so and also update\\n * SafeStyle.fromConstant().\\n *\\n * The following example values comply with this type's contract:\\n * <ul>\\n *   <li><pre>width: 1em;</pre>\\n *   <li><pre>height:1em;</pre>\\n *   <li><pre>width: 1em;height: 1em;</pre>\\n *   <li><pre>background:url('http://url');</pre>\\n * </ul>\\n * In addition, the empty string is safe for use in a CSS attribute.\\n *\\n * The following example values do NOT comply with this type's contract:\\n * <ul>\\n *   <li><pre>background: red</pre> (missing a trailing semi-colon)\\n *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)\\n *   <li><pre>1em</pre> (missing an attribute name, which provides context for\\n *       the value)\\n * </ul>\\n *\\n * @see goog.html.SafeStyle#create\\n * @see goog.html.SafeStyle#fromConstant\\n * @see http://www.w3.org/TR/css3-syntax/\\n * @constructor\\n * @final\\n * @struct\\n * @implements {goog.string.TypedString}\\n */\\ngoog.html.SafeStyle = function() {\\n  /**\\n   * The contained value of this SafeStyle.  The field has a purposely\\n   * ugly name to make (non-compiled) code that attempts to directly access this\\n   * field stand out.\\n   * @private {string}\\n   */\\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = '';\\n\\n  /**\\n   * A type marker used to implement additional run-time type checking.\\n   * @see goog.html.SafeStyle#unwrap\\n   * @const {!Object}\\n   * @private\\n   */\\n  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\\n      goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\\n\\n\\n/**\\n * Type marker for the SafeStyle type, used to implement additional\\n * run-time type checking.\\n * @const {!Object}\\n * @private\\n */\\ngoog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\\n\\n\\n/**\\n * Creates a SafeStyle object from a compile-time constant string.\\n *\\n * {@code style} should be in the format\\n * {@code name: value; [name: value; ...]} and must not have any < or >\\n * characters in it. This is so that SafeStyle's contract is preserved,\\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\\n * declarations and without affecting the syntactic structure of any\\n * surrounding CSS and HTML.\\n *\\n * This method performs basic sanity checks on the format of {@code style}\\n * but does not constrain the format of {@code name} and {@code value}, except\\n * for disallowing tag characters.\\n *\\n * @param {!goog.string.Const} style A compile-time-constant string from which\\n *     to create a SafeStyle.\\n * @return {!goog.html.SafeStyle} A SafeStyle object initialized to\\n *     {@code style}.\\n */\\ngoog.html.SafeStyle.fromConstant = function(style) {\\n  var styleString = goog.string.Const.unwrap(style);\\n  if (styleString.length === 0) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  goog.html.SafeStyle.checkStyle_(styleString);\\n  goog.asserts.assert(\\n      goog.string.endsWith(styleString, ';'),\\n      'Last character of style string is not \\\\';\\\\': ' + styleString);\\n  goog.asserts.assert(\\n      goog.string.contains(styleString, ':'),\\n      'Style string must contain at least one \\\\':\\\\', to ' +\\n          'specify a \\\"name: value\\\" pair: ' + styleString);\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      styleString);\\n};\\n\\n\\n/**\\n * Checks if the style definition is valid.\\n * @param {string} style\\n * @private\\n */\\ngoog.html.SafeStyle.checkStyle_ = function(style) {\\n  goog.asserts.assert(\\n      !/[<>]/.test(style), 'Forbidden characters in style string: ' + style);\\n};\\n\\n\\n/**\\n * Returns this SafeStyle's value as a string.\\n *\\n * IMPORTANT: In code where it is security relevant that an object's type is\\n * indeed {@code SafeStyle}, use {@code goog.html.SafeStyle.unwrap} instead of\\n * this method. If in doubt, assume that it's security relevant. In particular,\\n * note that goog.html functions which return a goog.html type do not guarantee\\n * the returned instance is of the right type. For example:\\n *\\n * <pre>\\n * var fakeSafeHtml = new String('fake');\\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\\n * // instanceof goog.html.SafeHtml.\\n * </pre>\\n *\\n * @see goog.html.SafeStyle#unwrap\\n * @override\\n */\\ngoog.html.SafeStyle.prototype.getTypedStringValue = function() {\\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\\n};\\n\\n\\nif (goog.DEBUG) {\\n  /**\\n   * Returns a debug string-representation of this value.\\n   *\\n   * To obtain the actual string value wrapped in a SafeStyle, use\\n   * {@code goog.html.SafeStyle.unwrap}.\\n   *\\n   * @see goog.html.SafeStyle#unwrap\\n   * @override\\n   */\\n  goog.html.SafeStyle.prototype.toString = function() {\\n    return 'SafeStyle{' + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +\\n        '}';\\n  };\\n}\\n\\n\\n/**\\n * Performs a runtime check that the provided object is indeed a\\n * SafeStyle object, and returns its value.\\n *\\n * @param {!goog.html.SafeStyle} safeStyle The object to extract from.\\n * @return {string} The safeStyle object's contained string, unless\\n *     the run-time type check fails. In that case, {@code unwrap} returns an\\n *     innocuous string, or, if assertions are enabled, throws\\n *     {@code goog.asserts.AssertionError}.\\n */\\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\\n  // Perform additional Run-time type-checking to ensure that\\n  // safeStyle is indeed an instance of the expected type.  This\\n  // provides some additional protection against security bugs due to\\n  // application code that disables type checks.\\n  // Specifically, the following checks are performed:\\n  // 1. The object is an instance of the expected type.\\n  // 2. The object is not an instance of a subclass.\\n  // 3. The object carries a type marker for the expected type. \\\"Faking\\\" an\\n  // object requires a reference to the type marker, which has names intended\\n  // to stand out in code reviews.\\n  if (safeStyle instanceof goog.html.SafeStyle &&\\n      safeStyle.constructor === goog.html.SafeStyle &&\\n      safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\\n          goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\\n  } else {\\n    goog.asserts.fail('expected object of type SafeStyle, got \\\\'' +\\n        safeStyle + '\\\\' of type ' + goog.typeOf(safeStyle));\\n    return 'type_error:SafeStyle';\\n  }\\n};\\n\\n\\n/**\\n * Package-internal utility method to create SafeStyle instances.\\n *\\n * @param {string} style The string to initialize the SafeStyle object with.\\n * @return {!goog.html.SafeStyle} The initialized SafeStyle object.\\n * @package\\n */\\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(\\n    style) {\\n  return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(style);\\n};\\n\\n\\n/**\\n * Called from createSafeStyleSecurityPrivateDoNotAccessOrElse(). This\\n * method exists only so that the compiler can dead code eliminate static\\n * fields (like EMPTY) when they're not accessed.\\n * @param {string} style\\n * @return {!goog.html.SafeStyle}\\n * @private\\n */\\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(\\n    style) {\\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;\\n  return this;\\n};\\n\\n\\n/**\\n * A SafeStyle instance corresponding to the empty string.\\n * @const {!goog.html.SafeStyle}\\n */\\ngoog.html.SafeStyle.EMPTY =\\n    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');\\n\\n\\n/**\\n * The innocuous string generated by goog.html.SafeStyle.create when passed\\n * an unsafe value.\\n * @const {string}\\n */\\ngoog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';\\n\\n\\n/**\\n * A single property value.\\n * @typedef {string|!goog.string.Const|!goog.html.SafeUrl}\\n */\\ngoog.html.SafeStyle.PropertyValue;\\n\\n\\n/**\\n * Mapping of property names to their values.\\n * We don't support numbers even though some values might be numbers (e.g.\\n * line-height or 0 for any length). The reason is that most numeric values need\\n * units (e.g. '1px') and allowing numbers could cause users forgetting about\\n * them.\\n * @typedef {!Object<string, ?goog.html.SafeStyle.PropertyValue|\\n *     ?Array<!goog.html.SafeStyle.PropertyValue>>}\\n */\\ngoog.html.SafeStyle.PropertyMap;\\n\\n\\n/**\\n * Creates a new SafeStyle object from the properties specified in the map.\\n * @param {goog.html.SafeStyle.PropertyMap} map Mapping of property names to\\n *     their values, for example {'margin': '1px'}. Names must consist of\\n *     [-_a-zA-Z0-9]. Values might be strings consisting of\\n *     [-,.'\\\"%_!# a-zA-Z0-9], where \\\" and ' must be properly balanced. We also\\n *     allow simple functions like rgb() and url() which sanitizes its contents.\\n *     Other values must be wrapped in goog.string.Const. URLs might be passed\\n *     as goog.html.SafeUrl which will be wrapped into url(\\\"\\\"). We also support\\n *     array whose elements are joined with ' '. Null value causes skipping the\\n *     property.\\n * @return {!goog.html.SafeStyle}\\n * @throws {Error} If invalid name is provided.\\n * @throws {goog.asserts.AssertionError} If invalid value is provided. With\\n *     disabled assertions, invalid value is replaced by\\n *     goog.html.SafeStyle.INNOCUOUS_STRING.\\n */\\ngoog.html.SafeStyle.create = function(map) {\\n  var style = '';\\n  for (var name in map) {\\n    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\\n      throw Error('Name allows only [-_a-zA-Z0-9], got: ' + name);\\n    }\\n    var value = map[name];\\n    if (value == null) {\\n      continue;\\n    }\\n    if (goog.isArray(value)) {\\n      value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)\\n                  .join(' ');\\n    } else {\\n      value = goog.html.SafeStyle.sanitizePropertyValue_(value);\\n    }\\n    style += name + ':' + value + ';';\\n  }\\n  if (!style) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  goog.html.SafeStyle.checkStyle_(style);\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      style);\\n};\\n\\n\\n/**\\n * Checks and converts value to string.\\n * @param {!goog.html.SafeStyle.PropertyValue} value\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\\n  if (value instanceof goog.html.SafeUrl) {\\n    var url = goog.html.SafeUrl.unwrap(value);\\n    return 'url(\\\"' + url.replace(/</g, '%3c').replace(/[\\\\\\\\\\\"]/g, '\\\\\\\\$&') + '\\\")';\\n  }\\n  var result = value instanceof goog.string.Const ?\\n      goog.string.Const.unwrap(value) :\\n      goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\\n  // These characters can be used to change context and we don't want that even\\n  // with const values.\\n  goog.asserts.assert(!/[{;}]/.test(result), 'Value does not allow [{;}].');\\n  return result;\\n};\\n\\n\\n/**\\n * Checks string value.\\n * @param {string} value\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\\n  var valueWithoutFunctions =\\n      value.replace(goog.html.SafeUrl.FUNCTIONS_RE_, '$1')\\n          .replace(goog.html.SafeUrl.URL_RE_, 'url');\\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\\n    goog.asserts.fail(\\n        'String value allows only ' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +\\n        ' and simple functions, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\\n    goog.asserts.fail('String value requires balanced quotes, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  }\\n  return goog.html.SafeStyle.sanitizeUrl_(value);\\n};\\n\\n\\n/**\\n * Checks that quotes (\\\" and ') are properly balanced inside a string. Assumes\\n * that neither escape (\\\\) nor any other character that could result in\\n * breaking out of a string parsing context are allowed;\\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\\n * @param {string} value Untrusted CSS property value.\\n * @return {boolean} True if property value is safe with respect to quote\\n *     balancedness.\\n * @private\\n */\\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\\n  var outsideSingle = true;\\n  var outsideDouble = true;\\n  for (var i = 0; i < value.length; i++) {\\n    var c = value.charAt(i);\\n    if (c == \\\"'\\\" && outsideDouble) {\\n      outsideSingle = !outsideSingle;\\n    } else if (c == '\\\"' && outsideSingle) {\\n      outsideDouble = !outsideDouble;\\n    }\\n  }\\n  return outsideSingle && outsideDouble;\\n};\\n\\n\\n/**\\n * Characters allowed in goog.html.SafeStyle.VALUE_RE_.\\n * @private {string}\\n */\\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = '[-,.\\\"\\\\'%_!# a-zA-Z0-9]';\\n\\n\\n/**\\n * Regular expression for safe values.\\n *\\n * Quotes (\\\" and ') are allowed, but a check must be done elsewhere to ensure\\n * they're balanced.\\n *\\n * ',' allows multiple values to be assigned to the same property\\n * (e.g. background-attachment or font-family) and hence could allow\\n * multiple values to get injected, but that should pose no risk of XSS.\\n *\\n * The expression checks only for XSS safety, not for CSS validity.\\n * @const {!RegExp}\\n * @private\\n */\\ngoog.html.SafeStyle.VALUE_RE_ =\\n    new RegExp('^' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + '+$');\\n\\n\\n/**\\n * Regular expression for url(). We support URLs allowed by\\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\\n * sequences. Use percent-encoding if you need to use special characters like\\n * backslash.\\n * @private @const {!RegExp}\\n */\\ngoog.html.SafeUrl.URL_RE_ = new RegExp(\\n    '\\\\\\\\b(url\\\\\\\\([ \\\\t\\\\n]*)(' +\\n        '\\\\'[ -&(-\\\\\\\\[\\\\\\\\]-~]*\\\\'' +  // Printable characters except ' and \\\\.\\n        '|\\\"[ !#-\\\\\\\\[\\\\\\\\]-~]*\\\"' +    // Printable characters except \\\" and \\\\.\\n        '|[!#-&*-\\\\\\\\[\\\\\\\\]-~]*' +    // Printable characters except [ \\\"'()\\\\\\\\].\\n        ')([ \\\\t\\\\n]*\\\\\\\\))',\\n    'g');\\n\\n\\n/**\\n * Regular expression for simple functions.\\n * @private @const {!RegExp}\\n */\\ngoog.html.SafeUrl.FUNCTIONS_RE_ = new RegExp(\\n    '\\\\\\\\b(hsl|hsla|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?)' +\\n        '\\\\\\\\([-0-9a-z.%, ]+\\\\\\\\)',\\n    'g');\\n\\n\\n/**\\n * Sanitize URLs inside url().\\n *\\n * NOTE: We could also consider using CSS.escape once that's available in the\\n * browsers. However, loosely matching URL e.g. with url\\\\(.*\\\\) and then escaping\\n * the contents would result in a slightly different language than CSS leading\\n * to confusion of users. E.g. url(\\\")\\\") is valid in CSS but it would be invalid\\n * as seen by our parser. On the other hand, url(\\\\) is invalid in CSS but our\\n * parser would be fine with it.\\n *\\n * @param {string} value Untrusted CSS property value.\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\\n  return value.replace(\\n      goog.html.SafeUrl.URL_RE_, function(match, before, url, after) {\\n        var quote = '';\\n        url = url.replace(/^(['\\\"])(.*)\\\\1$/, function(match, start, inside) {\\n          quote = start;\\n          return inside;\\n        });\\n        var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\\n        return before + quote + sanitized + quote + after;\\n      });\\n};\\n\\n\\n/**\\n * Creates a new SafeStyle object by concatenating the values.\\n * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args\\n *     SafeStyles to concatenate.\\n * @return {!goog.html.SafeStyle}\\n */\\ngoog.html.SafeStyle.concat = function(var_args) {\\n  var style = '';\\n\\n  /**\\n   * @param {!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>} argument\\n   */\\n  var addArgument = function(argument) {\\n    if (goog.isArray(argument)) {\\n      goog.array.forEach(argument, addArgument);\\n    } else {\\n      style += goog.html.SafeStyle.unwrap(argument);\\n    }\\n  };\\n\\n  goog.array.forEach(arguments, addArgument);\\n  if (!style) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      style);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"html\",\"SafeStyle\",\"goog.html.SafeStyle\",\"privateDoNotAccessOrElseSafeStyleWrappedValue_\",\"SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"prototype\",\"implementsGoogStringTypedString\",\"fromConstant\",\"goog.html.SafeStyle.fromConstant\",\"style\",\"styleString\",\"string\",\"Const\",\"unwrap\",\"length\",\"EMPTY\",\"checkStyle_\",\"asserts\",\"assert\",\"endsWith\",\"contains\",\"createSafeStyleSecurityPrivateDoNotAccessOrElse\",\"goog.html.SafeStyle.checkStyle_\",\"test\",\"getTypedStringValue\",\"goog.html.SafeStyle.prototype.getTypedStringValue\",\"DEBUG\",\"toString\",\"goog.html.SafeStyle.prototype.toString\",\"goog.html.SafeStyle.unwrap\",\"safeStyle\",\"constructor\",\"fail\",\"typeOf\",\"goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse\",\"initSecurityPrivateDoNotAccessOrElse_\",\"goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_\",\"INNOCUOUS_STRING\",\"PropertyValue\",\"PropertyMap\",\"create\",\"goog.html.SafeStyle.create\",\"map\",\"name\",\"Error\",\"value\",\"isArray\",\"array\",\"sanitizePropertyValue_\",\"join\",\"goog.html.SafeStyle.sanitizePropertyValue_\",\"SafeUrl\",\"url\",\"replace\",\"result\",\"sanitizePropertyValueString_\",\"String\",\"goog.html.SafeStyle.sanitizePropertyValueString_\",\"valueWithoutFunctions\",\"FUNCTIONS_RE_\",\"URL_RE_\",\"VALUE_RE_\",\"VALUE_ALLOWED_CHARS_\",\"hasBalancedQuotes_\",\"sanitizeUrl_\",\"goog.html.SafeStyle.hasBalancedQuotes_\",\"outsideSingle\",\"outsideDouble\",\"i\",\"c\",\"charAt\",\"RegExp\",\"goog.html.SafeStyle.sanitizeUrl_\",\"match\",\"before\",\"after\",\"quote\",\"start\",\"inside\",\"sanitized\",\"sanitize\",\"concat\",\"goog.html.SafeStyle.concat\",\"var_args\",\"addArgument\",\"argument\",\"forEach\",\"arguments\"]\n}\n"]