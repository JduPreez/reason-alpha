["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/dom/safe.js"],"~:js","goog.provide(\"goog.dom.safe\");\ngoog.provide(\"goog.dom.safe.InsertAdjacentHtmlPosition\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.dom.asserts\");\ngoog.require(\"goog.html.SafeHtml\");\ngoog.require(\"goog.html.SafeScript\");\ngoog.require(\"goog.html.SafeStyle\");\ngoog.require(\"goog.html.SafeUrl\");\ngoog.require(\"goog.html.TrustedResourceUrl\");\ngoog.require(\"goog.string\");\ngoog.require(\"goog.string.Const\");\n/** @enum {string} */ goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:\"afterbegin\", AFTEREND:\"afterend\", BEFOREBEGIN:\"beforebegin\", BEFOREEND:\"beforeend\"};\n/**\n * @param {!Node} node\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));\n};\n/** @private @const @type {!Object<string,boolean>} */ goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\"MATH\":true, \"SCRIPT\":true, \"STYLE\":true, \"SVG\":true, \"TEMPLATE\":true};\n/**\n * @param {!Element} elem\n * @param {!goog.html.SafeHtml} html\n * @throws {Error}\n */\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \" + elem.tagName + \".\");\n    }\n  }\n  elem.innerHTML = goog.html.SafeHtml.unwrap(html);\n};\n/**\n * @param {!Element} elem\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  elem.outerHTML = goog.html.SafeHtml.unwrap(html);\n};\n/**\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n */\ngoog.dom.safe.setStyle = function(elem, style) {\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\n/**\n * @param {!Document} doc\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.documentWrite = function(doc, html) {\n  doc.write(goog.html.SafeHtml.unwrap(html));\n};\n/**\n * @param {!HTMLAnchorElement} anchor\n * @param {(string|!goog.html.SafeUrl)} url\n */\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */ var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * @param {!HTMLImageElement} imageElement\n * @param {(string|!goog.html.SafeUrl)} url\n */\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */ var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * @param {!HTMLEmbedElement} embed\n * @param {!goog.html.TrustedResourceUrl} url\n */\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n/**\n * @param {!HTMLFrameElement} frame\n * @param {!goog.html.TrustedResourceUrl} url\n */\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n/**\n * @param {!HTMLIFrameElement} iframe\n * @param {!goog.html.TrustedResourceUrl} url\n */\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n/**\n * @param {!HTMLIFrameElement} iframe\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrap(html);\n};\n/**\n * @param {!HTMLLinkElement} link\n * @param {(string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl)} url\n * @param {string} rel\n * @throws {Error}\n */\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.caseInsensitiveContains(rel, \"stylesheet\")) {\n    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else {\n    if (url instanceof goog.html.TrustedResourceUrl) {\n      link.href = goog.html.TrustedResourceUrl.unwrap(url);\n    } else {\n      if (url instanceof goog.html.SafeUrl) {\n        link.href = goog.html.SafeUrl.unwrap(url);\n      } else {\n        link.href = goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();\n      }\n    }\n  }\n};\n/**\n * @param {!HTMLObjectElement} object\n * @param {!goog.html.TrustedResourceUrl} url\n */\ngoog.dom.safe.setObjectData = function(object, url) {\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrap(url);\n};\n/**\n * @param {!HTMLScriptElement} script\n * @param {!goog.html.TrustedResourceUrl} url\n */\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n/**\n * @param {!HTMLScriptElement} script\n * @param {!goog.html.SafeScript} content\n */\ngoog.dom.safe.setScriptContent = function(script, content) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.text = goog.html.SafeScript.unwrap(content);\n};\n/**\n * @param {!Location} loc\n * @param {(string|!goog.html.SafeUrl)} url\n */\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */ var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * @param {(string|!goog.html.SafeUrl)} url\n * @param {Window=} opt_openerWin\n * @param {!goog.string.Const=} opt_name\n * @param {string=} opt_specs\n * @param {boolean=} opt_replace\n * @return {Window}\n */\ngoog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  /** @type {!goog.html.SafeUrl} */ var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || window;\n  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : \"\", opt_specs, opt_replace);\n};\n","~:source","// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\n *\n * This file provides type-safe wrappers for DOM APIs that can result in\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\n * safe wrappers consume values of types from the goog.html package whose\n * contract promises that values are safe to use in the corresponding context.\n *\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\n * only reference to security-sensitive raw DOM APIs are in this file) is\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\n * correctness of code that produces values of the respective goog.html types,\n * and absent code that violates type safety).\n *\n * For example, assigning to an element's .innerHTML property a string that is\n * derived (even partially) from untrusted input typically results in an XSS\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\n * value of type goog.html.SafeHtml, whose contract states that using its values\n * in a HTML context will not result in XSS. Hence a program that is free of\n * direct assignments to any element's innerHTML property (with the exception of\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\n * due to assignment of untrusted strings to the innerHTML property.\n */\n\ngoog.provide('goog.dom.safe');\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\n\ngoog.require('goog.asserts');\ngoog.require('goog.dom.asserts');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.string');\ngoog.require('goog.string.Const');\n\n\n/** @enum {string} */\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\n  AFTERBEGIN: 'afterbegin',\n  AFTEREND: 'afterend',\n  BEFOREBEGIN: 'beforebegin',\n  BEFOREEND: 'beforeend'\n};\n\n\n/**\n * Inserts known-safe HTML into a Node, at the specified position.\n * @param {!Node} node The node on which to call insertAdjacentHTML.\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\n *     to insert the HTML.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\n */\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Tags not allowed in goog.dom.safe.setInnerHtml.\n * @private @const {!Object<string, boolean>}\n */\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\n  'MATH': true,\n  'SCRIPT': true,\n  'STYLE': true,\n  'SVG': true,\n  'TEMPLATE': true\n};\n\n\n/**\n * Assigns known-safe HTML to an element's innerHTML property.\n * @param {!Element} elem The element whose innerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @throws {Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw Error(\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\n          elem.tagName + '.');\n    }\n  }\n  elem.innerHTML = goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Assigns known-safe HTML to an element's outerHTML property.\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  elem.outerHTML = goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Sets the given element's style property to the contents of the provided\n * SafeStyle object.\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n */\ngoog.dom.safe.setStyle = function(elem, style) {\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\n\n\n/**\n * Writes known-safe HTML to a document.\n * @param {!Document} doc The document to be written to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.documentWrite = function(doc, html) {\n  doc.write(goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Safely assigns a URL to an anchor element's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\n * which is a safe alternative to\n *   anchorEl.href = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an image element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * image's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLImageElement} imageElement The image element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an embed element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\n * which is a safe alternative to\n *   embedEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLEmbedElement} embed The embed element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a frame element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setFrameSrc(frameEl, url);\n * which is a safe alternative to\n *   frameEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLFrameElement} frame The frame element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to an iframe element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\n * which is a safe alternative to\n *   iframeEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns HTML to an iframe element's srcdoc property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\n * which is a safe alternative to\n *   iframeEl.srcdoc = html;\n * The latter can result in loading untrusted code.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\n *     is to be assigned to.\n * @param {!goog.html.SafeHtml} html The HTML to assign.\n */\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Safely sets a link element's href and rel properties. Whether or not\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\n * depends on the value of the rel property. If rel contains \"stylesheet\"\n * then a TrustedResourceUrl is required.\n *\n * Example usage:\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\n * which is a safe alternative to\n *   linkEl.rel = 'stylesheet';\n *   linkEl.href = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLLinkElement} link The link element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\n *     to assign to the href property. Must be a TrustedResourceUrl if the\n *     value assigned to rel contains \"stylesheet\". A string value is\n *     sanitized with goog.html.SafeUrl.sanitize.\n * @param {string} rel The value to assign to the rel property.\n * @throws {Error} if rel contains \"stylesheet\" and url is not a\n *     TrustedResourceUrl\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.caseInsensitiveContains(rel, 'stylesheet')) {\n    goog.asserts.assert(\n        url instanceof goog.html.TrustedResourceUrl,\n        'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.SafeUrl) {\n    link.href = goog.html.SafeUrl.unwrap(url);\n  } else {  // string\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\n    link.href =\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();\n  }\n};\n\n\n/**\n * Safely assigns a URL to an object element's data property.\n *\n * Example usage:\n *   goog.dom.safe.setObjectData(objectEl, url);\n * which is a safe alternative to\n *   objectEl.data = url;\n * The latter can result in loading untrusted code unless setit is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLObjectElement} object The object element whose data property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setObjectData = function(object, url) {\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a script element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\n * which is a safe alternative to\n *   scriptEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a value to a script element's content.\n *\n * Example usage:\n *   goog.dom.safe.setScriptContent(scriptEl, content);\n * which is a safe alternative to\n *   scriptEl.text = content;\n * The latter can result in executing untrusted code unless it is ensured that\n * the code is loaded from a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose content is being\n *     set.\n * @param {!goog.html.SafeScript} content The content to assign.\n */\ngoog.dom.safe.setScriptContent = function(script, content) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.text = goog.html.SafeScript.unwrap(content);\n};\n\n\n/**\n * Safely assigns a URL to a Location object's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * loc's href property.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\n * which is a safe alternative to\n *   document.location.href = redirectUrl;\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object whose href property is to be\n *     assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely opens a URL in a new window (via window.open).\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\n * window.open.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Note that this function does not prevent leakages via the referer that is\n * sent by window.open. It is advised to only use this to open 1st party URLs.\n *\n * Example usage:\n *   goog.dom.safe.openInWindow(url);\n * which is a safe alternative to\n *   window.open(url);\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {string|!goog.html.SafeUrl} url The URL to open.\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\n *     Defaults to the global window.\n * @param {!goog.string.Const=} opt_name Name of the window to open in. Can be\n *     _top, etc as allowed by window.open().\n * @param {string=} opt_specs Comma-separated list of specifications, same as\n *     in window.open().\n * @param {boolean=} opt_replace Whether to replace the current entry in browser\n *     history, same as in window.open().\n * @return {Window} Window the url was opened in.\n */\ngoog.dom.safe.openInWindow = function(\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || window;\n  return win.open(\n      goog.html.SafeUrl.unwrap(safeUrl),\n      // If opt_name is undefined, simply passing that in to open() causes IE to\n      // reuse the current window instead of opening a new one. Thus we pass ''\n      // in instead, which according to spec opens a new window. See\n      // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\n      opt_name ? goog.string.Const.unwrap(opt_name) : '', opt_specs,\n      opt_replace);\n};\n","~:compiled-at",1574163696324,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.dom.safe.js\",\n\"lineCount\":197,\n\"mappings\":\"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\",\n\"sources\":[\"goog/dom/safe.js\"],\n\"sourcesContent\":[\"// Copyright 2013 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\\n *\\n * This file provides type-safe wrappers for DOM APIs that can result in\\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\\n * safe wrappers consume values of types from the goog.html package whose\\n * contract promises that values are safe to use in the corresponding context.\\n *\\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\\n * only reference to security-sensitive raw DOM APIs are in this file) is\\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\\n * correctness of code that produces values of the respective goog.html types,\\n * and absent code that violates type safety).\\n *\\n * For example, assigning to an element's .innerHTML property a string that is\\n * derived (even partially) from untrusted input typically results in an XSS\\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\\n * value of type goog.html.SafeHtml, whose contract states that using its values\\n * in a HTML context will not result in XSS. Hence a program that is free of\\n * direct assignments to any element's innerHTML property (with the exception of\\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\\n * due to assignment of untrusted strings to the innerHTML property.\\n */\\n\\ngoog.provide('goog.dom.safe');\\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.dom.asserts');\\ngoog.require('goog.html.SafeHtml');\\ngoog.require('goog.html.SafeScript');\\ngoog.require('goog.html.SafeStyle');\\ngoog.require('goog.html.SafeUrl');\\ngoog.require('goog.html.TrustedResourceUrl');\\ngoog.require('goog.string');\\ngoog.require('goog.string.Const');\\n\\n\\n/** @enum {string} */\\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\\n  AFTERBEGIN: 'afterbegin',\\n  AFTEREND: 'afterend',\\n  BEFOREBEGIN: 'beforebegin',\\n  BEFOREEND: 'beforeend'\\n};\\n\\n\\n/**\\n * Inserts known-safe HTML into a Node, at the specified position.\\n * @param {!Node} node The node on which to call insertAdjacentHTML.\\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\\n *     to insert the HTML.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\\n */\\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));\\n};\\n\\n\\n/**\\n * Tags not allowed in goog.dom.safe.setInnerHtml.\\n * @private @const {!Object<string, boolean>}\\n */\\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\\n  'MATH': true,\\n  'SCRIPT': true,\\n  'STYLE': true,\\n  'SVG': true,\\n  'TEMPLATE': true\\n};\\n\\n\\n/**\\n * Assigns known-safe HTML to an element's innerHTML property.\\n * @param {!Element} elem The element whose innerHTML is to be assigned to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n * @throws {Error} If called with one of these tags: math, script, style, svg,\\n *     template.\\n */\\ngoog.dom.safe.setInnerHtml = function(elem, html) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var tagName = elem.tagName.toUpperCase();\\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\\n      throw Error(\\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\\n          elem.tagName + '.');\\n    }\\n  }\\n  elem.innerHTML = goog.html.SafeHtml.unwrap(html);\\n};\\n\\n\\n/**\\n * Assigns known-safe HTML to an element's outerHTML property.\\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n */\\ngoog.dom.safe.setOuterHtml = function(elem, html) {\\n  elem.outerHTML = goog.html.SafeHtml.unwrap(html);\\n};\\n\\n\\n/**\\n * Sets the given element's style property to the contents of the provided\\n * SafeStyle object.\\n * @param {!Element} elem\\n * @param {!goog.html.SafeStyle} style\\n */\\ngoog.dom.safe.setStyle = function(elem, style) {\\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\\n};\\n\\n\\n/**\\n * Writes known-safe HTML to a document.\\n * @param {!Document} doc The document to be written to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n */\\ngoog.dom.safe.documentWrite = function(doc, html) {\\n  doc.write(goog.html.SafeHtml.unwrap(html));\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an anchor element's href property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * anchor's href property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\\n * which is a safe alternative to\\n *   anchorEl.href = url;\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an image element's src property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * image's src property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * @param {!HTMLImageElement} imageElement The image element whose src property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an embed element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\\n * which is a safe alternative to\\n *   embedEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLEmbedElement} embed The embed element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\\n  embed.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a frame element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setFrameSrc(frameEl, url);\\n * which is a safe alternative to\\n *   frameEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLFrameElement} frame The frame element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setFrameSrc = function(frame, url) {\\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an iframe element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\\n * which is a safe alternative to\\n *   iframeEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns HTML to an iframe element's srcdoc property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\\n * which is a safe alternative to\\n *   iframeEl.srcdoc = html;\\n * The latter can result in loading untrusted code.\\n *\\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\\n *     is to be assigned to.\\n * @param {!goog.html.SafeHtml} html The HTML to assign.\\n */\\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\\n  iframe.srcdoc = goog.html.SafeHtml.unwrap(html);\\n};\\n\\n\\n/**\\n * Safely sets a link element's href and rel properties. Whether or not\\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\\n * depends on the value of the rel property. If rel contains \\\"stylesheet\\\"\\n * then a TrustedResourceUrl is required.\\n *\\n * Example usage:\\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\\n * which is a safe alternative to\\n *   linkEl.rel = 'stylesheet';\\n *   linkEl.href = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLLinkElement} link The link element whose href property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\\n *     to assign to the href property. Must be a TrustedResourceUrl if the\\n *     value assigned to rel contains \\\"stylesheet\\\". A string value is\\n *     sanitized with goog.html.SafeUrl.sanitize.\\n * @param {string} rel The value to assign to the rel property.\\n * @throws {Error} if rel contains \\\"stylesheet\\\" and url is not a\\n *     TrustedResourceUrl\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\\n  link.rel = rel;\\n  if (goog.string.caseInsensitiveContains(rel, 'stylesheet')) {\\n    goog.asserts.assert(\\n        url instanceof goog.html.TrustedResourceUrl,\\n        'URL must be TrustedResourceUrl because \\\"rel\\\" contains \\\"stylesheet\\\"');\\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\\n  } else if (url instanceof goog.html.SafeUrl) {\\n    link.href = goog.html.SafeUrl.unwrap(url);\\n  } else {  // string\\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\\n    link.href =\\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();\\n  }\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an object element's data property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setObjectData(objectEl, url);\\n * which is a safe alternative to\\n *   objectEl.data = url;\\n * The latter can result in loading untrusted code unless setit is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLObjectElement} object The object element whose data property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setObjectData = function(object, url) {\\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\\n  object.data = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a script element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\\n * which is a safe alternative to\\n *   scriptEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLScriptElement} script The script element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setScriptSrc = function(script, url) {\\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\\n  script.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns a value to a script element's content.\\n *\\n * Example usage:\\n *   goog.dom.safe.setScriptContent(scriptEl, content);\\n * which is a safe alternative to\\n *   scriptEl.text = content;\\n * The latter can result in executing untrusted code unless it is ensured that\\n * the code is loaded from a trustworthy resource.\\n *\\n * @param {!HTMLScriptElement} script The script element whose content is being\\n *     set.\\n * @param {!goog.html.SafeScript} content The content to assign.\\n */\\ngoog.dom.safe.setScriptContent = function(script, content) {\\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\\n  script.text = goog.html.SafeScript.unwrap(content);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a Location object's href property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * loc's href property.  If url is of type string however, it is first sanitized\\n * using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\\n * which is a safe alternative to\\n *   document.location.href = redirectUrl;\\n * The latter can result in XSS vulnerabilities if redirectUrl is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Location} loc The Location object whose href property is to be\\n *     assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setLocationHref = function(loc, url) {\\n  goog.dom.asserts.assertIsLocation(loc);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n\\n/**\\n * Safely opens a URL in a new window (via window.open).\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\\n * window.open.  If url is of type string however, it is first sanitized\\n * using goog.html.SafeUrl.sanitize.\\n *\\n * Note that this function does not prevent leakages via the referer that is\\n * sent by window.open. It is advised to only use this to open 1st party URLs.\\n *\\n * Example usage:\\n *   goog.dom.safe.openInWindow(url);\\n * which is a safe alternative to\\n *   window.open(url);\\n * The latter can result in XSS vulnerabilities if redirectUrl is a\\n * user-/attacker-controlled value.\\n *\\n * @param {string|!goog.html.SafeUrl} url The URL to open.\\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\\n *     Defaults to the global window.\\n * @param {!goog.string.Const=} opt_name Name of the window to open in. Can be\\n *     _top, etc as allowed by window.open().\\n * @param {string=} opt_specs Comma-separated list of specifications, same as\\n *     in window.open().\\n * @param {boolean=} opt_replace Whether to replace the current entry in browser\\n *     history, same as in window.open().\\n * @return {Window} Window the url was opened in.\\n */\\ngoog.dom.safe.openInWindow = function(\\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  var win = opt_openerWin || window;\\n  return win.open(\\n      goog.html.SafeUrl.unwrap(safeUrl),\\n      // If opt_name is undefined, simply passing that in to open() causes IE to\\n      // reuse the current window instead of opening a new one. Thus we pass ''\\n      // in instead, which according to spec opens a new window. See\\n      // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\\n      opt_name ? goog.string.Const.unwrap(opt_name) : '', opt_specs,\\n      opt_replace);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"dom\",\"safe\",\"InsertAdjacentHtmlPosition\",\"AFTERBEGIN\",\"AFTEREND\",\"BEFOREBEGIN\",\"BEFOREEND\",\"insertAdjacentHtml\",\"goog.dom.safe.insertAdjacentHtml\",\"node\",\"position\",\"html\",\"insertAdjacentHTML\",\"SafeHtml\",\"unwrap\",\"SET_INNER_HTML_DISALLOWED_TAGS_\",\"setInnerHtml\",\"goog.dom.safe.setInnerHtml\",\"elem\",\"asserts\",\"ENABLE_ASSERTS\",\"tagName\",\"toUpperCase\",\"Error\",\"innerHTML\",\"setOuterHtml\",\"goog.dom.safe.setOuterHtml\",\"outerHTML\",\"setStyle\",\"goog.dom.safe.setStyle\",\"style\",\"cssText\",\"SafeStyle\",\"documentWrite\",\"goog.dom.safe.documentWrite\",\"doc\",\"write\",\"setAnchorHref\",\"goog.dom.safe.setAnchorHref\",\"anchor\",\"url\",\"assertIsHTMLAnchorElement\",\"safeUrl\",\"SafeUrl\",\"sanitizeAssertUnchanged\",\"href\",\"setImageSrc\",\"goog.dom.safe.setImageSrc\",\"imageElement\",\"assertIsHTMLImageElement\",\"src\",\"setEmbedSrc\",\"goog.dom.safe.setEmbedSrc\",\"embed\",\"assertIsHTMLEmbedElement\",\"TrustedResourceUrl\",\"setFrameSrc\",\"goog.dom.safe.setFrameSrc\",\"frame\",\"assertIsHTMLFrameElement\",\"setIframeSrc\",\"goog.dom.safe.setIframeSrc\",\"iframe\",\"assertIsHTMLIFrameElement\",\"setIframeSrcdoc\",\"goog.dom.safe.setIframeSrcdoc\",\"srcdoc\",\"setLinkHrefAndRel\",\"goog.dom.safe.setLinkHrefAndRel\",\"link\",\"rel\",\"assertIsHTMLLinkElement\",\"string\",\"caseInsensitiveContains\",\"assert\",\"getTypedStringValue\",\"setObjectData\",\"goog.dom.safe.setObjectData\",\"object\",\"assertIsHTMLObjectElement\",\"data\",\"setScriptSrc\",\"goog.dom.safe.setScriptSrc\",\"script\",\"assertIsHTMLScriptElement\",\"setScriptContent\",\"goog.dom.safe.setScriptContent\",\"content\",\"text\",\"SafeScript\",\"setLocationHref\",\"goog.dom.safe.setLocationHref\",\"loc\",\"assertIsLocation\",\"openInWindow\",\"goog.dom.safe.openInWindow\",\"opt_openerWin\",\"opt_name\",\"opt_specs\",\"opt_replace\",\"win\",\"window\",\"open\",\"Const\"]\n}\n"]