["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/string/const.js"],"~:js","goog.provide(\"goog.string.Const\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.string.TypedString\");\n/**\n * @final\n * @struct\n * @constructor\n * @implements {goog.string.TypedString}\n */\ngoog.string.Const = function() {\n  /** @private @type {string} */ this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = \"\";\n  /** @private @const @type {!Object} */ this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;\n};\n/** @const @override */ goog.string.Const.prototype.implementsGoogStringTypedString = true;\n/** @override */ goog.string.Const.prototype.getTypedStringValue = function() {\n  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n};\n/** @override */ goog.string.Const.prototype.toString = function() {\n  return \"Const{\" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + \"}\";\n};\n/**\n * @param {!goog.string.Const} stringConst\n * @return {string}\n */\ngoog.string.Const.unwrap = function(stringConst) {\n  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {\n    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n  } else {\n    goog.asserts.fail(\"expected object of type Const, got '\" + stringConst + \"'\");\n    return \"type_error:Const\";\n  }\n};\n/**\n * @param {string} s\n * @return {!goog.string.Const}\n */\ngoog.string.Const.from = function(s) {\n  return goog.string.Const.create__googStringSecurityPrivate_(s);\n};\n/** @private @const @type {!Object} */ goog.string.Const.TYPE_MARKER_ = {};\n/**\n * @private\n * @param {string} s\n * @return {!goog.string.Const}\n */\ngoog.string.Const.create__googStringSecurityPrivate_ = function(s) {\n  var stringConst = new goog.string.Const;\n  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;\n  return stringConst;\n};\n/** @const @type {!goog.string.Const} */ goog.string.Const.EMPTY = goog.string.Const.from(\"\");\n","~:source","// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide('goog.string.Const');\n\ngoog.require('goog.asserts');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * Wrapper for compile-time-constant strings.\n *\n * Const is a wrapper for strings that can only be created from program\n * constants (i.e., string literals).  This property relies on a custom Closure\n * compiler check that {@code goog.string.Const.from} is only invoked on\n * compile-time-constant expressions.\n *\n * Const is useful in APIs whose correct and secure use requires that certain\n * arguments are not attacker controlled: Compile-time constants are inherently\n * under the control of the application and not under control of external\n * attackers, and hence are safe to use in such contexts.\n *\n * Instances of this type must be created via its factory method\n * {@code goog.string.Const.from} and not by invoking its constructor.  The\n * constructor intentionally takes no parameters and the type is immutable;\n * hence only a default instance corresponding to the empty string can be\n * obtained via constructor invocation.\n *\n * @see goog.string.Const#from\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.string.Const = function() {\n  /**\n   * The wrapped value of this Const object.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = '';\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.string.Const#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =\n      goog.string.Const.TYPE_MARKER_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.string.Const.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this Const's value a string.\n *\n * IMPORTANT: In code where it is security-relevant that an object's type is\n * indeed {@code goog.string.Const}, use {@code goog.string.Const.unwrap}\n * instead of this method.\n *\n * @see goog.string.Const#unwrap\n * @override\n */\ngoog.string.Const.prototype.getTypedStringValue = function() {\n  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n};\n\n\n/**\n * Returns a debug-string representation of this value.\n *\n * To obtain the actual string value wrapped inside an object of this type,\n * use {@code goog.string.Const.unwrap}.\n *\n * @see goog.string.Const#unwrap\n * @override\n */\ngoog.string.Const.prototype.toString = function() {\n  return 'Const{' +\n      this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +\n      '}';\n};\n\n\n/**\n * Performs a runtime check that the provided object is indeed an instance\n * of {@code goog.string.Const}, and returns its value.\n * @param {!goog.string.Const} stringConst The object to extract from.\n * @return {string} The Const object's contained string, unless the run-time\n *     type check fails. In that case, {@code unwrap} returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     {@code goog.asserts.AssertionError}.\n */\ngoog.string.Const.unwrap = function(stringConst) {\n  // Perform additional run-time type-checking to ensure that stringConst is\n  // indeed an instance of the expected type.  This provides some additional\n  // protection against security bugs due to application code that disables type\n  // checks.\n  if (stringConst instanceof goog.string.Const &&\n      stringConst.constructor === goog.string.Const &&\n      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===\n          goog.string.Const.TYPE_MARKER_) {\n    return stringConst\n        .stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n  } else {\n    goog.asserts.fail(\n        'expected object of type Const, got \\'' + stringConst + '\\'');\n    return 'type_error:Const';\n  }\n};\n\n\n/**\n * Creates a Const object from a compile-time constant string.\n *\n * It is illegal to invoke this function on an expression whose\n * compile-time-contant value cannot be determined by the Closure compiler.\n *\n * Correct invocations include,\n * <pre>\n *   var s = goog.string.Const.from('hello');\n *   var t = goog.string.Const.from('hello' + 'world');\n * </pre>\n *\n * In contrast, the following are illegal:\n * <pre>\n *   var s = goog.string.Const.from(getHello());\n *   var t = goog.string.Const.from('hello' + world);\n * </pre>\n *\n * @param {string} s A constant string from which to create a Const.\n * @return {!goog.string.Const} A Const object initialized to stringConst.\n */\ngoog.string.Const.from = function(s) {\n  return goog.string.Const.create__googStringSecurityPrivate_(s);\n};\n\n\n/**\n * Type marker for the Const type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.string.Const.TYPE_MARKER_ = {};\n\n\n/**\n * Utility method to create Const instances.\n * @param {string} s The string to initialize the Const object with.\n * @return {!goog.string.Const} The initialized Const object.\n * @private\n */\ngoog.string.Const.create__googStringSecurityPrivate_ = function(s) {\n  var stringConst = new goog.string.Const();\n  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =\n      s;\n  return stringConst;\n};\n\n\n/**\n * A Const instance wrapping the empty string.\n * @const {!goog.string.Const}\n */\ngoog.string.Const.EMPTY = goog.string.Const.from('');\n","~:compiled-at",1574163696311,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.string.const.js\",\n\"lineCount\":52,\n\"mappings\":\"AAcAA,IAAAC,QAAA,CAAa,mBAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,cAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,yBAAb,CAAA;AA6BA;;;;;;AAAAF,IAAAG,OAAAC,MAAA,GAAoBC,QAAQ,EAAG;AAO7B,iCAAA,IAAAC,iEAAA,GAAwE,EAAxE;AAQA,yCAAA,IAAAC,wDAAA,GACIP,IAAAG,OAAAC,MAAAI,aADJ;AAf6B,CAA/B;AAwBA,wBAAAR,IAAAG,OAAAC,MAAAK,UAAAC,gCAAA,GAA8D,IAA9D;AAaA,iBAAAV,IAAAG,OAAAC,MAAAK,UAAAE,oBAAA,GAAkDC,QAAQ,EAAG;AAC3D,SAAO,IAAAN,iEAAP;AAD2D,CAA7D;AAcA,iBAAAN,IAAAG,OAAAC,MAAAK,UAAAI,SAAA,GAAuCC,QAAQ,EAAG;AAChD,SAAO,QAAP,GACI,IAAAR,iEADJ,GAEI,GAFJ;AADgD,CAAlD;AAgBA;;;;AAAAN,IAAAG,OAAAC,MAAAW,OAAA,GAA2BC,QAAQ,CAACC,WAAD,CAAc;AAK/C,MAAIA,WAAJ,YAA2BjB,IAAAG,OAAAC,MAA3B,IACIa,WAAAC,YADJ,KACgClB,IAAAG,OAAAC,MADhC,IAEIa,WAAAV,wDAFJ,KAGQP,IAAAG,OAAAC,MAAAI,aAHR;AAIE,WAAOS,WAAAX,iEAAP;AAJF,QAMO;AACLN,QAAAmB,QAAAC,KAAA,CACI,sCADJ,GAC8CH,WAD9C,GAC4D,GAD5D,CAAA;AAEA,WAAO,kBAAP;AAHK;AAXwC,CAAjD;AAwCA;;;;AAAAjB,IAAAG,OAAAC,MAAAiB,KAAA,GAAyBC,QAAQ,CAACC,CAAD,CAAI;AACnC,SAAOvB,IAAAG,OAAAC,MAAAoB,mCAAA,CAAqDD,CAArD,CAAP;AADmC,CAArC;AAWA,uCAAAvB,IAAAG,OAAAC,MAAAI,aAAA,GAAiC,EAAjC;AASA;;;;;AAAAR,IAAAG,OAAAC,MAAAoB,mCAAA,GAAuDC,QAAQ,CAACF,CAAD,CAAI;AACjE,MAAIN,cAAc,IAAIjB,IAAAG,OAAAC,MAAtB;AACAa,aAAAX,iEAAA,GACIiB,CADJ;AAEA,SAAON,WAAP;AAJiE,CAAnE;AAYA,yCAAAjB,IAAAG,OAAAC,MAAAsB,MAAA,GAA0B1B,IAAAG,OAAAC,MAAAiB,KAAA,CAAuB,EAAvB,CAA1B;;\",\n\"sources\":[\"goog/string/const.js\"],\n\"sourcesContent\":[\"// Copyright 2013 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\ngoog.provide('goog.string.Const');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.string.TypedString');\\n\\n\\n\\n/**\\n * Wrapper for compile-time-constant strings.\\n *\\n * Const is a wrapper for strings that can only be created from program\\n * constants (i.e., string literals).  This property relies on a custom Closure\\n * compiler check that {@code goog.string.Const.from} is only invoked on\\n * compile-time-constant expressions.\\n *\\n * Const is useful in APIs whose correct and secure use requires that certain\\n * arguments are not attacker controlled: Compile-time constants are inherently\\n * under the control of the application and not under control of external\\n * attackers, and hence are safe to use in such contexts.\\n *\\n * Instances of this type must be created via its factory method\\n * {@code goog.string.Const.from} and not by invoking its constructor.  The\\n * constructor intentionally takes no parameters and the type is immutable;\\n * hence only a default instance corresponding to the empty string can be\\n * obtained via constructor invocation.\\n *\\n * @see goog.string.Const#from\\n * @constructor\\n * @final\\n * @struct\\n * @implements {goog.string.TypedString}\\n */\\ngoog.string.Const = function() {\\n  /**\\n   * The wrapped value of this Const object.  The field has a purposely ugly\\n   * name to make (non-compiled) code that attempts to directly access this\\n   * field stand out.\\n   * @private {string}\\n   */\\n  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = '';\\n\\n  /**\\n   * A type marker used to implement additional run-time type checking.\\n   * @see goog.string.Const#unwrap\\n   * @const {!Object}\\n   * @private\\n   */\\n  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =\\n      goog.string.Const.TYPE_MARKER_;\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.string.Const.prototype.implementsGoogStringTypedString = true;\\n\\n\\n/**\\n * Returns this Const's value a string.\\n *\\n * IMPORTANT: In code where it is security-relevant that an object's type is\\n * indeed {@code goog.string.Const}, use {@code goog.string.Const.unwrap}\\n * instead of this method.\\n *\\n * @see goog.string.Const#unwrap\\n * @override\\n */\\ngoog.string.Const.prototype.getTypedStringValue = function() {\\n  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\\n};\\n\\n\\n/**\\n * Returns a debug-string representation of this value.\\n *\\n * To obtain the actual string value wrapped inside an object of this type,\\n * use {@code goog.string.Const.unwrap}.\\n *\\n * @see goog.string.Const#unwrap\\n * @override\\n */\\ngoog.string.Const.prototype.toString = function() {\\n  return 'Const{' +\\n      this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +\\n      '}';\\n};\\n\\n\\n/**\\n * Performs a runtime check that the provided object is indeed an instance\\n * of {@code goog.string.Const}, and returns its value.\\n * @param {!goog.string.Const} stringConst The object to extract from.\\n * @return {string} The Const object's contained string, unless the run-time\\n *     type check fails. In that case, {@code unwrap} returns an innocuous\\n *     string, or, if assertions are enabled, throws\\n *     {@code goog.asserts.AssertionError}.\\n */\\ngoog.string.Const.unwrap = function(stringConst) {\\n  // Perform additional run-time type-checking to ensure that stringConst is\\n  // indeed an instance of the expected type.  This provides some additional\\n  // protection against security bugs due to application code that disables type\\n  // checks.\\n  if (stringConst instanceof goog.string.Const &&\\n      stringConst.constructor === goog.string.Const &&\\n      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===\\n          goog.string.Const.TYPE_MARKER_) {\\n    return stringConst\\n        .stringConstValueWithSecurityContract__googStringSecurityPrivate_;\\n  } else {\\n    goog.asserts.fail(\\n        'expected object of type Const, got \\\\'' + stringConst + '\\\\'');\\n    return 'type_error:Const';\\n  }\\n};\\n\\n\\n/**\\n * Creates a Const object from a compile-time constant string.\\n *\\n * It is illegal to invoke this function on an expression whose\\n * compile-time-contant value cannot be determined by the Closure compiler.\\n *\\n * Correct invocations include,\\n * <pre>\\n *   var s = goog.string.Const.from('hello');\\n *   var t = goog.string.Const.from('hello' + 'world');\\n * </pre>\\n *\\n * In contrast, the following are illegal:\\n * <pre>\\n *   var s = goog.string.Const.from(getHello());\\n *   var t = goog.string.Const.from('hello' + world);\\n * </pre>\\n *\\n * @param {string} s A constant string from which to create a Const.\\n * @return {!goog.string.Const} A Const object initialized to stringConst.\\n */\\ngoog.string.Const.from = function(s) {\\n  return goog.string.Const.create__googStringSecurityPrivate_(s);\\n};\\n\\n\\n/**\\n * Type marker for the Const type, used to implement additional run-time\\n * type checking.\\n * @const {!Object}\\n * @private\\n */\\ngoog.string.Const.TYPE_MARKER_ = {};\\n\\n\\n/**\\n * Utility method to create Const instances.\\n * @param {string} s The string to initialize the Const object with.\\n * @return {!goog.string.Const} The initialized Const object.\\n * @private\\n */\\ngoog.string.Const.create__googStringSecurityPrivate_ = function(s) {\\n  var stringConst = new goog.string.Const();\\n  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =\\n      s;\\n  return stringConst;\\n};\\n\\n\\n/**\\n * A Const instance wrapping the empty string.\\n * @const {!goog.string.Const}\\n */\\ngoog.string.Const.EMPTY = goog.string.Const.from('');\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"string\",\"Const\",\"goog.string.Const\",\"stringConstValueWithSecurityContract__googStringSecurityPrivate_\",\"STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_\",\"TYPE_MARKER_\",\"prototype\",\"implementsGoogStringTypedString\",\"getTypedStringValue\",\"goog.string.Const.prototype.getTypedStringValue\",\"toString\",\"goog.string.Const.prototype.toString\",\"unwrap\",\"goog.string.Const.unwrap\",\"stringConst\",\"constructor\",\"asserts\",\"fail\",\"from\",\"goog.string.Const.from\",\"s\",\"create__googStringSecurityPrivate_\",\"goog.string.Const.create__googStringSecurityPrivate_\",\"EMPTY\"]\n}\n"]