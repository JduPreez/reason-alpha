["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/html/trustedresourceurl.js"],"~:js","goog.provide(\"goog.html.TrustedResourceUrl\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.i18n.bidi.Dir\");\ngoog.require(\"goog.i18n.bidi.DirectionalString\");\ngoog.require(\"goog.string.Const\");\ngoog.require(\"goog.string.TypedString\");\n/**\n * @final\n * @struct\n * @constructor\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.TrustedResourceUrl = function() {\n  /** @private @type {string} */ this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = \"\";\n  /** @private @const @type {!Object} */ this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n/** @const @override */ goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;\n/** @override */ goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n};\n/** @const @override */ goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;\n/** @override */ goog.html.TrustedResourceUrl.prototype.getDirection = function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\nif (goog.DEBUG) {\n  /** @override */ goog.html.TrustedResourceUrl.prototype.toString = function() {\n    return \"TrustedResourceUrl{\" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + \"}\";\n  };\n}\n/**\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {string}\n */\ngoog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {\n  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n  } else {\n    goog.asserts.fail(\"expected object of type TrustedResourceUrl, got '\" + trustedResourceUrl + \"' of type \" + goog.typeOf(trustedResourceUrl));\n    return \"type_error:TrustedResourceUrl\";\n  }\n};\n/**\n * @param {!goog.string.Const} format\n * @param {!Object<string,(string|number|!goog.string.Const)>} args\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error}\n */\ngoog.html.TrustedResourceUrl.format = function(format, args) {\n  var result = goog.html.TrustedResourceUrl.format_(format, args);\n  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);\n};\n/**\n * @private\n * @param {!goog.string.Const} format\n * @param {!Object<string,(string|number|!goog.string.Const)>} args\n * @return {string}\n * @throws {!Error}\n */\ngoog.html.TrustedResourceUrl.format_ = function(format, args) {\n  var formatStr = goog.string.Const.unwrap(format);\n  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {\n    throw new Error(\"Invalid TrustedResourceUrl format: \" + formatStr);\n  }\n  return formatStr.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {\n    if (!Object.prototype.hasOwnProperty.call(args, id)) {\n      throw new Error('Found marker, \"' + id + '\", in format string, \"' + formatStr + '\", but no valid label mapping found ' + \"in args: \" + JSON.stringify(args));\n    }\n    var arg = args[id];\n    if (arg instanceof goog.string.Const) {\n      return goog.string.Const.unwrap(arg);\n    } else {\n      return encodeURIComponent(String(arg));\n    }\n  });\n};\n/** @private @const @type {!RegExp} */ goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\\w+)}/g;\n/** @private @const @type {!RegExp} */ goog.html.TrustedResourceUrl.BASE_URL_ = /^(?:https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|^\\/[^\\/\\\\]|^about:blank(#|$)/i;\n/**\n * @param {!goog.string.Const} format\n * @param {!Object<string,(string|number|!goog.string.Const)>} args\n * @param {!Object<string,*>} params\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error}\n */\ngoog.html.TrustedResourceUrl.formatWithParams = function(format, args, params) {\n  var url = goog.html.TrustedResourceUrl.format_(format, args);\n  var separator = /\\?/.test(url) ? \"\\x26\" : \"?\";\n  for (var key in params) {\n    if (params[key] == null) {\n      continue;\n    }\n    url += separator + encodeURIComponent(key) + \"\\x3d\" + encodeURIComponent(String(params[key]));\n    separator = \"\\x26\";\n  }\n  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n/**\n * @param {!goog.string.Const} url\n * @return {!goog.html.TrustedResourceUrl}\n */\ngoog.html.TrustedResourceUrl.fromConstant = function(url) {\n  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));\n};\n/**\n * @param {!Array<!goog.string.Const>} parts\n * @return {!goog.html.TrustedResourceUrl}\n */\ngoog.html.TrustedResourceUrl.fromConstants = function(parts) {\n  var unwrapped = \"\";\n  for (var i = 0; i < parts.length; i++) {\n    unwrapped += goog.string.Const.unwrap(parts[i]);\n  }\n  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);\n};\n/** @private @const @type {!Object} */ goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n/**\n * @package\n * @param {string} url\n * @return {!goog.html.TrustedResourceUrl}\n */\ngoog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {\n  var trustedResourceUrl = new goog.html.TrustedResourceUrl;\n  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;\n  return trustedResourceUrl;\n};\n","~:source","// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The TrustedResourceUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.TrustedResourceUrl');\n\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.bidi.Dir');\ngoog.require('goog.i18n.bidi.DirectionalString');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * A URL which is under application control and from which script, CSS, and\n * other resources that represent executable code, can be fetched.\n *\n * Given that the URL can only be constructed from strings under application\n * control and is used to load resources, bugs resulting in a malformed URL\n * should not have a security impact and are likely to be easily detectable\n * during testing. Given the wide number of non-RFC compliant URLs in use,\n * stricter validation could prevent some applications from being able to use\n * this type.\n *\n * Instances of this type must be created via the factory method,\n * ({@code fromConstant}, {@code fromConstants}, {@code format} or {@code\n * formatWithParams}), and not by invoking its constructor. The constructor\n * intentionally takes no parameters and the type is immutable; hence only a\n * default instance corresponding to the empty string can be obtained via\n * constructor invocation.\n *\n * @see goog.html.TrustedResourceUrl#fromConstant\n * @constructor\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.TrustedResourceUrl = function() {\n  /**\n   * The contained value of this TrustedResourceUrl.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = '';\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.TrustedResourceUrl#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\n      goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this TrustedResourceUrl's value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed {@code TrustedResourceUrl}, use\n * {@code goog.html.TrustedResourceUrl.unwrap} instead of this method. If in\n * doubt, assume that it's security relevant. In particular, note that\n * goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type. For example:\n *\n * <pre>\n * var fakeSafeHtml = new String('fake');\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n * // goog.html.SafeHtml.\n * </pre>\n *\n * @see goog.html.TrustedResourceUrl#unwrap\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString =\n    true;\n\n\n/**\n * Returns this URLs directionality, which is always {@code LTR}.\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.getDirection = function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a TrustedResourceUrl, use\n   * {@code goog.html.TrustedResourceUrl.unwrap}.\n   *\n   * @see goog.html.TrustedResourceUrl#unwrap\n   * @override\n   */\n  goog.html.TrustedResourceUrl.prototype.toString = function() {\n    return 'TrustedResourceUrl{' +\n        this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '}';\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * TrustedResourceUrl object, and returns its value.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to\n *     extract from.\n * @return {string} The trustedResourceUrl object's contained string, unless\n *     the run-time type check fails. In that case, {@code unwrap} returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     {@code goog.asserts.AssertionError}.\n */\ngoog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {\n  // Perform additional Run-time type-checking to ensure that\n  // trustedResourceUrl is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \"Faking\" an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&\n      trustedResourceUrl.constructor === goog.html.TrustedResourceUrl &&\n      trustedResourceUrl\n              .TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\n          goog.html.TrustedResourceUrl\n              .TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return trustedResourceUrl\n        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n  } else {\n    goog.asserts.fail('expected object of type TrustedResourceUrl, got \\'' +\n        trustedResourceUrl + '\\' of type ' + goog.typeOf(trustedResourceUrl));\n    return 'type_error:TrustedResourceUrl';\n  }\n};\n\n\n/**\n * Creates a TrustedResourceUrl from a format string and arguments.\n *\n * The arguments for interpolation into the format string map labels to values.\n * Values of type `goog.string.Const` are interpolated without modifcation.\n * Values of other types are cast to string and encoded with\n * encodeURIComponent.\n *\n * `%{<label>}` markers are used in the format string to indicate locations\n * to be interpolated with the valued mapped to the given label. `<label>`\n * must contain only alphanumeric and `_` characters.\n *\n * The format string must start with one of the following:\n * - `https://<origin>/`\n * - `//<origin>/`\n * - `/<pathStart>`\n * - `about:blank`\n *\n * `<origin>` must contain only alphanumeric or any of the following: `-.:[]`.\n * `<pathStart>` is any character except `/` and `\\`.\n *\n * Example usage:\n *\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        'https://www.google.com/search?q=%{query}), {'query': searchTerm});\n *\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        '//www.youtube.com/v/%{videoId}?hl=en&fs=1%{autoplay}'), {\n *        'videoId': videoId,\n *        'autoplay': opt_autoplay ?\n *            goog.string.Const.EMPTY : goog.string.Const.from('&autoplay=1')\n *    });\n *\n * While this function can be used to create a TrustedResourceUrl from only\n * constants, fromConstant() and fromConstants() are generally preferable for\n * that purpose.\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.format = function(format, args) {\n  var result = goog.html.TrustedResourceUrl.format_(format, args);\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);\n};\n\n\n/**\n * String version of TrustedResourceUrl.format.\n * @param {!goog.string.Const} format\n * @param {!Object<string, (string|number|!goog.string.Const)>} args\n * @return {string}\n * @throws {!Error}\n * @private\n */\ngoog.html.TrustedResourceUrl.format_ = function(format, args) {\n  var formatStr = goog.string.Const.unwrap(format);\n  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {\n    throw new Error('Invalid TrustedResourceUrl format: ' + formatStr);\n  }\n  return formatStr.replace(\n      goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {\n        if (!Object.prototype.hasOwnProperty.call(args, id)) {\n          throw new Error(\n              'Found marker, \"' + id + '\", in format string, \"' + formatStr +\n              '\", but no valid label mapping found ' +\n              'in args: ' + JSON.stringify(args));\n        }\n        var arg = args[id];\n        if (arg instanceof goog.string.Const) {\n          return goog.string.Const.unwrap(arg);\n        } else {\n          return encodeURIComponent(String(arg));\n        }\n      });\n};\n\n\n/**\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\\w+)}/g;\n\n\n/**\n * The URL must be absolute, scheme-relative or path-absolute. So it must\n * start with:\n * - https:// followed by allowed origin characters.\n * - // followed by allowed origin characters.\n * - / not followed by / or \\. There will only be an absolute path.\n *\n * Based on\n * https://url.spec.whatwg.org/commit-snapshots/56b74ce7cca8883eab62e9a12666e2fac665d03d/#url-parsing\n * an initial / which is not followed by another / or \\ will end up in the \"path\n * state\" and from there it can only go to \"fragment state\" and \"query state\".\n *\n * We don't enforce a well-formed domain name. So '.' or '1.2' are valid.\n * That's ok because the origin comes from a compile-time constant.\n *\n * A regular expression is used instead of goog.uri for several reasons:\n * - Strictness. E.g. we don't want any userinfo component and we don't\n *   want '/./, nor \\' in the first path component.\n * - Small trusted base. goog.uri is generic and might need to change,\n *   reasoning about all the ways it can parse a URL now and in the future\n *   is error-prone.\n * - Code size. We expect many calls to .format(), many of which might\n *   not be using goog.uri.\n * - Simplicity. Using goog.uri would likely not result in simpler nor shorter\n *   code.\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.BASE_URL_ =\n    /^(?:https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|^\\/[^\\/\\\\]|^about:blank(#|$)/i;\n\n\n/**\n * Formats the URL same as TrustedResourceUrl.format and then adds extra URL\n * parameters.\n *\n * Example usage:\n *\n *     // Creates '//www.youtube.com/v/abc?autoplay=1' for videoId='abc' and\n *     // opt_autoplay=1. Creates '//www.youtube.com/v/abc' for videoId='abc'\n *     // and opt_autoplay=undefined.\n *     var url = goog.html.TrustedResourceUrl.formatWithParams(\n *         goog.string.Const.from('//www.youtube.com/v/%{videoId}'),\n *         {'videoId': videoId},\n *         {'autoplay': opt_autoplay});\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @param {!Object<string, *>} params Parameters to add to URL. Parameters with\n *     value {@code null} or {@code undefined} are skipped. Both keys and values\n *     are encoded. Note that JavaScript doesn't guarantee the order of values\n *     in an object which might result in non-deterministic order of the\n *     parameters. However, browsers currently preserve the order.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.formatWithParams = function(format, args, params) {\n  var url = goog.html.TrustedResourceUrl.format_(format, args);\n  var separator = /\\?/.test(url) ? '&' : '?';\n  for (var key in params) {\n    if (params[key] == null) {\n      continue;\n    }\n    url += separator + encodeURIComponent(key) + '=' +\n        encodeURIComponent(String(params[key]));\n    separator = '&';\n  }\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *     create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to {@code url}.\n */\ngoog.html.TrustedResourceUrl.fromConstant = function(url) {\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(\n          goog.string.Const.unwrap(url));\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant strings.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!Array<!goog.string.Const>} parts Compile-time-constant strings from\n *     which to create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to concatenation of {@code parts}.\n */\ngoog.html.TrustedResourceUrl.fromConstants = function(parts) {\n  var unwrapped = '';\n  for (var i = 0; i < parts.length; i++) {\n    unwrapped += goog.string.Const.unwrap(parts[i]);\n  }\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);\n};\n\n\n/**\n * Type marker for the TrustedResourceUrl type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\n\n\n/**\n * Package-internal utility method to create TrustedResourceUrl instances.\n *\n * @param {string} url The string to initialize the TrustedResourceUrl object\n *     with.\n * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl\n *     object.\n * @package\n */\ngoog.html.TrustedResourceUrl\n    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {\n  var trustedResourceUrl = new goog.html.TrustedResourceUrl();\n  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ =\n      url;\n  return trustedResourceUrl;\n};\n","~:compiled-at",1574163696316,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.html.trustedresourceurl.js\",\n\"lineCount\":127,\n\"mappings\":\"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\",\n\"sources\":[\"goog/html/trustedresourceurl.js\"],\n\"sourcesContent\":[\"// Copyright 2013 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview The TrustedResourceUrl type and its builders.\\n *\\n * TODO(xtof): Link to document stating type contract.\\n */\\n\\ngoog.provide('goog.html.TrustedResourceUrl');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.i18n.bidi.Dir');\\ngoog.require('goog.i18n.bidi.DirectionalString');\\ngoog.require('goog.string.Const');\\ngoog.require('goog.string.TypedString');\\n\\n\\n\\n/**\\n * A URL which is under application control and from which script, CSS, and\\n * other resources that represent executable code, can be fetched.\\n *\\n * Given that the URL can only be constructed from strings under application\\n * control and is used to load resources, bugs resulting in a malformed URL\\n * should not have a security impact and are likely to be easily detectable\\n * during testing. Given the wide number of non-RFC compliant URLs in use,\\n * stricter validation could prevent some applications from being able to use\\n * this type.\\n *\\n * Instances of this type must be created via the factory method,\\n * ({@code fromConstant}, {@code fromConstants}, {@code format} or {@code\\n * formatWithParams}), and not by invoking its constructor. The constructor\\n * intentionally takes no parameters and the type is immutable; hence only a\\n * default instance corresponding to the empty string can be obtained via\\n * constructor invocation.\\n *\\n * @see goog.html.TrustedResourceUrl#fromConstant\\n * @constructor\\n * @final\\n * @struct\\n * @implements {goog.i18n.bidi.DirectionalString}\\n * @implements {goog.string.TypedString}\\n */\\ngoog.html.TrustedResourceUrl = function() {\\n  /**\\n   * The contained value of this TrustedResourceUrl.  The field has a purposely\\n   * ugly name to make (non-compiled) code that attempts to directly access this\\n   * field stand out.\\n   * @private {string}\\n   */\\n  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = '';\\n\\n  /**\\n   * A type marker used to implement additional run-time type checking.\\n   * @see goog.html.TrustedResourceUrl#unwrap\\n   * @const {!Object}\\n   * @private\\n   */\\n  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =\\n      goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;\\n\\n\\n/**\\n * Returns this TrustedResourceUrl's value as a string.\\n *\\n * IMPORTANT: In code where it is security relevant that an object's type is\\n * indeed {@code TrustedResourceUrl}, use\\n * {@code goog.html.TrustedResourceUrl.unwrap} instead of this method. If in\\n * doubt, assume that it's security relevant. In particular, note that\\n * goog.html functions which return a goog.html type do not guarantee that\\n * the returned instance is of the right type. For example:\\n *\\n * <pre>\\n * var fakeSafeHtml = new String('fake');\\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\\n * // goog.html.SafeHtml.\\n * </pre>\\n *\\n * @see goog.html.TrustedResourceUrl#unwrap\\n * @override\\n */\\ngoog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {\\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString =\\n    true;\\n\\n\\n/**\\n * Returns this URLs directionality, which is always {@code LTR}.\\n * @override\\n */\\ngoog.html.TrustedResourceUrl.prototype.getDirection = function() {\\n  return goog.i18n.bidi.Dir.LTR;\\n};\\n\\n\\nif (goog.DEBUG) {\\n  /**\\n   * Returns a debug string-representation of this value.\\n   *\\n   * To obtain the actual string value wrapped in a TrustedResourceUrl, use\\n   * {@code goog.html.TrustedResourceUrl.unwrap}.\\n   *\\n   * @see goog.html.TrustedResourceUrl#unwrap\\n   * @override\\n   */\\n  goog.html.TrustedResourceUrl.prototype.toString = function() {\\n    return 'TrustedResourceUrl{' +\\n        this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '}';\\n  };\\n}\\n\\n\\n/**\\n * Performs a runtime check that the provided object is indeed a\\n * TrustedResourceUrl object, and returns its value.\\n *\\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to\\n *     extract from.\\n * @return {string} The trustedResourceUrl object's contained string, unless\\n *     the run-time type check fails. In that case, {@code unwrap} returns an\\n *     innocuous string, or, if assertions are enabled, throws\\n *     {@code goog.asserts.AssertionError}.\\n */\\ngoog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {\\n  // Perform additional Run-time type-checking to ensure that\\n  // trustedResourceUrl is indeed an instance of the expected type.  This\\n  // provides some additional protection against security bugs due to\\n  // application code that disables type checks.\\n  // Specifically, the following checks are performed:\\n  // 1. The object is an instance of the expected type.\\n  // 2. The object is not an instance of a subclass.\\n  // 3. The object carries a type marker for the expected type. \\\"Faking\\\" an\\n  // object requires a reference to the type marker, which has names intended\\n  // to stand out in code reviews.\\n  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&\\n      trustedResourceUrl.constructor === goog.html.TrustedResourceUrl &&\\n      trustedResourceUrl\\n              .TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===\\n          goog.html.TrustedResourceUrl\\n              .TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\\n    return trustedResourceUrl\\n        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\\n  } else {\\n    goog.asserts.fail('expected object of type TrustedResourceUrl, got \\\\'' +\\n        trustedResourceUrl + '\\\\' of type ' + goog.typeOf(trustedResourceUrl));\\n    return 'type_error:TrustedResourceUrl';\\n  }\\n};\\n\\n\\n/**\\n * Creates a TrustedResourceUrl from a format string and arguments.\\n *\\n * The arguments for interpolation into the format string map labels to values.\\n * Values of type `goog.string.Const` are interpolated without modifcation.\\n * Values of other types are cast to string and encoded with\\n * encodeURIComponent.\\n *\\n * `%{<label>}` markers are used in the format string to indicate locations\\n * to be interpolated with the valued mapped to the given label. `<label>`\\n * must contain only alphanumeric and `_` characters.\\n *\\n * The format string must start with one of the following:\\n * - `https://<origin>/`\\n * - `//<origin>/`\\n * - `/<pathStart>`\\n * - `about:blank`\\n *\\n * `<origin>` must contain only alphanumeric or any of the following: `-.:[]`.\\n * `<pathStart>` is any character except `/` and `\\\\`.\\n *\\n * Example usage:\\n *\\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\\n *        'https://www.google.com/search?q=%{query}), {'query': searchTerm});\\n *\\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\\n *        '//www.youtube.com/v/%{videoId}?hl=en&fs=1%{autoplay}'), {\\n *        'videoId': videoId,\\n *        'autoplay': opt_autoplay ?\\n *            goog.string.Const.EMPTY : goog.string.Const.from('&autoplay=1')\\n *    });\\n *\\n * While this function can be used to create a TrustedResourceUrl from only\\n * constants, fromConstant() and fromConstants() are generally preferable for\\n * that purpose.\\n *\\n * @param {!goog.string.Const} format The format string.\\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\\n *     of labels to values to be interpolated into the format string.\\n *     goog.string.Const values are interpolated without encoding.\\n * @return {!goog.html.TrustedResourceUrl}\\n * @throws {!Error} On an invalid format string or if a label used in the\\n *     the format string is not present in args.\\n */\\ngoog.html.TrustedResourceUrl.format = function(format, args) {\\n  var result = goog.html.TrustedResourceUrl.format_(format, args);\\n  return goog.html.TrustedResourceUrl\\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);\\n};\\n\\n\\n/**\\n * String version of TrustedResourceUrl.format.\\n * @param {!goog.string.Const} format\\n * @param {!Object<string, (string|number|!goog.string.Const)>} args\\n * @return {string}\\n * @throws {!Error}\\n * @private\\n */\\ngoog.html.TrustedResourceUrl.format_ = function(format, args) {\\n  var formatStr = goog.string.Const.unwrap(format);\\n  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {\\n    throw new Error('Invalid TrustedResourceUrl format: ' + formatStr);\\n  }\\n  return formatStr.replace(\\n      goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {\\n        if (!Object.prototype.hasOwnProperty.call(args, id)) {\\n          throw new Error(\\n              'Found marker, \\\"' + id + '\\\", in format string, \\\"' + formatStr +\\n              '\\\", but no valid label mapping found ' +\\n              'in args: ' + JSON.stringify(args));\\n        }\\n        var arg = args[id];\\n        if (arg instanceof goog.string.Const) {\\n          return goog.string.Const.unwrap(arg);\\n        } else {\\n          return encodeURIComponent(String(arg));\\n        }\\n      });\\n};\\n\\n\\n/**\\n * @private @const {!RegExp}\\n */\\ngoog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\\\\w+)}/g;\\n\\n\\n/**\\n * The URL must be absolute, scheme-relative or path-absolute. So it must\\n * start with:\\n * - https:// followed by allowed origin characters.\\n * - // followed by allowed origin characters.\\n * - / not followed by / or \\\\. There will only be an absolute path.\\n *\\n * Based on\\n * https://url.spec.whatwg.org/commit-snapshots/56b74ce7cca8883eab62e9a12666e2fac665d03d/#url-parsing\\n * an initial / which is not followed by another / or \\\\ will end up in the \\\"path\\n * state\\\" and from there it can only go to \\\"fragment state\\\" and \\\"query state\\\".\\n *\\n * We don't enforce a well-formed domain name. So '.' or '1.2' are valid.\\n * That's ok because the origin comes from a compile-time constant.\\n *\\n * A regular expression is used instead of goog.uri for several reasons:\\n * - Strictness. E.g. we don't want any userinfo component and we don't\\n *   want '/./, nor \\\\' in the first path component.\\n * - Small trusted base. goog.uri is generic and might need to change,\\n *   reasoning about all the ways it can parse a URL now and in the future\\n *   is error-prone.\\n * - Code size. We expect many calls to .format(), many of which might\\n *   not be using goog.uri.\\n * - Simplicity. Using goog.uri would likely not result in simpler nor shorter\\n *   code.\\n * @private @const {!RegExp}\\n */\\ngoog.html.TrustedResourceUrl.BASE_URL_ =\\n    /^(?:https:)?\\\\/\\\\/[0-9a-z.:[\\\\]-]+\\\\/|^\\\\/[^\\\\/\\\\\\\\]|^about:blank(#|$)/i;\\n\\n\\n/**\\n * Formats the URL same as TrustedResourceUrl.format and then adds extra URL\\n * parameters.\\n *\\n * Example usage:\\n *\\n *     // Creates '//www.youtube.com/v/abc?autoplay=1' for videoId='abc' and\\n *     // opt_autoplay=1. Creates '//www.youtube.com/v/abc' for videoId='abc'\\n *     // and opt_autoplay=undefined.\\n *     var url = goog.html.TrustedResourceUrl.formatWithParams(\\n *         goog.string.Const.from('//www.youtube.com/v/%{videoId}'),\\n *         {'videoId': videoId},\\n *         {'autoplay': opt_autoplay});\\n *\\n * @param {!goog.string.Const} format The format string.\\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\\n *     of labels to values to be interpolated into the format string.\\n *     goog.string.Const values are interpolated without encoding.\\n * @param {!Object<string, *>} params Parameters to add to URL. Parameters with\\n *     value {@code null} or {@code undefined} are skipped. Both keys and values\\n *     are encoded. Note that JavaScript doesn't guarantee the order of values\\n *     in an object which might result in non-deterministic order of the\\n *     parameters. However, browsers currently preserve the order.\\n * @return {!goog.html.TrustedResourceUrl}\\n * @throws {!Error} On an invalid format string or if a label used in the\\n *     the format string is not present in args.\\n */\\ngoog.html.TrustedResourceUrl.formatWithParams = function(format, args, params) {\\n  var url = goog.html.TrustedResourceUrl.format_(format, args);\\n  var separator = /\\\\?/.test(url) ? '&' : '?';\\n  for (var key in params) {\\n    if (params[key] == null) {\\n      continue;\\n    }\\n    url += separator + encodeURIComponent(key) + '=' +\\n        encodeURIComponent(String(params[key]));\\n    separator = '&';\\n  }\\n  return goog.html.TrustedResourceUrl\\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\\n};\\n\\n\\n/**\\n * Creates a TrustedResourceUrl object from a compile-time constant string.\\n *\\n * Compile-time constant strings are inherently program-controlled and hence\\n * trusted.\\n *\\n * @param {!goog.string.Const} url A compile-time-constant string from which to\\n *     create a TrustedResourceUrl.\\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\\n *     initialized to {@code url}.\\n */\\ngoog.html.TrustedResourceUrl.fromConstant = function(url) {\\n  return goog.html.TrustedResourceUrl\\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(\\n          goog.string.Const.unwrap(url));\\n};\\n\\n\\n/**\\n * Creates a TrustedResourceUrl object from a compile-time constant strings.\\n *\\n * Compile-time constant strings are inherently program-controlled and hence\\n * trusted.\\n *\\n * @param {!Array<!goog.string.Const>} parts Compile-time-constant strings from\\n *     which to create a TrustedResourceUrl.\\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\\n *     initialized to concatenation of {@code parts}.\\n */\\ngoog.html.TrustedResourceUrl.fromConstants = function(parts) {\\n  var unwrapped = '';\\n  for (var i = 0; i < parts.length; i++) {\\n    unwrapped += goog.string.Const.unwrap(parts[i]);\\n  }\\n  return goog.html.TrustedResourceUrl\\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);\\n};\\n\\n\\n/**\\n * Type marker for the TrustedResourceUrl type, used to implement additional\\n * run-time type checking.\\n * @const {!Object}\\n * @private\\n */\\ngoog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};\\n\\n\\n/**\\n * Package-internal utility method to create TrustedResourceUrl instances.\\n *\\n * @param {string} url The string to initialize the TrustedResourceUrl object\\n *     with.\\n * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl\\n *     object.\\n * @package\\n */\\ngoog.html.TrustedResourceUrl\\n    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {\\n  var trustedResourceUrl = new goog.html.TrustedResourceUrl();\\n  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ =\\n      url;\\n  return trustedResourceUrl;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"html\",\"TrustedResourceUrl\",\"goog.html.TrustedResourceUrl\",\"privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_\",\"TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_\",\"prototype\",\"implementsGoogStringTypedString\",\"getTypedStringValue\",\"goog.html.TrustedResourceUrl.prototype.getTypedStringValue\",\"implementsGoogI18nBidiDirectionalString\",\"getDirection\",\"goog.html.TrustedResourceUrl.prototype.getDirection\",\"i18n\",\"bidi\",\"Dir\",\"LTR\",\"DEBUG\",\"toString\",\"goog.html.TrustedResourceUrl.prototype.toString\",\"unwrap\",\"goog.html.TrustedResourceUrl.unwrap\",\"trustedResourceUrl\",\"constructor\",\"asserts\",\"fail\",\"typeOf\",\"format\",\"goog.html.TrustedResourceUrl.format\",\"args\",\"result\",\"format_\",\"createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse\",\"goog.html.TrustedResourceUrl.format_\",\"formatStr\",\"string\",\"Const\",\"BASE_URL_\",\"test\",\"Error\",\"replace\",\"FORMAT_MARKER_\",\"match\",\"id\",\"Object\",\"hasOwnProperty\",\"call\",\"JSON\",\"stringify\",\"arg\",\"encodeURIComponent\",\"String\",\"formatWithParams\",\"goog.html.TrustedResourceUrl.formatWithParams\",\"params\",\"url\",\"separator\",\"key\",\"fromConstant\",\"goog.html.TrustedResourceUrl.fromConstant\",\"fromConstants\",\"goog.html.TrustedResourceUrl.fromConstants\",\"parts\",\"unwrapped\",\"i\",\"length\",\"goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse\"]\n}\n"]