["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/math/long.js"],"~:js","goog.provide(\"goog.math.Long\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.reflect\");\n/**\n * @final\n * @struct\n * @constructor\n * @param {number} low\n * @param {number} high\n */\ngoog.math.Long = function(low, high) {\n  /** @private @type {number} */ this.low_ = low | 0;\n  /** @private @type {number} */ this.high_ = high | 0;\n};\n/** @private @type {!Object<number,!goog.math.Long>} */ goog.math.Long.IntCache_ = {};\n/** @private @type {!Object<goog.math.Long.ValueCacheId_,!goog.math.Long>} */ goog.math.Long.valueCache_ = {};\n/**\n * @private\n * @param {number} value\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getCachedIntValue_ = function(value) {\n  return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {\n    return new goog.math.Long(val, val < 0 ? -1 : 0);\n  });\n};\n/** @private @const @type {!Array<string>} */ goog.math.Long.MAX_VALUE_FOR_RADIX_ = [\"\", \"\", \"111111111111111111111111111111111111111111111111111111111111111\", \"2021110011022210012102010021220101220221\", \"13333333333333333333333333333333\", \"1104332401304422434310311212\", \"1540241003031030222122211\", \"22341010611245052052300\", \"777777777777777777777\", \"67404283172107811827\", \"9223372036854775807\", \"1728002635214590697\", \"41a792678515120367\", \"10b269549075433c37\", \"4340724c6c71dc7a7\", \"160e2ad3246366807\", \n\"7fffffffffffffff\", \"33d3d8307b214008\", \"16agh595df825fa7\", \"ba643dci0ffeehh\", \"5cbfjia3fh26ja7\", \"2heiciiie82dh97\", \"1adaibb21dckfa7\", \"i6k448cf4192c2\", \"acd772jnc9l0l7\", \"64ie1focnn5g77\", \"3igoecjbmca687\", \"27c48l5b37oaop\", \"1bk39f3ah3dmq7\", \"q1se8f0m04isb\", \"hajppbc1fc207\", \"bm03i95hia437\", \"7vvvvvvvvvvvv\", \"5hg4ck9jd4u37\", \"3tdtk1v8j6tpp\", \"2pijmikexrxp7\", \"1y2p0ij32e8e7\"];\n/** @private @const @type {!Array<string>} */ goog.math.Long.MIN_VALUE_FOR_RADIX_ = [\"\", \"\", \"-1000000000000000000000000000000000000000000000000000000000000000\", \"-2021110011022210012102010021220101220222\", \"-20000000000000000000000000000000\", \"-1104332401304422434310311213\", \"-1540241003031030222122212\", \"-22341010611245052052301\", \"-1000000000000000000000\", \"-67404283172107811828\", \"-9223372036854775808\", \"-1728002635214590698\", \"-41a792678515120368\", \"-10b269549075433c38\", \"-4340724c6c71dc7a8\", \n\"-160e2ad3246366808\", \"-8000000000000000\", \"-33d3d8307b214009\", \"-16agh595df825fa8\", \"-ba643dci0ffeehi\", \"-5cbfjia3fh26ja8\", \"-2heiciiie82dh98\", \"-1adaibb21dckfa8\", \"-i6k448cf4192c3\", \"-acd772jnc9l0l8\", \"-64ie1focnn5g78\", \"-3igoecjbmca688\", \"-27c48l5b37oaoq\", \"-1bk39f3ah3dmq8\", \"-q1se8f0m04isc\", \"-hajppbc1fc208\", \"-bm03i95hia438\", \"-8000000000000\", \"-5hg4ck9jd4u38\", \"-3tdtk1v8j6tpq\", \"-2pijmikexrxp8\", \"-1y2p0ij32e8e8\"];\n/**\n * @param {number} value\n * @return {!goog.math.Long}\n */\ngoog.math.Long.fromInt = function(value) {\n  var intValue = value | 0;\n  goog.asserts.assert(value === intValue, \"value should be a 32-bit integer\");\n  if (-128 <= intValue && intValue < 128) {\n    return goog.math.Long.getCachedIntValue_(intValue);\n  } else {\n    return new goog.math.Long(intValue, intValue < 0 ? -1 : 0);\n  }\n};\n/**\n * @param {number} value\n * @return {!goog.math.Long}\n */\ngoog.math.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return goog.math.Long.getZero();\n  } else {\n    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\n      return goog.math.Long.getMinValue();\n    } else {\n      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {\n        return goog.math.Long.getMaxValue();\n      } else {\n        if (value < 0) {\n          return goog.math.Long.fromNumber(-value).negate();\n        } else {\n          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);\n        }\n      }\n    }\n  }\n};\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @return {!goog.math.Long}\n */\ngoog.math.Long.fromBits = function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n/**\n * @param {string} str\n * @param {number=} opt_radix\n * @return {!goog.math.Long}\n */\ngoog.math.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error(\"number format error: empty string\");\n  }\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error(\"radix out of range: \" + radix);\n  }\n  if (str.charAt(0) == \"-\") {\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\n  } else {\n    if (str.indexOf(\"-\") >= 0) {\n      throw Error('number format error: interior \"-\" character: ' + str);\n    }\n  }\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\n  var result = goog.math.Long.getZero();\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n/**\n * @param {string} str\n * @param {number=} opt_radix\n * @return {boolean}\n */\ngoog.math.Long.isStringInRange = function(str, opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error(\"radix out of range: \" + radix);\n  }\n  var extremeValue = str.charAt(0) == \"-\" ? goog.math.Long.MIN_VALUE_FOR_RADIX_[radix] : goog.math.Long.MAX_VALUE_FOR_RADIX_[radix];\n  if (str.length < extremeValue.length) {\n    return true;\n  } else {\n    if (str.length == extremeValue.length && str <= extremeValue) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n/** @private @type {number} */ goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;\n/** @private @type {number} */ goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n/** @private @type {number} */ goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\n/** @private @type {number} */ goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getZero = function() {\n  return goog.math.Long.getCachedIntValue_(0);\n};\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getOne = function() {\n  return goog.math.Long.getCachedIntValue_(1);\n};\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getNegOne = function() {\n  return goog.math.Long.getCachedIntValue_(-1);\n};\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getMaxValue = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE, function() {\n    return goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);\n  });\n};\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getMinValue = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE, function() {\n    return goog.math.Long.fromBits(0, 2147483648 | 0);\n  });\n};\n/**\n * @public\n * @return {!goog.math.Long}\n */\ngoog.math.Long.getTwoPwr24 = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24, function() {\n    return goog.math.Long.fromInt(1 << 24);\n  });\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n/**\n * @param {number=} opt_radix\n * @return {string}\n * @override\n */\ngoog.math.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error(\"radix out of range: \" + radix);\n  }\n  if (this.isZero()) {\n    return \"0\";\n  }\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      var radixLong = goog.math.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return \"-\" + this.negate().toString(radix);\n    }\n  }\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));\n  var rem = this;\n  var result = \"\";\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n    var digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = \"0\" + digits;\n      }\n      result = \"\" + digits + result;\n    }\n  }\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n/**\n * @return {number}\n */\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n/**\n * @return {boolean}\n */\ngoog.math.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n/**\n * @return {boolean}\n */\ngoog.math.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n/**\n * @return {boolean}\n */\ngoog.math.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.equals = function(other) {\n  return this.high_ == other.high_ && this.low_ == other.low_;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.notEquals = function(other) {\n  return this.high_ != other.high_ || this.low_ != other.low_;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n/**\n * @param {goog.math.Long} other\n * @return {boolean}\n */\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n/**\n * @param {goog.math.Long} other\n * @return {number}\n */\ngoog.math.Long.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.negate = function() {\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getMinValue();\n  } else {\n    return this.not().add(goog.math.Long.getOne());\n  }\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.add = function(other) {\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 65535;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 65535;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 65535;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 65535;\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 65535;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 65535;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 65535;\n  c48 += a48 + b48;\n  c48 &= 65535;\n  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Long.getZero();\n  } else {\n    if (other.isZero()) {\n      return goog.math.Long.getZero();\n    }\n  }\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();\n  } else {\n    if (other.equals(goog.math.Long.getMinValue())) {\n      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();\n    }\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else {\n    if (other.isNegative()) {\n      return this.multiply(other.negate()).negate();\n    }\n  }\n  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 65535;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 65535;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 65535;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 65535;\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 65535;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 65535;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 65535;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 65535;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 65535;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 65535;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 65535;\n  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error(\"division by zero\");\n  } else {\n    if (this.isZero()) {\n      return goog.math.Long.getZero();\n    }\n  }\n  if (this.equals(goog.math.Long.getMinValue())) {\n    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {\n      return goog.math.Long.getMinValue();\n    } else {\n      if (other.equals(goog.math.Long.getMinValue())) {\n        return goog.math.Long.getOne();\n      } else {\n        var halfThis = this.shiftRight(1);\n        var approx = halfThis.div(other).shiftLeft(1);\n        if (approx.equals(goog.math.Long.getZero())) {\n          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();\n        } else {\n          var rem = this.subtract(other.multiply(approx));\n          var result = approx.add(rem.div(other));\n          return result;\n        }\n      }\n    }\n  } else {\n    if (other.equals(goog.math.Long.getMinValue())) {\n      return goog.math.Long.getZero();\n    }\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else {\n    if (other.isNegative()) {\n      return this.div(other.negate()).negate();\n    }\n  }\n  var res = goog.math.Long.getZero();\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n    var approxRes = goog.math.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Long.getOne();\n    }\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n/**\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.and = function(other) {\n  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.or = function(other) {\n  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n/**\n * @param {goog.math.Long} other\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.xor = function(other) {\n  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n/**\n * @param {number} numBits\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n    } else {\n      return goog.math.Long.fromBits(0, low << numBits - 32);\n    }\n  }\n};\n/**\n * @param {number} numBits\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n    } else {\n      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n    }\n  }\n};\n/**\n * @param {number} numBits\n * @return {!goog.math.Long}\n */\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n    } else {\n      if (numBits == 32) {\n        return goog.math.Long.fromBits(high, 0);\n      } else {\n        return goog.math.Long.fromBits(high >>> numBits - 32, 0);\n      }\n    }\n  }\n};\n/** @private @enum {number} */ goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, TWO_PWR_24:6};\n","~:source","// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\n\ngoog.provide('goog.math.Long');\n\ngoog.require('goog.asserts');\ngoog.require('goog.reflect');\n\n\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @struct\n * @constructor\n * @final\n */\ngoog.math.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object<number, !goog.math.Long>}\n * @private\n */\ngoog.math.Long.IntCache_ = {};\n\n\n/**\n * A cache of the Long representations of common values.\n * @type {!Object<goog.math.Long.ValueCacheId_, !goog.math.Long>}\n * @private\n */\ngoog.math.Long.valueCache_ = {};\n\n/**\n * Returns a cached long number representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n * @private\n */\ngoog.math.Long.getCachedIntValue_ = function(value) {\n  return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {\n    return new goog.math.Long(val, val < 0 ? -1 : 0);\n  });\n};\n\n/**\n * The array of maximum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array<string>}\n */\ngoog.math.Long.MAX_VALUE_FOR_RADIX_ = [\n  '', '',  // unused\n  '111111111111111111111111111111111111111111111111111111111111111',\n  // base 2\n  '2021110011022210012102010021220101220221',  // base 3\n  '13333333333333333333333333333333',          // base 4\n  '1104332401304422434310311212',              // base 5\n  '1540241003031030222122211',                 // base 6\n  '22341010611245052052300',                   // base 7\n  '777777777777777777777',                     // base 8\n  '67404283172107811827',                      // base 9\n  '9223372036854775807',                       // base 10\n  '1728002635214590697',                       // base 11\n  '41a792678515120367',                        // base 12\n  '10b269549075433c37',                        // base 13\n  '4340724c6c71dc7a7',                         // base 14\n  '160e2ad3246366807',                         // base 15\n  '7fffffffffffffff',                          // base 16\n  '33d3d8307b214008',                          // base 17\n  '16agh595df825fa7',                          // base 18\n  'ba643dci0ffeehh',                           // base 19\n  '5cbfjia3fh26ja7',                           // base 20\n  '2heiciiie82dh97',                           // base 21\n  '1adaibb21dckfa7',                           // base 22\n  'i6k448cf4192c2',                            // base 23\n  'acd772jnc9l0l7',                            // base 24\n  '64ie1focnn5g77',                            // base 25\n  '3igoecjbmca687',                            // base 26\n  '27c48l5b37oaop',                            // base 27\n  '1bk39f3ah3dmq7',                            // base 28\n  'q1se8f0m04isb',                             // base 29\n  'hajppbc1fc207',                             // base 30\n  'bm03i95hia437',                             // base 31\n  '7vvvvvvvvvvvv',                             // base 32\n  '5hg4ck9jd4u37',                             // base 33\n  '3tdtk1v8j6tpp',                             // base 34\n  '2pijmikexrxp7',                             // base 35\n  '1y2p0ij32e8e7'                              // base 36\n];\n\n\n/**\n * The array of minimum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array<string>}\n */\ngoog.math.Long.MIN_VALUE_FOR_RADIX_ = [\n  '', '',  // unused\n  '-1000000000000000000000000000000000000000000000000000000000000000',\n  // base 2\n  '-2021110011022210012102010021220101220222',  // base 3\n  '-20000000000000000000000000000000',          // base 4\n  '-1104332401304422434310311213',              // base 5\n  '-1540241003031030222122212',                 // base 6\n  '-22341010611245052052301',                   // base 7\n  '-1000000000000000000000',                    // base 8\n  '-67404283172107811828',                      // base 9\n  '-9223372036854775808',                       // base 10\n  '-1728002635214590698',                       // base 11\n  '-41a792678515120368',                        // base 12\n  '-10b269549075433c38',                        // base 13\n  '-4340724c6c71dc7a8',                         // base 14\n  '-160e2ad3246366808',                         // base 15\n  '-8000000000000000',                          // base 16\n  '-33d3d8307b214009',                          // base 17\n  '-16agh595df825fa8',                          // base 18\n  '-ba643dci0ffeehi',                           // base 19\n  '-5cbfjia3fh26ja8',                           // base 20\n  '-2heiciiie82dh98',                           // base 21\n  '-1adaibb21dckfa8',                           // base 22\n  '-i6k448cf4192c3',                            // base 23\n  '-acd772jnc9l0l8',                            // base 24\n  '-64ie1focnn5g78',                            // base 25\n  '-3igoecjbmca688',                            // base 26\n  '-27c48l5b37oaoq',                            // base 27\n  '-1bk39f3ah3dmq8',                            // base 28\n  '-q1se8f0m04isc',                             // base 29\n  '-hajppbc1fc208',                             // base 30\n  '-bm03i95hia438',                             // base 31\n  '-8000000000000',                             // base 32\n  '-5hg4ck9jd4u38',                             // base 33\n  '-3tdtk1v8j6tpq',                             // base 34\n  '-2pijmikexrxp8',                             // base 35\n  '-1y2p0ij32e8e8'                              // base 36\n];\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromInt = function(value) {\n  var intValue = value | 0;\n  goog.asserts.assert(value === intValue, 'value should be a 32-bit integer');\n\n  if (-128 <= intValue && intValue < 128) {\n    return goog.math.Long.getCachedIntValue_(intValue);\n  } else {\n    return new goog.math.Long(intValue, intValue < 0 ? -1 : 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the given value.\n * NaN will be returned as zero. Infinity is converted to max value and\n * -Infinity to min value.\n * @param {number} value The number in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return goog.math.Long.getZero();\n  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.getMinValue();\n  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.getMaxValue();\n  } else if (value < 0) {\n    return goog.math.Long.fromNumber(-value).negate();\n  } else {\n    return new goog.math.Long(\n        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,\n        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromBits = function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Long.getZero();\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n/**\n * Returns the boolean value of whether the input string is within a Long's\n * range. Assumes an input string containing only numeric characters with an\n * optional preceding '-'.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {boolean} Whether the string is within the range of a Long.\n */\ngoog.math.Long.isStringInRange = function(str, opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  var extremeValue = (str.charAt(0) == '-') ?\n      goog.math.Long.MIN_VALUE_FOR_RADIX_[radix] :\n      goog.math.Long.MAX_VALUE_FOR_RADIX_[radix];\n\n  if (str.length < extremeValue.length) {\n    return true;\n  } else if (str.length == extremeValue.length && str <= extremeValue) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_32_DBL_ =\n    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_64_DBL_ =\n    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getZero = function() {\n  return goog.math.Long.getCachedIntValue_(0);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getOne = function() {\n  return goog.math.Long.getCachedIntValue_(1);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getNegOne = function() {\n  return goog.math.Long.getCachedIntValue_(-1);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMaxValue = function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE,\n      function() {\n        return goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n      });\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMinValue = function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE,\n      function() { return goog.math.Long.fromBits(0, 0x80000000 | 0); });\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getTwoPwr24 = function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24,\n      function() { return goog.math.Long.fromInt(1 << 24); });\n};\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\n      this.getLowBitsUnsigned();\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = goog.math.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    // The right shifting fixes negative values in the case when\n    // intval >= 2^31; for more details see\n    // https://github.com/google/closure-library/pull/498\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ? this.low_ :\n                            goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\ngoog.math.Long.prototype.equals = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\ngoog.math.Long.prototype.notEquals = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\ngoog.math.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\ngoog.math.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {goog.math.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Long.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!goog.math.Long} The negation of this value. */\ngoog.math.Long.prototype.negate = function() {\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getMinValue();\n  } else {\n    return this.not().add(goog.math.Long.getOne());\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {goog.math.Long} other Long to add to this one.\n * @return {!goog.math.Long} The sum of this and the given Long.\n */\ngoog.math.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {goog.math.Long} other Long to subtract from this.\n * @return {!goog.math.Long} The difference of this and the given Long.\n */\ngoog.math.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {goog.math.Long} other Long to multiply with this.\n * @return {!goog.math.Long} The product of this and the other.\n */\ngoog.math.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Long.getZero();\n  } else if (other.isZero()) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return other.isOdd() ? goog.math.Long.getMinValue() :\n                           goog.math.Long.getZero();\n  } else if (other.equals(goog.math.Long.getMinValue())) {\n    return this.isOdd() ? goog.math.Long.getMinValue() :\n                          goog.math.Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(goog.math.Long.getTwoPwr24()) &&\n      other.lessThan(goog.math.Long.getTwoPwr24())) {\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {goog.math.Long} other Long by which to divide.\n * @return {!goog.math.Long} This Long divided by the given one.\n */\ngoog.math.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.equals(goog.math.Long.getMinValue())) {\n    if (other.equals(goog.math.Long.getOne()) ||\n        other.equals(goog.math.Long.getNegOne())) {\n      return goog.math.Long.getMinValue();  // recall -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(goog.math.Long.getMinValue())) {\n      return goog.math.Long.getOne();\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(goog.math.Long.getZero())) {\n        return other.isNegative() ? goog.math.Long.getOne() :\n                                    goog.math.Long.getNegOne();\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Long.getZero();\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Long.getOne();\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {goog.math.Long} other Long by which to mod.\n * @return {!goog.math.Long} This Long modulo the given one.\n */\ngoog.math.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to AND.\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\n */\ngoog.math.Long.prototype.and = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ & other.low_, this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to OR.\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\n */\ngoog.math.Long.prototype.or = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ | other.low_, this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to XOR.\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\n */\ngoog.math.Long.prototype.xor = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the left by the given amount.\n */\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return goog.math.Long.fromBits(\n          low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return goog.math.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * The new leading bits match the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount.\n */\ngoog.math.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return goog.math.Long.fromBits(\n          high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits == 32) {\n      return goog.math.Long.fromBits(high, 0);\n    } else {\n      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n\n/**\n * @enum {number} Ids of commonly requested Long instances.\n * @private\n */\ngoog.math.Long.ValueCacheId_ = {\n  MAX_VALUE: 1,\n  MIN_VALUE: 2,\n  TWO_PWR_24: 6\n};\n","~:compiled-at",1574163695969,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.math.long.js\",\n\"lineCount\":624,\n\"mappings\":\"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\",\n\"sources\":[\"goog/math/long.js\"],\n\"sourcesContent\":[\"// Copyright 2009 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\\n * integer value, which faithfully simulates the behavior of a Java \\\"long\\\". This\\n * implementation is derived from LongLib in GWT.\\n *\\n */\\n\\ngoog.provide('goog.math.Long');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.reflect');\\n\\n\\n\\n/**\\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\\n * values as *signed* integers.  See the from* functions below for more\\n * convenient ways of constructing Longs.\\n *\\n * The internal representation of a long is the two given signed, 32-bit values.\\n * We use 32-bit pieces because these are the size of integers on which\\n * Javascript performs bit-operations.  For operations like addition and\\n * multiplication, we split each number into 16-bit pieces, which can easily be\\n * multiplied within Javascript's floating-point representation without overflow\\n * or change in sign.\\n *\\n * In the algorithms below, we frequently reduce the negative case to the\\n * positive case by negating the input(s) and then post-processing the result.\\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\\n * a positive number, it overflows back into a negative).  Not handling this\\n * case would often result in infinite recursion.\\n *\\n * @param {number} low  The low (signed) 32 bits of the long.\\n * @param {number} high  The high (signed) 32 bits of the long.\\n * @struct\\n * @constructor\\n * @final\\n */\\ngoog.math.Long = function(low, high) {\\n  /**\\n   * @type {number}\\n   * @private\\n   */\\n  this.low_ = low | 0;  // force into 32 signed bits.\\n\\n  /**\\n   * @type {number}\\n   * @private\\n   */\\n  this.high_ = high | 0;  // force into 32 signed bits.\\n};\\n\\n\\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\\n// from* methods on which they depend.\\n\\n\\n/**\\n * A cache of the Long representations of small integer values.\\n * @type {!Object<number, !goog.math.Long>}\\n * @private\\n */\\ngoog.math.Long.IntCache_ = {};\\n\\n\\n/**\\n * A cache of the Long representations of common values.\\n * @type {!Object<goog.math.Long.ValueCacheId_, !goog.math.Long>}\\n * @private\\n */\\ngoog.math.Long.valueCache_ = {};\\n\\n/**\\n * Returns a cached long number representing the given (32-bit) integer value.\\n * @param {number} value The 32-bit integer in question.\\n * @return {!goog.math.Long} The corresponding Long value.\\n * @private\\n */\\ngoog.math.Long.getCachedIntValue_ = function(value) {\\n  return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {\\n    return new goog.math.Long(val, val < 0 ? -1 : 0);\\n  });\\n};\\n\\n/**\\n * The array of maximum values of a Long in string representation for a given\\n * radix between 2 and 36, inclusive.\\n * @private @const {!Array<string>}\\n */\\ngoog.math.Long.MAX_VALUE_FOR_RADIX_ = [\\n  '', '',  // unused\\n  '111111111111111111111111111111111111111111111111111111111111111',\\n  // base 2\\n  '2021110011022210012102010021220101220221',  // base 3\\n  '13333333333333333333333333333333',          // base 4\\n  '1104332401304422434310311212',              // base 5\\n  '1540241003031030222122211',                 // base 6\\n  '22341010611245052052300',                   // base 7\\n  '777777777777777777777',                     // base 8\\n  '67404283172107811827',                      // base 9\\n  '9223372036854775807',                       // base 10\\n  '1728002635214590697',                       // base 11\\n  '41a792678515120367',                        // base 12\\n  '10b269549075433c37',                        // base 13\\n  '4340724c6c71dc7a7',                         // base 14\\n  '160e2ad3246366807',                         // base 15\\n  '7fffffffffffffff',                          // base 16\\n  '33d3d8307b214008',                          // base 17\\n  '16agh595df825fa7',                          // base 18\\n  'ba643dci0ffeehh',                           // base 19\\n  '5cbfjia3fh26ja7',                           // base 20\\n  '2heiciiie82dh97',                           // base 21\\n  '1adaibb21dckfa7',                           // base 22\\n  'i6k448cf4192c2',                            // base 23\\n  'acd772jnc9l0l7',                            // base 24\\n  '64ie1focnn5g77',                            // base 25\\n  '3igoecjbmca687',                            // base 26\\n  '27c48l5b37oaop',                            // base 27\\n  '1bk39f3ah3dmq7',                            // base 28\\n  'q1se8f0m04isb',                             // base 29\\n  'hajppbc1fc207',                             // base 30\\n  'bm03i95hia437',                             // base 31\\n  '7vvvvvvvvvvvv',                             // base 32\\n  '5hg4ck9jd4u37',                             // base 33\\n  '3tdtk1v8j6tpp',                             // base 34\\n  '2pijmikexrxp7',                             // base 35\\n  '1y2p0ij32e8e7'                              // base 36\\n];\\n\\n\\n/**\\n * The array of minimum values of a Long in string representation for a given\\n * radix between 2 and 36, inclusive.\\n * @private @const {!Array<string>}\\n */\\ngoog.math.Long.MIN_VALUE_FOR_RADIX_ = [\\n  '', '',  // unused\\n  '-1000000000000000000000000000000000000000000000000000000000000000',\\n  // base 2\\n  '-2021110011022210012102010021220101220222',  // base 3\\n  '-20000000000000000000000000000000',          // base 4\\n  '-1104332401304422434310311213',              // base 5\\n  '-1540241003031030222122212',                 // base 6\\n  '-22341010611245052052301',                   // base 7\\n  '-1000000000000000000000',                    // base 8\\n  '-67404283172107811828',                      // base 9\\n  '-9223372036854775808',                       // base 10\\n  '-1728002635214590698',                       // base 11\\n  '-41a792678515120368',                        // base 12\\n  '-10b269549075433c38',                        // base 13\\n  '-4340724c6c71dc7a8',                         // base 14\\n  '-160e2ad3246366808',                         // base 15\\n  '-8000000000000000',                          // base 16\\n  '-33d3d8307b214009',                          // base 17\\n  '-16agh595df825fa8',                          // base 18\\n  '-ba643dci0ffeehi',                           // base 19\\n  '-5cbfjia3fh26ja8',                           // base 20\\n  '-2heiciiie82dh98',                           // base 21\\n  '-1adaibb21dckfa8',                           // base 22\\n  '-i6k448cf4192c3',                            // base 23\\n  '-acd772jnc9l0l8',                            // base 24\\n  '-64ie1focnn5g78',                            // base 25\\n  '-3igoecjbmca688',                            // base 26\\n  '-27c48l5b37oaoq',                            // base 27\\n  '-1bk39f3ah3dmq8',                            // base 28\\n  '-q1se8f0m04isc',                             // base 29\\n  '-hajppbc1fc208',                             // base 30\\n  '-bm03i95hia438',                             // base 31\\n  '-8000000000000',                             // base 32\\n  '-5hg4ck9jd4u38',                             // base 33\\n  '-3tdtk1v8j6tpq',                             // base 34\\n  '-2pijmikexrxp8',                             // base 35\\n  '-1y2p0ij32e8e8'                              // base 36\\n];\\n\\n\\n/**\\n * Returns a Long representing the given (32-bit) integer value.\\n * @param {number} value The 32-bit integer in question.\\n * @return {!goog.math.Long} The corresponding Long value.\\n */\\ngoog.math.Long.fromInt = function(value) {\\n  var intValue = value | 0;\\n  goog.asserts.assert(value === intValue, 'value should be a 32-bit integer');\\n\\n  if (-128 <= intValue && intValue < 128) {\\n    return goog.math.Long.getCachedIntValue_(intValue);\\n  } else {\\n    return new goog.math.Long(intValue, intValue < 0 ? -1 : 0);\\n  }\\n};\\n\\n\\n/**\\n * Returns a Long representing the given value.\\n * NaN will be returned as zero. Infinity is converted to max value and\\n * -Infinity to min value.\\n * @param {number} value The number in question.\\n * @return {!goog.math.Long} The corresponding Long value.\\n */\\ngoog.math.Long.fromNumber = function(value) {\\n  if (isNaN(value)) {\\n    return goog.math.Long.getZero();\\n  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\\n    return goog.math.Long.getMinValue();\\n  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {\\n    return goog.math.Long.getMaxValue();\\n  } else if (value < 0) {\\n    return goog.math.Long.fromNumber(-value).negate();\\n  } else {\\n    return new goog.math.Long(\\n        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,\\n        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);\\n  }\\n};\\n\\n\\n/**\\n * Returns a Long representing the 64-bit integer that comes by concatenating\\n * the given high and low bits.  Each is assumed to use 32 bits.\\n * @param {number} lowBits The low 32-bits.\\n * @param {number} highBits The high 32-bits.\\n * @return {!goog.math.Long} The corresponding Long value.\\n */\\ngoog.math.Long.fromBits = function(lowBits, highBits) {\\n  return new goog.math.Long(lowBits, highBits);\\n};\\n\\n\\n/**\\n * Returns a Long representation of the given string, written using the given\\n * radix.\\n * @param {string} str The textual representation of the Long.\\n * @param {number=} opt_radix The radix in which the text is written.\\n * @return {!goog.math.Long} The corresponding Long value.\\n */\\ngoog.math.Long.fromString = function(str, opt_radix) {\\n  if (str.length == 0) {\\n    throw Error('number format error: empty string');\\n  }\\n\\n  var radix = opt_radix || 10;\\n  if (radix < 2 || 36 < radix) {\\n    throw Error('radix out of range: ' + radix);\\n  }\\n\\n  if (str.charAt(0) == '-') {\\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\\n  } else if (str.indexOf('-') >= 0) {\\n    throw Error('number format error: interior \\\"-\\\" character: ' + str);\\n  }\\n\\n  // Do several (8) digits each time through the loop, so as to\\n  // minimize the calls to the very expensive emulated div.\\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\\n\\n  var result = goog.math.Long.getZero();\\n  for (var i = 0; i < str.length; i += 8) {\\n    var size = Math.min(8, str.length - i);\\n    var value = parseInt(str.substring(i, i + size), radix);\\n    if (size < 8) {\\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\\n    } else {\\n      result = result.multiply(radixToPower);\\n      result = result.add(goog.math.Long.fromNumber(value));\\n    }\\n  }\\n  return result;\\n};\\n\\n/**\\n * Returns the boolean value of whether the input string is within a Long's\\n * range. Assumes an input string containing only numeric characters with an\\n * optional preceding '-'.\\n * @param {string} str The textual representation of the Long.\\n * @param {number=} opt_radix The radix in which the text is written.\\n * @return {boolean} Whether the string is within the range of a Long.\\n */\\ngoog.math.Long.isStringInRange = function(str, opt_radix) {\\n  var radix = opt_radix || 10;\\n  if (radix < 2 || 36 < radix) {\\n    throw Error('radix out of range: ' + radix);\\n  }\\n\\n  var extremeValue = (str.charAt(0) == '-') ?\\n      goog.math.Long.MIN_VALUE_FOR_RADIX_[radix] :\\n      goog.math.Long.MAX_VALUE_FOR_RADIX_[radix];\\n\\n  if (str.length < extremeValue.length) {\\n    return true;\\n  } else if (str.length == extremeValue.length && str <= extremeValue) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n};\\n\\n// NOTE: the compiler should inline these constant values below and then remove\\n// these variables, so there should be no runtime penalty for these.\\n\\n\\n/**\\n * Number used repeated below in calculations.  This must appear before the\\n * first call to any from* function below.\\n * @type {number}\\n * @private\\n */\\ngoog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;\\n\\n\\n/**\\n * @type {number}\\n * @private\\n */\\ngoog.math.Long.TWO_PWR_32_DBL_ =\\n    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\\n\\n\\n/**\\n * @type {number}\\n * @private\\n */\\ngoog.math.Long.TWO_PWR_64_DBL_ =\\n    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\\n\\n\\n/**\\n * @type {number}\\n * @private\\n */\\ngoog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getZero = function() {\\n  return goog.math.Long.getCachedIntValue_(0);\\n};\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getOne = function() {\\n  return goog.math.Long.getCachedIntValue_(1);\\n};\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getNegOne = function() {\\n  return goog.math.Long.getCachedIntValue_(-1);\\n};\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getMaxValue = function() {\\n  return goog.reflect.cache(\\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE,\\n      function() {\\n        return goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\\n      });\\n};\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getMinValue = function() {\\n  return goog.reflect.cache(\\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE,\\n      function() { return goog.math.Long.fromBits(0, 0x80000000 | 0); });\\n};\\n\\n\\n/**\\n * @return {!goog.math.Long}\\n * @public\\n */\\ngoog.math.Long.getTwoPwr24 = function() {\\n  return goog.reflect.cache(\\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24,\\n      function() { return goog.math.Long.fromInt(1 << 24); });\\n};\\n\\n\\n/** @return {number} The value, assuming it is a 32-bit integer. */\\ngoog.math.Long.prototype.toInt = function() {\\n  return this.low_;\\n};\\n\\n\\n/** @return {number} The closest floating-point representation to this value. */\\ngoog.math.Long.prototype.toNumber = function() {\\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\\n      this.getLowBitsUnsigned();\\n};\\n\\n\\n/**\\n * @param {number=} opt_radix The radix in which the text should be written.\\n * @return {string} The textual representation of this value.\\n * @override\\n */\\ngoog.math.Long.prototype.toString = function(opt_radix) {\\n  var radix = opt_radix || 10;\\n  if (radix < 2 || 36 < radix) {\\n    throw Error('radix out of range: ' + radix);\\n  }\\n\\n  if (this.isZero()) {\\n    return '0';\\n  }\\n\\n  if (this.isNegative()) {\\n    if (this.equals(goog.math.Long.getMinValue())) {\\n      // We need to change the Long value before it can be negated, so we remove\\n      // the bottom-most digit in this base and then recurse to do the rest.\\n      var radixLong = goog.math.Long.fromNumber(radix);\\n      var div = this.div(radixLong);\\n      var rem = div.multiply(radixLong).subtract(this);\\n      return div.toString(radix) + rem.toInt().toString(radix);\\n    } else {\\n      return '-' + this.negate().toString(radix);\\n    }\\n  }\\n\\n  // Do several (6) digits each time through the loop, so as to\\n  // minimize the calls to the very expensive emulated div.\\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));\\n\\n  var rem = this;\\n  var result = '';\\n  while (true) {\\n    var remDiv = rem.div(radixToPower);\\n    // The right shifting fixes negative values in the case when\\n    // intval >= 2^31; for more details see\\n    // https://github.com/google/closure-library/pull/498\\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\\n    var digits = intval.toString(radix);\\n\\n    rem = remDiv;\\n    if (rem.isZero()) {\\n      return digits + result;\\n    } else {\\n      while (digits.length < 6) {\\n        digits = '0' + digits;\\n      }\\n      result = '' + digits + result;\\n    }\\n  }\\n};\\n\\n\\n/** @return {number} The high 32-bits as a signed value. */\\ngoog.math.Long.prototype.getHighBits = function() {\\n  return this.high_;\\n};\\n\\n\\n/** @return {number} The low 32-bits as a signed value. */\\ngoog.math.Long.prototype.getLowBits = function() {\\n  return this.low_;\\n};\\n\\n\\n/** @return {number} The low 32-bits as an unsigned value. */\\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\\n  return (this.low_ >= 0) ? this.low_ :\\n                            goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\\n};\\n\\n\\n/**\\n * @return {number} Returns the number of bits needed to represent the absolute\\n *     value of this Long.\\n */\\ngoog.math.Long.prototype.getNumBitsAbs = function() {\\n  if (this.isNegative()) {\\n    if (this.equals(goog.math.Long.getMinValue())) {\\n      return 64;\\n    } else {\\n      return this.negate().getNumBitsAbs();\\n    }\\n  } else {\\n    var val = this.high_ != 0 ? this.high_ : this.low_;\\n    for (var bit = 31; bit > 0; bit--) {\\n      if ((val & (1 << bit)) != 0) {\\n        break;\\n      }\\n    }\\n    return this.high_ != 0 ? bit + 33 : bit + 1;\\n  }\\n};\\n\\n\\n/** @return {boolean} Whether this value is zero. */\\ngoog.math.Long.prototype.isZero = function() {\\n  return this.high_ == 0 && this.low_ == 0;\\n};\\n\\n\\n/** @return {boolean} Whether this value is negative. */\\ngoog.math.Long.prototype.isNegative = function() {\\n  return this.high_ < 0;\\n};\\n\\n\\n/** @return {boolean} Whether this value is odd. */\\ngoog.math.Long.prototype.isOdd = function() {\\n  return (this.low_ & 1) == 1;\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long equals the other.\\n */\\ngoog.math.Long.prototype.equals = function(other) {\\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long does not equal the other.\\n */\\ngoog.math.Long.prototype.notEquals = function(other) {\\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long is less than the other.\\n */\\ngoog.math.Long.prototype.lessThan = function(other) {\\n  return this.compare(other) < 0;\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long is less than or equal to the other.\\n */\\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\\n  return this.compare(other) <= 0;\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long is greater than the other.\\n */\\ngoog.math.Long.prototype.greaterThan = function(other) {\\n  return this.compare(other) > 0;\\n};\\n\\n\\n/**\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {boolean} Whether this Long is greater than or equal to the other.\\n */\\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\\n  return this.compare(other) >= 0;\\n};\\n\\n\\n/**\\n * Compares this Long with the given one.\\n * @param {goog.math.Long} other Long to compare against.\\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\\n *     if the given one is greater.\\n */\\ngoog.math.Long.prototype.compare = function(other) {\\n  if (this.equals(other)) {\\n    return 0;\\n  }\\n\\n  var thisNeg = this.isNegative();\\n  var otherNeg = other.isNegative();\\n  if (thisNeg && !otherNeg) {\\n    return -1;\\n  }\\n  if (!thisNeg && otherNeg) {\\n    return 1;\\n  }\\n\\n  // at this point, the signs are the same, so subtraction will not overflow\\n  if (this.subtract(other).isNegative()) {\\n    return -1;\\n  } else {\\n    return 1;\\n  }\\n};\\n\\n\\n/** @return {!goog.math.Long} The negation of this value. */\\ngoog.math.Long.prototype.negate = function() {\\n  if (this.equals(goog.math.Long.getMinValue())) {\\n    return goog.math.Long.getMinValue();\\n  } else {\\n    return this.not().add(goog.math.Long.getOne());\\n  }\\n};\\n\\n\\n/**\\n * Returns the sum of this and the given Long.\\n * @param {goog.math.Long} other Long to add to this one.\\n * @return {!goog.math.Long} The sum of this and the given Long.\\n */\\ngoog.math.Long.prototype.add = function(other) {\\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\\n\\n  var a48 = this.high_ >>> 16;\\n  var a32 = this.high_ & 0xFFFF;\\n  var a16 = this.low_ >>> 16;\\n  var a00 = this.low_ & 0xFFFF;\\n\\n  var b48 = other.high_ >>> 16;\\n  var b32 = other.high_ & 0xFFFF;\\n  var b16 = other.low_ >>> 16;\\n  var b00 = other.low_ & 0xFFFF;\\n\\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\\n  c00 += a00 + b00;\\n  c16 += c00 >>> 16;\\n  c00 &= 0xFFFF;\\n  c16 += a16 + b16;\\n  c32 += c16 >>> 16;\\n  c16 &= 0xFFFF;\\n  c32 += a32 + b32;\\n  c48 += c32 >>> 16;\\n  c32 &= 0xFFFF;\\n  c48 += a48 + b48;\\n  c48 &= 0xFFFF;\\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\\n};\\n\\n\\n/**\\n * Returns the difference of this and the given Long.\\n * @param {goog.math.Long} other Long to subtract from this.\\n * @return {!goog.math.Long} The difference of this and the given Long.\\n */\\ngoog.math.Long.prototype.subtract = function(other) {\\n  return this.add(other.negate());\\n};\\n\\n\\n/**\\n * Returns the product of this and the given long.\\n * @param {goog.math.Long} other Long to multiply with this.\\n * @return {!goog.math.Long} The product of this and the other.\\n */\\ngoog.math.Long.prototype.multiply = function(other) {\\n  if (this.isZero()) {\\n    return goog.math.Long.getZero();\\n  } else if (other.isZero()) {\\n    return goog.math.Long.getZero();\\n  }\\n\\n  if (this.equals(goog.math.Long.getMinValue())) {\\n    return other.isOdd() ? goog.math.Long.getMinValue() :\\n                           goog.math.Long.getZero();\\n  } else if (other.equals(goog.math.Long.getMinValue())) {\\n    return this.isOdd() ? goog.math.Long.getMinValue() :\\n                          goog.math.Long.getZero();\\n  }\\n\\n  if (this.isNegative()) {\\n    if (other.isNegative()) {\\n      return this.negate().multiply(other.negate());\\n    } else {\\n      return this.negate().multiply(other).negate();\\n    }\\n  } else if (other.isNegative()) {\\n    return this.multiply(other.negate()).negate();\\n  }\\n\\n  // If both longs are small, use float multiplication\\n  if (this.lessThan(goog.math.Long.getTwoPwr24()) &&\\n      other.lessThan(goog.math.Long.getTwoPwr24())) {\\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\\n  }\\n\\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\\n  // We can skip products that would overflow.\\n\\n  var a48 = this.high_ >>> 16;\\n  var a32 = this.high_ & 0xFFFF;\\n  var a16 = this.low_ >>> 16;\\n  var a00 = this.low_ & 0xFFFF;\\n\\n  var b48 = other.high_ >>> 16;\\n  var b32 = other.high_ & 0xFFFF;\\n  var b16 = other.low_ >>> 16;\\n  var b00 = other.low_ & 0xFFFF;\\n\\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\\n  c00 += a00 * b00;\\n  c16 += c00 >>> 16;\\n  c00 &= 0xFFFF;\\n  c16 += a16 * b00;\\n  c32 += c16 >>> 16;\\n  c16 &= 0xFFFF;\\n  c16 += a00 * b16;\\n  c32 += c16 >>> 16;\\n  c16 &= 0xFFFF;\\n  c32 += a32 * b00;\\n  c48 += c32 >>> 16;\\n  c32 &= 0xFFFF;\\n  c32 += a16 * b16;\\n  c48 += c32 >>> 16;\\n  c32 &= 0xFFFF;\\n  c32 += a00 * b32;\\n  c48 += c32 >>> 16;\\n  c32 &= 0xFFFF;\\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\\n  c48 &= 0xFFFF;\\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\\n};\\n\\n\\n/**\\n * Returns this Long divided by the given one.\\n * @param {goog.math.Long} other Long by which to divide.\\n * @return {!goog.math.Long} This Long divided by the given one.\\n */\\ngoog.math.Long.prototype.div = function(other) {\\n  if (other.isZero()) {\\n    throw Error('division by zero');\\n  } else if (this.isZero()) {\\n    return goog.math.Long.getZero();\\n  }\\n\\n  if (this.equals(goog.math.Long.getMinValue())) {\\n    if (other.equals(goog.math.Long.getOne()) ||\\n        other.equals(goog.math.Long.getNegOne())) {\\n      return goog.math.Long.getMinValue();  // recall -MIN_VALUE == MIN_VALUE\\n    } else if (other.equals(goog.math.Long.getMinValue())) {\\n      return goog.math.Long.getOne();\\n    } else {\\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\\n      var halfThis = this.shiftRight(1);\\n      var approx = halfThis.div(other).shiftLeft(1);\\n      if (approx.equals(goog.math.Long.getZero())) {\\n        return other.isNegative() ? goog.math.Long.getOne() :\\n                                    goog.math.Long.getNegOne();\\n      } else {\\n        var rem = this.subtract(other.multiply(approx));\\n        var result = approx.add(rem.div(other));\\n        return result;\\n      }\\n    }\\n  } else if (other.equals(goog.math.Long.getMinValue())) {\\n    return goog.math.Long.getZero();\\n  }\\n\\n  if (this.isNegative()) {\\n    if (other.isNegative()) {\\n      return this.negate().div(other.negate());\\n    } else {\\n      return this.negate().div(other).negate();\\n    }\\n  } else if (other.isNegative()) {\\n    return this.div(other.negate()).negate();\\n  }\\n\\n  // Repeat the following until the remainder is less than other:  find a\\n  // floating-point that approximates remainder / other *from below*, add this\\n  // into the result, and subtract it from the remainder.  It is critical that\\n  // the approximate value is less than or equal to the real value so that the\\n  // remainder never becomes negative.\\n  var res = goog.math.Long.getZero();\\n  var rem = this;\\n  while (rem.greaterThanOrEqual(other)) {\\n    // Approximate the result of division. This may be a little greater or\\n    // smaller than the actual value.\\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\\n\\n    // We will tweak the approximate result by changing it in the 48-th digit or\\n    // the smallest non-fractional digit, whichever is larger.\\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\\n\\n    // Decrease the approximation until it is smaller than the remainder.  Note\\n    // that if it is too large, the product overflows and is negative.\\n    var approxRes = goog.math.Long.fromNumber(approx);\\n    var approxRem = approxRes.multiply(other);\\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\\n      approx -= delta;\\n      approxRes = goog.math.Long.fromNumber(approx);\\n      approxRem = approxRes.multiply(other);\\n    }\\n\\n    // We know the answer can't be zero... and actually, zero would cause\\n    // infinite recursion since we would make no progress.\\n    if (approxRes.isZero()) {\\n      approxRes = goog.math.Long.getOne();\\n    }\\n\\n    res = res.add(approxRes);\\n    rem = rem.subtract(approxRem);\\n  }\\n  return res;\\n};\\n\\n\\n/**\\n * Returns this Long modulo the given one.\\n * @param {goog.math.Long} other Long by which to mod.\\n * @return {!goog.math.Long} This Long modulo the given one.\\n */\\ngoog.math.Long.prototype.modulo = function(other) {\\n  return this.subtract(this.div(other).multiply(other));\\n};\\n\\n\\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\\ngoog.math.Long.prototype.not = function() {\\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\\n};\\n\\n\\n/**\\n * Returns the bitwise-AND of this Long and the given one.\\n * @param {goog.math.Long} other The Long with which to AND.\\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\\n */\\ngoog.math.Long.prototype.and = function(other) {\\n  return goog.math.Long.fromBits(\\n      this.low_ & other.low_, this.high_ & other.high_);\\n};\\n\\n\\n/**\\n * Returns the bitwise-OR of this Long and the given one.\\n * @param {goog.math.Long} other The Long with which to OR.\\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\\n */\\ngoog.math.Long.prototype.or = function(other) {\\n  return goog.math.Long.fromBits(\\n      this.low_ | other.low_, this.high_ | other.high_);\\n};\\n\\n\\n/**\\n * Returns the bitwise-XOR of this Long and the given one.\\n * @param {goog.math.Long} other The Long with which to XOR.\\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\\n */\\ngoog.math.Long.prototype.xor = function(other) {\\n  return goog.math.Long.fromBits(\\n      this.low_ ^ other.low_, this.high_ ^ other.high_);\\n};\\n\\n\\n/**\\n * Returns this Long with bits shifted to the left by the given amount.\\n * @param {number} numBits The number of bits by which to shift.\\n * @return {!goog.math.Long} This shifted to the left by the given amount.\\n */\\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\\n  numBits &= 63;\\n  if (numBits == 0) {\\n    return this;\\n  } else {\\n    var low = this.low_;\\n    if (numBits < 32) {\\n      var high = this.high_;\\n      return goog.math.Long.fromBits(\\n          low << numBits, (high << numBits) | (low >>> (32 - numBits)));\\n    } else {\\n      return goog.math.Long.fromBits(0, low << (numBits - 32));\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Returns this Long with bits shifted to the right by the given amount.\\n * The new leading bits match the current sign bit.\\n * @param {number} numBits The number of bits by which to shift.\\n * @return {!goog.math.Long} This shifted to the right by the given amount.\\n */\\ngoog.math.Long.prototype.shiftRight = function(numBits) {\\n  numBits &= 63;\\n  if (numBits == 0) {\\n    return this;\\n  } else {\\n    var high = this.high_;\\n    if (numBits < 32) {\\n      var low = this.low_;\\n      return goog.math.Long.fromBits(\\n          (low >>> numBits) | (high << (32 - numBits)), high >> numBits);\\n    } else {\\n      return goog.math.Long.fromBits(\\n          high >> (numBits - 32), high >= 0 ? 0 : -1);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Returns this Long with bits shifted to the right by the given amount, with\\n * zeros placed into the new leading bits.\\n * @param {number} numBits The number of bits by which to shift.\\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\\n *     zeros placed into the new leading bits.\\n */\\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\\n  numBits &= 63;\\n  if (numBits == 0) {\\n    return this;\\n  } else {\\n    var high = this.high_;\\n    if (numBits < 32) {\\n      var low = this.low_;\\n      return goog.math.Long.fromBits(\\n          (low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\\n    } else if (numBits == 32) {\\n      return goog.math.Long.fromBits(high, 0);\\n    } else {\\n      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * @enum {number} Ids of commonly requested Long instances.\\n * @private\\n */\\ngoog.math.Long.ValueCacheId_ = {\\n  MAX_VALUE: 1,\\n  MIN_VALUE: 2,\\n  TWO_PWR_24: 6\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"math\",\"Long\",\"goog.math.Long\",\"low\",\"high\",\"low_\",\"high_\",\"IntCache_\",\"valueCache_\",\"getCachedIntValue_\",\"goog.math.Long.getCachedIntValue_\",\"value\",\"reflect\",\"cache\",\"val\",\"MAX_VALUE_FOR_RADIX_\",\"MIN_VALUE_FOR_RADIX_\",\"fromInt\",\"goog.math.Long.fromInt\",\"intValue\",\"asserts\",\"assert\",\"fromNumber\",\"goog.math.Long.fromNumber\",\"isNaN\",\"getZero\",\"TWO_PWR_63_DBL_\",\"getMinValue\",\"getMaxValue\",\"negate\",\"TWO_PWR_32_DBL_\",\"fromBits\",\"goog.math.Long.fromBits\",\"lowBits\",\"highBits\",\"fromString\",\"goog.math.Long.fromString\",\"str\",\"opt_radix\",\"length\",\"Error\",\"radix\",\"charAt\",\"substring\",\"indexOf\",\"radixToPower\",\"Math\",\"pow\",\"result\",\"i\",\"size\",\"min\",\"parseInt\",\"power\",\"multiply\",\"add\",\"isStringInRange\",\"goog.math.Long.isStringInRange\",\"extremeValue\",\"TWO_PWR_16_DBL_\",\"TWO_PWR_64_DBL_\",\"goog.math.Long.getZero\",\"getOne\",\"goog.math.Long.getOne\",\"getNegOne\",\"goog.math.Long.getNegOne\",\"goog.math.Long.getMaxValue\",\"ValueCacheId_\",\"MAX_VALUE\",\"goog.math.Long.getMinValue\",\"MIN_VALUE\",\"getTwoPwr24\",\"goog.math.Long.getTwoPwr24\",\"TWO_PWR_24\",\"prototype\",\"toInt\",\"goog.math.Long.prototype.toInt\",\"toNumber\",\"goog.math.Long.prototype.toNumber\",\"getLowBitsUnsigned\",\"toString\",\"goog.math.Long.prototype.toString\",\"isZero\",\"isNegative\",\"equals\",\"radixLong\",\"div\",\"rem\",\"subtract\",\"remDiv\",\"intval\",\"digits\",\"getHighBits\",\"goog.math.Long.prototype.getHighBits\",\"getLowBits\",\"goog.math.Long.prototype.getLowBits\",\"goog.math.Long.prototype.getLowBitsUnsigned\",\"getNumBitsAbs\",\"goog.math.Long.prototype.getNumBitsAbs\",\"bit\",\"goog.math.Long.prototype.isZero\",\"goog.math.Long.prototype.isNegative\",\"isOdd\",\"goog.math.Long.prototype.isOdd\",\"goog.math.Long.prototype.equals\",\"other\",\"notEquals\",\"goog.math.Long.prototype.notEquals\",\"lessThan\",\"goog.math.Long.prototype.lessThan\",\"compare\",\"lessThanOrEqual\",\"goog.math.Long.prototype.lessThanOrEqual\",\"greaterThan\",\"goog.math.Long.prototype.greaterThan\",\"greaterThanOrEqual\",\"goog.math.Long.prototype.greaterThanOrEqual\",\"goog.math.Long.prototype.compare\",\"thisNeg\",\"otherNeg\",\"goog.math.Long.prototype.negate\",\"not\",\"goog.math.Long.prototype.add\",\"a48\",\"a32\",\"a16\",\"a00\",\"b48\",\"b32\",\"b16\",\"b00\",\"c48\",\"c32\",\"c16\",\"c00\",\"goog.math.Long.prototype.subtract\",\"goog.math.Long.prototype.multiply\",\"goog.math.Long.prototype.div\",\"halfThis\",\"shiftRight\",\"approx\",\"shiftLeft\",\"res\",\"max\",\"floor\",\"log2\",\"ceil\",\"log\",\"LN2\",\"delta\",\"approxRes\",\"approxRem\",\"modulo\",\"goog.math.Long.prototype.modulo\",\"goog.math.Long.prototype.not\",\"and\",\"goog.math.Long.prototype.and\",\"or\",\"goog.math.Long.prototype.or\",\"xor\",\"goog.math.Long.prototype.xor\",\"goog.math.Long.prototype.shiftLeft\",\"numBits\",\"goog.math.Long.prototype.shiftRight\",\"shiftRightUnsigned\",\"goog.math.Long.prototype.shiftRightUnsigned\"]\n}\n"]