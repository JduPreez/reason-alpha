["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/date/utcdatetime.js"],"~:js","goog.provide(\"goog.date.UtcDateTime\");\ngoog.require(\"goog.date\");\ngoog.require(\"goog.date.Date\");\ngoog.require(\"goog.date.DateTime\");\ngoog.require(\"goog.date.Interval\");\n/**\n * @struct\n * @constructor\n * @extends {goog.date.DateTime}\n * @param {(number|goog.date.DateLike)=} opt_year\n * @param {number=} opt_month\n * @param {number=} opt_date\n * @param {number=} opt_hours\n * @param {number=} opt_minutes\n * @param {number=} opt_seconds\n * @param {number=} opt_milliseconds\n */\ngoog.date.UtcDateTime = function(opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) {\n  var timestamp;\n  if (goog.isNumber(opt_year)) {\n    timestamp = Date.UTC(opt_year, opt_month || 0, opt_date || 1, opt_hours || 0, opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    timestamp = opt_year ? opt_year.getTime() : goog.now();\n  }\n  this.date = new Date(timestamp);\n};\ngoog.inherits(goog.date.UtcDateTime, goog.date.DateTime);\n/**\n * @param {number} timestamp\n * @return {!goog.date.UtcDateTime}\n */\ngoog.date.UtcDateTime.fromTimestamp = function(timestamp) {\n  var date = new goog.date.UtcDateTime;\n  date.setTime(timestamp);\n  return date;\n};\n/**\n * @param {string} formatted\n * @return {goog.date.UtcDateTime}\n */\ngoog.date.UtcDateTime.fromIsoString = function(formatted) {\n  var ret = new goog.date.UtcDateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n/**\n * @return {!goog.date.UtcDateTime}\n * @override\n */\ngoog.date.UtcDateTime.prototype.clone = function() {\n  var date = new goog.date.UtcDateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n/** @override */ goog.date.UtcDateTime.prototype.add = function(interval) {\n  if (interval.years || interval.months) {\n    var yearsMonths = new goog.date.Interval(interval.years, interval.months);\n    goog.date.Date.prototype.add.call(this, yearsMonths);\n  }\n  var daysAndTimeMillis = 1000 * (interval.seconds + 60 * (interval.minutes + 60 * (interval.hours + 24 * interval.days)));\n  this.date = new Date(this.date.getTime() + daysAndTimeMillis);\n};\n/** @override */ goog.date.UtcDateTime.prototype.getTimezoneOffset = function() {\n  return 0;\n};\n/** @override */ goog.date.UtcDateTime.prototype.getFullYear = goog.date.DateTime.prototype.getUTCFullYear;\n/** @override */ goog.date.UtcDateTime.prototype.getMonth = goog.date.DateTime.prototype.getUTCMonth;\n/** @override */ goog.date.UtcDateTime.prototype.getDate = goog.date.DateTime.prototype.getUTCDate;\n/** @override */ goog.date.UtcDateTime.prototype.getHours = goog.date.DateTime.prototype.getUTCHours;\n/** @override */ goog.date.UtcDateTime.prototype.getMinutes = goog.date.DateTime.prototype.getUTCMinutes;\n/** @override */ goog.date.UtcDateTime.prototype.getSeconds = goog.date.DateTime.prototype.getUTCSeconds;\n/** @override */ goog.date.UtcDateTime.prototype.getMilliseconds = goog.date.DateTime.prototype.getUTCMilliseconds;\n/** @override */ goog.date.UtcDateTime.prototype.getDay = goog.date.DateTime.prototype.getUTCDay;\n/** @override */ goog.date.UtcDateTime.prototype.setFullYear = goog.date.DateTime.prototype.setUTCFullYear;\n/** @override */ goog.date.UtcDateTime.prototype.setMonth = goog.date.DateTime.prototype.setUTCMonth;\n/** @override */ goog.date.UtcDateTime.prototype.setDate = goog.date.DateTime.prototype.setUTCDate;\n/** @override */ goog.date.UtcDateTime.prototype.setHours = goog.date.DateTime.prototype.setUTCHours;\n/** @override */ goog.date.UtcDateTime.prototype.setMinutes = goog.date.DateTime.prototype.setUTCMinutes;\n/** @override */ goog.date.UtcDateTime.prototype.setSeconds = goog.date.DateTime.prototype.setUTCSeconds;\n/** @override */ goog.date.UtcDateTime.prototype.setMilliseconds = goog.date.DateTime.prototype.setUTCMilliseconds;\n","~:source","// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Locale independent date/time class.\n *\n */\n\ngoog.provide('goog.date.UtcDateTime');\n\ngoog.require('goog.date');\ngoog.require('goog.date.Date');\ngoog.require('goog.date.DateTime');\ngoog.require('goog.date.Interval');\n\n\n\n/**\n * Class representing a date/time in GMT+0 time zone, without daylight saving.\n * Defaults to current date and time if none is specified. The get... and the\n * getUTC... methods are equivalent.\n *\n * @param {number|goog.date.DateLike=} opt_year Four digit UTC year or a\n *     date-like object.  If not set, the created object will contain the\n *     date determined by goog.now().\n * @param {number=} opt_month UTC month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date UTC date of month, 1 - 31.\n * @param {number=} opt_hours UTC hours, 0 - 23.\n * @param {number=} opt_minutes UTC minutes, 0 - 59.\n * @param {number=} opt_seconds UTC seconds, 0 - 59.\n * @param {number=} opt_milliseconds UTC milliseconds, 0 - 999.\n * @constructor\n * @struct\n * @extends {goog.date.DateTime}\n */\ngoog.date.UtcDateTime = function(\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\n    opt_milliseconds) {\n  var timestamp;\n  if (goog.isNumber(opt_year)) {\n    timestamp = Date.UTC(\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    timestamp = opt_year ? opt_year.getTime() : goog.now();\n  }\n  this.date = new Date(timestamp);\n};\ngoog.inherits(goog.date.UtcDateTime, goog.date.DateTime);\n\n\n/**\n * @param {number} timestamp Number of milliseconds since Epoch.\n * @return {!goog.date.UtcDateTime}\n */\ngoog.date.UtcDateTime.fromTimestamp = function(timestamp) {\n  var date = new goog.date.UtcDateTime();\n  date.setTime(timestamp);\n  return date;\n};\n\n\n/**\n * Creates a DateTime from a UTC datetime string expressed in ISO 8601 format.\n *\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\n * @return {goog.date.UtcDateTime} Parsed date or null if parse fails.\n */\ngoog.date.UtcDateTime.fromIsoString = function(formatted) {\n  var ret = new goog.date.UtcDateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n\n\n/**\n * Clones the UtcDateTime object.\n *\n * @return {!goog.date.UtcDateTime} A clone of the datetime object.\n * @override\n */\ngoog.date.UtcDateTime.prototype.clone = function() {\n  var date = new goog.date.UtcDateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.add = function(interval) {\n  if (interval.years || interval.months) {\n    var yearsMonths = new goog.date.Interval(interval.years, interval.months);\n    goog.date.Date.prototype.add.call(this, yearsMonths);\n  }\n  var daysAndTimeMillis = 1000 *\n      (interval.seconds +\n       60 * (interval.minutes + 60 * (interval.hours + 24 * interval.days)));\n  this.date = new Date(this.date.getTime() + daysAndTimeMillis);\n};\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getTimezoneOffset = function() {\n  return 0;\n};\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getFullYear =\n    goog.date.DateTime.prototype.getUTCFullYear;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getMonth =\n    goog.date.DateTime.prototype.getUTCMonth;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getDate =\n    goog.date.DateTime.prototype.getUTCDate;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getHours =\n    goog.date.DateTime.prototype.getUTCHours;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getMinutes =\n    goog.date.DateTime.prototype.getUTCMinutes;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getSeconds =\n    goog.date.DateTime.prototype.getUTCSeconds;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getMilliseconds =\n    goog.date.DateTime.prototype.getUTCMilliseconds;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.getDay = goog.date.DateTime.prototype.getUTCDay;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setFullYear =\n    goog.date.DateTime.prototype.setUTCFullYear;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setMonth =\n    goog.date.DateTime.prototype.setUTCMonth;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setDate =\n    goog.date.DateTime.prototype.setUTCDate;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setHours =\n    goog.date.DateTime.prototype.setUTCHours;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setMinutes =\n    goog.date.DateTime.prototype.setUTCMinutes;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setSeconds =\n    goog.date.DateTime.prototype.setUTCSeconds;\n\n\n/** @override */\ngoog.date.UtcDateTime.prototype.setMilliseconds =\n    goog.date.DateTime.prototype.setUTCMilliseconds;\n","~:compiled-at",1574163696192,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.date.utcdatetime.js\",\n\"lineCount\":81,\n\"mappings\":\"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\",\n\"sources\":[\"goog/date/utcdatetime.js\"],\n\"sourcesContent\":[\"// Copyright 2009 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Locale independent date/time class.\\n *\\n */\\n\\ngoog.provide('goog.date.UtcDateTime');\\n\\ngoog.require('goog.date');\\ngoog.require('goog.date.Date');\\ngoog.require('goog.date.DateTime');\\ngoog.require('goog.date.Interval');\\n\\n\\n\\n/**\\n * Class representing a date/time in GMT+0 time zone, without daylight saving.\\n * Defaults to current date and time if none is specified. The get... and the\\n * getUTC... methods are equivalent.\\n *\\n * @param {number|goog.date.DateLike=} opt_year Four digit UTC year or a\\n *     date-like object.  If not set, the created object will contain the\\n *     date determined by goog.now().\\n * @param {number=} opt_month UTC month, 0 = Jan, 11 = Dec.\\n * @param {number=} opt_date UTC date of month, 1 - 31.\\n * @param {number=} opt_hours UTC hours, 0 - 23.\\n * @param {number=} opt_minutes UTC minutes, 0 - 59.\\n * @param {number=} opt_seconds UTC seconds, 0 - 59.\\n * @param {number=} opt_milliseconds UTC milliseconds, 0 - 999.\\n * @constructor\\n * @struct\\n * @extends {goog.date.DateTime}\\n */\\ngoog.date.UtcDateTime = function(\\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\\n    opt_milliseconds) {\\n  var timestamp;\\n  if (goog.isNumber(opt_year)) {\\n    timestamp = Date.UTC(\\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\\n  } else {\\n    timestamp = opt_year ? opt_year.getTime() : goog.now();\\n  }\\n  this.date = new Date(timestamp);\\n};\\ngoog.inherits(goog.date.UtcDateTime, goog.date.DateTime);\\n\\n\\n/**\\n * @param {number} timestamp Number of milliseconds since Epoch.\\n * @return {!goog.date.UtcDateTime}\\n */\\ngoog.date.UtcDateTime.fromTimestamp = function(timestamp) {\\n  var date = new goog.date.UtcDateTime();\\n  date.setTime(timestamp);\\n  return date;\\n};\\n\\n\\n/**\\n * Creates a DateTime from a UTC datetime string expressed in ISO 8601 format.\\n *\\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\\n * @return {goog.date.UtcDateTime} Parsed date or null if parse fails.\\n */\\ngoog.date.UtcDateTime.fromIsoString = function(formatted) {\\n  var ret = new goog.date.UtcDateTime(2000);\\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\\n};\\n\\n\\n/**\\n * Clones the UtcDateTime object.\\n *\\n * @return {!goog.date.UtcDateTime} A clone of the datetime object.\\n * @override\\n */\\ngoog.date.UtcDateTime.prototype.clone = function() {\\n  var date = new goog.date.UtcDateTime(this.date);\\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\\n  return date;\\n};\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.add = function(interval) {\\n  if (interval.years || interval.months) {\\n    var yearsMonths = new goog.date.Interval(interval.years, interval.months);\\n    goog.date.Date.prototype.add.call(this, yearsMonths);\\n  }\\n  var daysAndTimeMillis = 1000 *\\n      (interval.seconds +\\n       60 * (interval.minutes + 60 * (interval.hours + 24 * interval.days)));\\n  this.date = new Date(this.date.getTime() + daysAndTimeMillis);\\n};\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getTimezoneOffset = function() {\\n  return 0;\\n};\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getFullYear =\\n    goog.date.DateTime.prototype.getUTCFullYear;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getMonth =\\n    goog.date.DateTime.prototype.getUTCMonth;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getDate =\\n    goog.date.DateTime.prototype.getUTCDate;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getHours =\\n    goog.date.DateTime.prototype.getUTCHours;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getMinutes =\\n    goog.date.DateTime.prototype.getUTCMinutes;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getSeconds =\\n    goog.date.DateTime.prototype.getUTCSeconds;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getMilliseconds =\\n    goog.date.DateTime.prototype.getUTCMilliseconds;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.getDay = goog.date.DateTime.prototype.getUTCDay;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setFullYear =\\n    goog.date.DateTime.prototype.setUTCFullYear;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setMonth =\\n    goog.date.DateTime.prototype.setUTCMonth;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setDate =\\n    goog.date.DateTime.prototype.setUTCDate;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setHours =\\n    goog.date.DateTime.prototype.setUTCHours;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setMinutes =\\n    goog.date.DateTime.prototype.setUTCMinutes;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setSeconds =\\n    goog.date.DateTime.prototype.setUTCSeconds;\\n\\n\\n/** @override */\\ngoog.date.UtcDateTime.prototype.setMilliseconds =\\n    goog.date.DateTime.prototype.setUTCMilliseconds;\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"date\",\"UtcDateTime\",\"goog.date.UtcDateTime\",\"opt_year\",\"opt_month\",\"opt_date\",\"opt_hours\",\"opt_minutes\",\"opt_seconds\",\"opt_milliseconds\",\"timestamp\",\"isNumber\",\"Date\",\"UTC\",\"getTime\",\"now\",\"inherits\",\"DateTime\",\"fromTimestamp\",\"goog.date.UtcDateTime.fromTimestamp\",\"setTime\",\"fromIsoString\",\"goog.date.UtcDateTime.fromIsoString\",\"formatted\",\"ret\",\"setIso8601DateTime\",\"prototype\",\"clone\",\"goog.date.UtcDateTime.prototype.clone\",\"setFirstDayOfWeek\",\"getFirstDayOfWeek\",\"setFirstWeekCutOffDay\",\"getFirstWeekCutOffDay\",\"add\",\"goog.date.UtcDateTime.prototype.add\",\"interval\",\"years\",\"months\",\"yearsMonths\",\"Interval\",\"call\",\"daysAndTimeMillis\",\"seconds\",\"minutes\",\"hours\",\"days\",\"getTimezoneOffset\",\"goog.date.UtcDateTime.prototype.getTimezoneOffset\",\"getFullYear\",\"getUTCFullYear\",\"getMonth\",\"getUTCMonth\",\"getDate\",\"getUTCDate\",\"getHours\",\"getUTCHours\",\"getMinutes\",\"getUTCMinutes\",\"getSeconds\",\"getUTCSeconds\",\"getMilliseconds\",\"getUTCMilliseconds\",\"getDay\",\"getUTCDay\",\"setFullYear\",\"setUTCFullYear\",\"setMonth\",\"setUTCMonth\",\"setDate\",\"setUTCDate\",\"setHours\",\"setUTCHours\",\"setMinutes\",\"setUTCMinutes\",\"setSeconds\",\"setUTCSeconds\",\"setMilliseconds\",\"setUTCMilliseconds\"]\n}\n"]