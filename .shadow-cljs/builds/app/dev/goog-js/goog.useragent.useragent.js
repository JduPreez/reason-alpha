["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/useragent/useragent.js"],"~:js","goog.provide(\"goog.userAgent\");\ngoog.require(\"goog.labs.userAgent.browser\");\ngoog.require(\"goog.labs.userAgent.engine\");\ngoog.require(\"goog.labs.userAgent.platform\");\ngoog.require(\"goog.labs.userAgent.util\");\ngoog.require(\"goog.reflect\");\ngoog.require(\"goog.string\");\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_IE\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_EDGE\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_GECKO\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_WEBKIT\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_MOBILE_WEBKIT\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_OPERA\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_ANY_VERSION\", false);\n/** @private @type {boolean} */ goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;\n/**\n * @return {string}\n */\ngoog.userAgent.getUserAgentString = function() {\n  return goog.labs.userAgent.util.getUserAgent();\n};\n/**\n * @return {?Object}\n */\ngoog.userAgent.getNavigator = function() {\n  return goog.global[\"navigator\"] || null;\n};\n/** @type {boolean} */ goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();\n/** @type {boolean} */ goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();\n/** @type {boolean} */ goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();\n/** @type {boolean} */ goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;\n/** @type {boolean} */ goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();\n/** @type {boolean} */ goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();\n/**\n * @private\n * @return {boolean}\n */\ngoog.userAgent.isMobile_ = function() {\n  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent(\"Mobile\");\n};\n/** @type {boolean} */ goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();\n/**\n * @type {boolean}\n * @deprecated Use {@link goog.userAgent.product.SAFARI} instead. TODO(nicksantos): Delete this from goog.userAgent.\n */\ngoog.userAgent.SAFARI = goog.userAgent.WEBKIT;\n/**\n * @private\n * @return {string}\n */\ngoog.userAgent.determinePlatform_ = function() {\n  var navigator = goog.userAgent.getNavigator();\n  return navigator && navigator.platform || \"\";\n};\n/** @type {string} */ goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_MAC\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_WINDOWS\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_LINUX\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_X11\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_ANDROID\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_IPHONE\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_IPAD\", false);\n/** @define {boolean} */ goog.define(\"goog.userAgent.ASSUME_IPOD\", false);\n/** @private @type {boolean} */ goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;\n/** @type {boolean} */ goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();\n/** @type {boolean} */ goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();\n/**\n * @private\n * @return {boolean}\n */\ngoog.userAgent.isLegacyLinux_ = function() {\n  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();\n};\n/** @type {boolean} */ goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();\n/**\n * @private\n * @return {boolean}\n */\ngoog.userAgent.isX11_ = function() {\n  var navigator = goog.userAgent.getNavigator();\n  return !!navigator && goog.string.contains(navigator[\"appVersion\"] || \"\", \"X11\");\n};\n/** @type {boolean} */ goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();\n/** @type {boolean} */ goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();\n/** @type {boolean} */ goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();\n/** @type {boolean} */ goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();\n/** @type {boolean} */ goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();\n/** @type {boolean} */ goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();\n/**\n * @private\n * @return {string}\n */\ngoog.userAgent.determineVersion_ = function() {\n  var version = \"\";\n  var arr = goog.userAgent.getVersionRegexResult_();\n  if (arr) {\n    version = arr ? arr[1] : \"\";\n  }\n  if (goog.userAgent.IE) {\n    var docMode = goog.userAgent.getDocumentMode_();\n    if (docMode != null && docMode > parseFloat(version)) {\n      return String(docMode);\n    }\n  }\n  return version;\n};\n/**\n * @private\n * @return {(?Array|undefined)}\n */\ngoog.userAgent.getVersionRegexResult_ = function() {\n  var userAgent = goog.userAgent.getUserAgentString();\n  if (goog.userAgent.GECKO) {\n    return /rv:([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.EDGE) {\n    return /Edge\\/([\\d\\.]+)/.exec(userAgent);\n  }\n  if (goog.userAgent.IE) {\n    return /\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.WEBKIT) {\n    return /WebKit\\/(\\S+)/.exec(userAgent);\n  }\n  if (goog.userAgent.OPERA) {\n    return /(?:Version)[ \\/]?(\\S+)/.exec(userAgent);\n  }\n  return undefined;\n};\n/**\n * @private\n * @return {(number|undefined)}\n */\ngoog.userAgent.getDocumentMode_ = function() {\n  var doc = goog.global[\"document\"];\n  return doc ? doc[\"documentMode\"] : undefined;\n};\n/** @type {string} */ goog.userAgent.VERSION = goog.userAgent.determineVersion_();\n/**\n * @param {string} v1\n * @param {string} v2\n * @return {number}\n * @deprecated Use goog.string.compareVersions.\n */\ngoog.userAgent.compare = function(v1, v2) {\n  return goog.string.compareVersions(v1, v2);\n};\n/** @private @const */ goog.userAgent.isVersionOrHigherCache_ = {};\n/**\n * @param {(string|number)} version\n * @return {boolean}\n */\ngoog.userAgent.isVersionOrHigher = function(version) {\n  return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, version, function() {\n    return goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0;\n  });\n};\n/**\n * @param {(string|number)} version\n * @return {boolean}\n * @deprecated Use goog.userAgent.isVersionOrHigher().\n */\ngoog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;\n/**\n * @param {number} documentMode\n * @return {boolean}\n */\ngoog.userAgent.isDocumentModeOrHigher = function(documentMode) {\n  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;\n};\n/**\n * @param {number} version\n * @return {boolean}\n * @deprecated Use goog.userAgent.isDocumentModeOrHigher().\n */\ngoog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;\n/** @const @type {(number|undefined)} */ goog.userAgent.DOCUMENT_MODE = function() {\n  var doc = goog.global[\"document\"];\n  var mode = goog.userAgent.getDocumentMode_();\n  if (!doc || !goog.userAgent.IE) {\n    return undefined;\n  }\n  return mode || (doc[\"compatMode\"] == \"CSS1Compat\" ? parseInt(goog.userAgent.VERSION, 10) : 5);\n}();\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Rendering engine detection.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>\n * For information on the browser brand (such as Safari versus Chrome), see\n * goog.userAgent.product.\n * @author arv@google.com (Erik Arvidsson)\n * @see ../demos/useragent.html\n */\n\ngoog.provide('goog.userAgent');\n\ngoog.require('goog.labs.userAgent.browser');\ngoog.require('goog.labs.userAgent.engine');\ngoog.require('goog.labs.userAgent.platform');\ngoog.require('goog.labs.userAgent.util');\ngoog.require('goog.reflect');\ngoog.require('goog.string');\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is IE.\n */\ngoog.define('goog.userAgent.ASSUME_IE', false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is EDGE.\n */\ngoog.define('goog.userAgent.ASSUME_EDGE', false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is GECKO.\n */\ngoog.define('goog.userAgent.ASSUME_GECKO', false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.\n */\ngoog.define('goog.userAgent.ASSUME_WEBKIT', false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is a\n *     mobile device running WebKit e.g. iPhone or Android.\n */\ngoog.define('goog.userAgent.ASSUME_MOBILE_WEBKIT', false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is OPERA.\n */\ngoog.define('goog.userAgent.ASSUME_OPERA', false);\n\n\n/**\n * @define {boolean} Whether the\n *     {@code goog.userAgent.isVersionOrHigher}\n *     function will return true for any version.\n */\ngoog.define('goog.userAgent.ASSUME_ANY_VERSION', false);\n\n\n/**\n * Whether we know the browser engine at compile-time.\n * @type {boolean}\n * @private\n */\ngoog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE ||\n    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO ||\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT ||\n    goog.userAgent.ASSUME_OPERA;\n\n\n/**\n * Returns the userAgent string for the current browser.\n *\n * @return {string} The userAgent string.\n */\ngoog.userAgent.getUserAgentString = function() {\n  return goog.labs.userAgent.util.getUserAgent();\n};\n\n\n/**\n * TODO(nnaze): Change type to \"Navigator\" and update compilation targets.\n * @return {?Object} The native navigator object.\n */\ngoog.userAgent.getNavigator = function() {\n  // Need a local navigator reference instead of using the global one,\n  // to avoid the rare case where they reference different objects.\n  // (in a WorkerPool, for example).\n  return goog.global['navigator'] || null;\n};\n\n\n/**\n * Whether the user agent is Opera.\n * @type {boolean}\n */\ngoog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_OPERA :\n    goog.labs.userAgent.browser.isOpera();\n\n\n/**\n * Whether the user agent is Internet Explorer.\n * @type {boolean}\n */\ngoog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_IE :\n    goog.labs.userAgent.browser.isIE();\n\n\n/**\n * Whether the user agent is Microsoft Edge.\n * @type {boolean}\n */\ngoog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_EDGE :\n    goog.labs.userAgent.engine.isEdge();\n\n\n/**\n * Whether the user agent is MS Internet Explorer or MS Edge.\n * @type {boolean}\n */\ngoog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;\n\n\n/**\n * Whether the user agent is Gecko. Gecko is the rendering engine used by\n * Mozilla, Firefox, and others.\n * @type {boolean}\n */\ngoog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_GECKO :\n    goog.labs.userAgent.engine.isGecko();\n\n\n/**\n * Whether the user agent is WebKit. WebKit is the rendering engine that\n * Safari, Android and others use.\n * @type {boolean}\n */\ngoog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :\n    goog.labs.userAgent.engine.isWebKit();\n\n\n/**\n * Whether the user agent is running on a mobile device.\n *\n * This is a separate function so that the logic can be tested.\n *\n * TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().\n *\n * @return {boolean} Whether the user agent is running on a mobile device.\n * @private\n */\ngoog.userAgent.isMobile_ = function() {\n  return goog.userAgent.WEBKIT &&\n      goog.labs.userAgent.util.matchUserAgent('Mobile');\n};\n\n\n/**\n * Whether the user agent is running on a mobile device.\n *\n * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent\n *   is promoted as the gecko/webkit logic is likely inaccurate.\n *\n * @type {boolean}\n */\ngoog.userAgent.MOBILE =\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();\n\n\n/**\n * Used while transitioning code to use WEBKIT instead.\n * @type {boolean}\n * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.\n * TODO(nicksantos): Delete this from goog.userAgent.\n */\ngoog.userAgent.SAFARI = goog.userAgent.WEBKIT;\n\n\n/**\n * @return {string} the platform (operating system) the user agent is running\n *     on. Default to empty string because navigator.platform may not be defined\n *     (on Rhino, for example).\n * @private\n */\ngoog.userAgent.determinePlatform_ = function() {\n  var navigator = goog.userAgent.getNavigator();\n  return navigator && navigator.platform || '';\n};\n\n\n/**\n * The platform (operating system) the user agent is running on. Default to\n * empty string because navigator.platform may not be defined (on Rhino, for\n * example).\n * @type {string}\n */\ngoog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Macintosh operating\n *     system.\n */\ngoog.define('goog.userAgent.ASSUME_MAC', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Windows operating\n *     system.\n */\ngoog.define('goog.userAgent.ASSUME_WINDOWS', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Linux operating\n *     system.\n */\ngoog.define('goog.userAgent.ASSUME_LINUX', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a X11 windowing\n *     system.\n */\ngoog.define('goog.userAgent.ASSUME_X11', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on Android.\n */\ngoog.define('goog.userAgent.ASSUME_ANDROID', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPhone.\n */\ngoog.define('goog.userAgent.ASSUME_IPHONE', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPad.\n */\ngoog.define('goog.userAgent.ASSUME_IPAD', false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPod.\n */\ngoog.define('goog.userAgent.ASSUME_IPOD', false);\n\n\n/**\n * @type {boolean}\n * @private\n */\ngoog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC ||\n    goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX ||\n    goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID ||\n    goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\n    goog.userAgent.ASSUME_IPOD;\n\n\n/**\n * Whether the user agent is running on a Macintosh operating system.\n * @type {boolean}\n */\ngoog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_MAC :\n    goog.labs.userAgent.platform.isMacintosh();\n\n\n/**\n * Whether the user agent is running on a Windows operating system.\n * @type {boolean}\n */\ngoog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_WINDOWS :\n    goog.labs.userAgent.platform.isWindows();\n\n\n/**\n * Whether the user agent is Linux per the legacy behavior of\n * goog.userAgent.LINUX, which considered ChromeOS to also be\n * Linux.\n * @return {boolean}\n * @private\n */\ngoog.userAgent.isLegacyLinux_ = function() {\n  return goog.labs.userAgent.platform.isLinux() ||\n      goog.labs.userAgent.platform.isChromeOS();\n};\n\n\n/**\n * Whether the user agent is running on a Linux operating system.\n *\n * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,\n * while goog.labs.userAgent.platform considers ChromeOS and\n * Linux to be different OSes.\n *\n * @type {boolean}\n */\ngoog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_LINUX :\n    goog.userAgent.isLegacyLinux_();\n\n\n/**\n * @return {boolean} Whether the user agent is an X11 windowing system.\n * @private\n */\ngoog.userAgent.isX11_ = function() {\n  var navigator = goog.userAgent.getNavigator();\n  return !!navigator &&\n      goog.string.contains(navigator['appVersion'] || '', 'X11');\n};\n\n\n/**\n * Whether the user agent is running on a X11 windowing system.\n * @type {boolean}\n */\ngoog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_X11 :\n    goog.userAgent.isX11_();\n\n\n/**\n * Whether the user agent is running on Android.\n * @type {boolean}\n */\ngoog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_ANDROID :\n    goog.labs.userAgent.platform.isAndroid();\n\n\n/**\n * Whether the user agent is running on an iPhone.\n * @type {boolean}\n */\ngoog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPHONE :\n    goog.labs.userAgent.platform.isIphone();\n\n\n/**\n * Whether the user agent is running on an iPad.\n * @type {boolean}\n */\ngoog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPAD :\n    goog.labs.userAgent.platform.isIpad();\n\n\n/**\n * Whether the user agent is running on an iPod.\n * @type {boolean}\n */\ngoog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPOD :\n    goog.labs.userAgent.platform.isIpod();\n\n\n/**\n * Whether the user agent is running on iOS.\n * @type {boolean}\n */\ngoog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ?\n    (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\n     goog.userAgent.ASSUME_IPOD) :\n    goog.labs.userAgent.platform.isIos();\n\n/**\n * @return {string} The string that describes the version number of the user\n *     agent.\n * @private\n */\ngoog.userAgent.determineVersion_ = function() {\n  // All browsers have different ways to detect the version and they all have\n  // different naming schemes.\n  // version is a string rather than a number because it may contain 'b', 'a',\n  // and so on.\n  var version = '';\n  var arr = goog.userAgent.getVersionRegexResult_();\n  if (arr) {\n    version = arr ? arr[1] : '';\n  }\n\n  if (goog.userAgent.IE) {\n    // IE9 can be in document mode 9 but be reporting an inconsistent user agent\n    // version.  If it is identifying as a version lower than 9 we take the\n    // documentMode as the version instead.  IE8 has similar behavior.\n    // It is recommended to set the X-UA-Compatible header to ensure that IE9\n    // uses documentMode 9.\n    var docMode = goog.userAgent.getDocumentMode_();\n    if (docMode != null && docMode > parseFloat(version)) {\n      return String(docMode);\n    }\n  }\n\n  return version;\n};\n\n\n/**\n * @return {?Array|undefined} The version regex matches from parsing the user\n *     agent string. These regex statements must be executed inline so they can\n *     be compiled out by the closure compiler with the rest of the useragent\n *     detection logic when ASSUME_* is specified.\n * @private\n */\ngoog.userAgent.getVersionRegexResult_ = function() {\n  var userAgent = goog.userAgent.getUserAgentString();\n  if (goog.userAgent.GECKO) {\n    return /rv\\:([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.EDGE) {\n    return /Edge\\/([\\d\\.]+)/.exec(userAgent);\n  }\n  if (goog.userAgent.IE) {\n    return /\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.WEBKIT) {\n    // WebKit/125.4\n    return /WebKit\\/(\\S+)/.exec(userAgent);\n  }\n  if (goog.userAgent.OPERA) {\n    // If none of the above browsers were detected but the browser is Opera, the\n    // only string that is of interest is 'Version/<number>'.\n    return /(?:Version)[ \\/]?(\\S+)/.exec(userAgent);\n  }\n  return undefined;\n};\n\n\n/**\n * @return {number|undefined} Returns the document mode (for testing).\n * @private\n */\ngoog.userAgent.getDocumentMode_ = function() {\n  // NOTE(user): goog.userAgent may be used in context where there is no DOM.\n  var doc = goog.global['document'];\n  return doc ? doc['documentMode'] : undefined;\n};\n\n\n/**\n * The version of the user agent. This is a string because it might contain\n * 'b' (as in beta) as well as multiple dots.\n * @type {string}\n */\ngoog.userAgent.VERSION = goog.userAgent.determineVersion_();\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string} v1 Version of first item.\n * @param {string} v2 Version of second item.\n *\n * @return {number}  1 if first argument is higher\n *                   0 if arguments are equal\n *                  -1 if second argument is higher.\n * @deprecated Use goog.string.compareVersions.\n */\ngoog.userAgent.compare = function(v1, v2) {\n  return goog.string.compareVersions(v1, v2);\n};\n\n\n/**\n * Cache for {@link goog.userAgent.isVersionOrHigher}.\n * Calls to compareVersions are surprisingly expensive and, as a browser's\n * version number is unlikely to change during a session, we cache the results.\n * @const\n * @private\n */\ngoog.userAgent.isVersionOrHigherCache_ = {};\n\n\n/**\n * Whether the user agent version is higher or the same as the given version.\n * NOTE: When checking the version numbers for Firefox and Safari, be sure to\n * use the engine's version, not the browser's version number.  For example,\n * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.\n * Opera and Internet Explorer versions match the product release number.<br>\n * @see <a href=\"http://en.wikipedia.org/wiki/Safari_version_history\">\n *     Webkit</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Gecko_engine\">Gecko</a>\n *\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the user agent version is higher or the same as\n *     the given version.\n */\ngoog.userAgent.isVersionOrHigher = function(version) {\n  return goog.userAgent.ASSUME_ANY_VERSION ||\n      goog.reflect.cache(\n          goog.userAgent.isVersionOrHigherCache_, version, function() {\n            return goog.string.compareVersions(\n                       goog.userAgent.VERSION, version) >= 0;\n          });\n};\n\n\n/**\n * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the user agent version is higher or the same as\n *     the given version.\n * @deprecated Use goog.userAgent.isVersionOrHigher().\n */\ngoog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;\n\n\n/**\n * Whether the IE effective document mode is higher or the same as the given\n * document mode version.\n * NOTE: Only for IE, return false for another browser.\n *\n * @param {number} documentMode The document mode version to check.\n * @return {boolean} Whether the IE effective document mode is higher or the\n *     same as the given version.\n */\ngoog.userAgent.isDocumentModeOrHigher = function(documentMode) {\n  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;\n};\n\n\n/**\n * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.\n * @param {number} version The version to check.\n * @return {boolean} Whether the IE effective document mode is higher or the\n *      same as the given version.\n * @deprecated Use goog.userAgent.isDocumentModeOrHigher().\n */\ngoog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;\n\n\n/**\n * For IE version < 7, documentMode is undefined, so attempt to use the\n * CSS1Compat property to see if we are in standards mode. If we are in\n * standards mode, treat the browser version as the document mode. Otherwise,\n * IE is emulating version 5.\n * @type {number|undefined}\n * @const\n */\ngoog.userAgent.DOCUMENT_MODE = (function() {\n  var doc = goog.global['document'];\n  var mode = goog.userAgent.getDocumentMode_();\n  if (!doc || !goog.userAgent.IE) {\n    return undefined;\n  }\n  return mode || (doc['compatMode'] == 'CSS1Compat' ?\n                      parseInt(goog.userAgent.VERSION, 10) :\n                      5);\n})();\n","~:compiled-at",1574163696078,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.useragent.useragent.js\",\n\"lineCount\":185,\n\"mappings\":\"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\",\n\"sources\":[\"goog/useragent/useragent.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Rendering engine detection.\\n * @see <a href=\\\"http://www.useragentstring.com/\\\">User agent strings</a>\\n * For information on the browser brand (such as Safari versus Chrome), see\\n * goog.userAgent.product.\\n * @author arv@google.com (Erik Arvidsson)\\n * @see ../demos/useragent.html\\n */\\n\\ngoog.provide('goog.userAgent');\\n\\ngoog.require('goog.labs.userAgent.browser');\\ngoog.require('goog.labs.userAgent.engine');\\ngoog.require('goog.labs.userAgent.platform');\\ngoog.require('goog.labs.userAgent.util');\\ngoog.require('goog.reflect');\\ngoog.require('goog.string');\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is IE.\\n */\\ngoog.define('goog.userAgent.ASSUME_IE', false);\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is EDGE.\\n */\\ngoog.define('goog.userAgent.ASSUME_EDGE', false);\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is GECKO.\\n */\\ngoog.define('goog.userAgent.ASSUME_GECKO', false);\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.\\n */\\ngoog.define('goog.userAgent.ASSUME_WEBKIT', false);\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is a\\n *     mobile device running WebKit e.g. iPhone or Android.\\n */\\ngoog.define('goog.userAgent.ASSUME_MOBILE_WEBKIT', false);\\n\\n\\n/**\\n * @define {boolean} Whether we know at compile-time that the browser is OPERA.\\n */\\ngoog.define('goog.userAgent.ASSUME_OPERA', false);\\n\\n\\n/**\\n * @define {boolean} Whether the\\n *     {@code goog.userAgent.isVersionOrHigher}\\n *     function will return true for any version.\\n */\\ngoog.define('goog.userAgent.ASSUME_ANY_VERSION', false);\\n\\n\\n/**\\n * Whether we know the browser engine at compile-time.\\n * @type {boolean}\\n * @private\\n */\\ngoog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE ||\\n    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO ||\\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT ||\\n    goog.userAgent.ASSUME_OPERA;\\n\\n\\n/**\\n * Returns the userAgent string for the current browser.\\n *\\n * @return {string} The userAgent string.\\n */\\ngoog.userAgent.getUserAgentString = function() {\\n  return goog.labs.userAgent.util.getUserAgent();\\n};\\n\\n\\n/**\\n * TODO(nnaze): Change type to \\\"Navigator\\\" and update compilation targets.\\n * @return {?Object} The native navigator object.\\n */\\ngoog.userAgent.getNavigator = function() {\\n  // Need a local navigator reference instead of using the global one,\\n  // to avoid the rare case where they reference different objects.\\n  // (in a WorkerPool, for example).\\n  return goog.global['navigator'] || null;\\n};\\n\\n\\n/**\\n * Whether the user agent is Opera.\\n * @type {boolean}\\n */\\ngoog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?\\n    goog.userAgent.ASSUME_OPERA :\\n    goog.labs.userAgent.browser.isOpera();\\n\\n\\n/**\\n * Whether the user agent is Internet Explorer.\\n * @type {boolean}\\n */\\ngoog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?\\n    goog.userAgent.ASSUME_IE :\\n    goog.labs.userAgent.browser.isIE();\\n\\n\\n/**\\n * Whether the user agent is Microsoft Edge.\\n * @type {boolean}\\n */\\ngoog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ?\\n    goog.userAgent.ASSUME_EDGE :\\n    goog.labs.userAgent.engine.isEdge();\\n\\n\\n/**\\n * Whether the user agent is MS Internet Explorer or MS Edge.\\n * @type {boolean}\\n */\\ngoog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;\\n\\n\\n/**\\n * Whether the user agent is Gecko. Gecko is the rendering engine used by\\n * Mozilla, Firefox, and others.\\n * @type {boolean}\\n */\\ngoog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?\\n    goog.userAgent.ASSUME_GECKO :\\n    goog.labs.userAgent.engine.isGecko();\\n\\n\\n/**\\n * Whether the user agent is WebKit. WebKit is the rendering engine that\\n * Safari, Android and others use.\\n * @type {boolean}\\n */\\ngoog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?\\n    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :\\n    goog.labs.userAgent.engine.isWebKit();\\n\\n\\n/**\\n * Whether the user agent is running on a mobile device.\\n *\\n * This is a separate function so that the logic can be tested.\\n *\\n * TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().\\n *\\n * @return {boolean} Whether the user agent is running on a mobile device.\\n * @private\\n */\\ngoog.userAgent.isMobile_ = function() {\\n  return goog.userAgent.WEBKIT &&\\n      goog.labs.userAgent.util.matchUserAgent('Mobile');\\n};\\n\\n\\n/**\\n * Whether the user agent is running on a mobile device.\\n *\\n * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent\\n *   is promoted as the gecko/webkit logic is likely inaccurate.\\n *\\n * @type {boolean}\\n */\\ngoog.userAgent.MOBILE =\\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();\\n\\n\\n/**\\n * Used while transitioning code to use WEBKIT instead.\\n * @type {boolean}\\n * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.\\n * TODO(nicksantos): Delete this from goog.userAgent.\\n */\\ngoog.userAgent.SAFARI = goog.userAgent.WEBKIT;\\n\\n\\n/**\\n * @return {string} the platform (operating system) the user agent is running\\n *     on. Default to empty string because navigator.platform may not be defined\\n *     (on Rhino, for example).\\n * @private\\n */\\ngoog.userAgent.determinePlatform_ = function() {\\n  var navigator = goog.userAgent.getNavigator();\\n  return navigator && navigator.platform || '';\\n};\\n\\n\\n/**\\n * The platform (operating system) the user agent is running on. Default to\\n * empty string because navigator.platform may not be defined (on Rhino, for\\n * example).\\n * @type {string}\\n */\\ngoog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on a Macintosh operating\\n *     system.\\n */\\ngoog.define('goog.userAgent.ASSUME_MAC', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on a Windows operating\\n *     system.\\n */\\ngoog.define('goog.userAgent.ASSUME_WINDOWS', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on a Linux operating\\n *     system.\\n */\\ngoog.define('goog.userAgent.ASSUME_LINUX', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on a X11 windowing\\n *     system.\\n */\\ngoog.define('goog.userAgent.ASSUME_X11', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on Android.\\n */\\ngoog.define('goog.userAgent.ASSUME_ANDROID', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on an iPhone.\\n */\\ngoog.define('goog.userAgent.ASSUME_IPHONE', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on an iPad.\\n */\\ngoog.define('goog.userAgent.ASSUME_IPAD', false);\\n\\n\\n/**\\n * @define {boolean} Whether the user agent is running on an iPod.\\n */\\ngoog.define('goog.userAgent.ASSUME_IPOD', false);\\n\\n\\n/**\\n * @type {boolean}\\n * @private\\n */\\ngoog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC ||\\n    goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX ||\\n    goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID ||\\n    goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\\n    goog.userAgent.ASSUME_IPOD;\\n\\n\\n/**\\n * Whether the user agent is running on a Macintosh operating system.\\n * @type {boolean}\\n */\\ngoog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_MAC :\\n    goog.labs.userAgent.platform.isMacintosh();\\n\\n\\n/**\\n * Whether the user agent is running on a Windows operating system.\\n * @type {boolean}\\n */\\ngoog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_WINDOWS :\\n    goog.labs.userAgent.platform.isWindows();\\n\\n\\n/**\\n * Whether the user agent is Linux per the legacy behavior of\\n * goog.userAgent.LINUX, which considered ChromeOS to also be\\n * Linux.\\n * @return {boolean}\\n * @private\\n */\\ngoog.userAgent.isLegacyLinux_ = function() {\\n  return goog.labs.userAgent.platform.isLinux() ||\\n      goog.labs.userAgent.platform.isChromeOS();\\n};\\n\\n\\n/**\\n * Whether the user agent is running on a Linux operating system.\\n *\\n * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,\\n * while goog.labs.userAgent.platform considers ChromeOS and\\n * Linux to be different OSes.\\n *\\n * @type {boolean}\\n */\\ngoog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_LINUX :\\n    goog.userAgent.isLegacyLinux_();\\n\\n\\n/**\\n * @return {boolean} Whether the user agent is an X11 windowing system.\\n * @private\\n */\\ngoog.userAgent.isX11_ = function() {\\n  var navigator = goog.userAgent.getNavigator();\\n  return !!navigator &&\\n      goog.string.contains(navigator['appVersion'] || '', 'X11');\\n};\\n\\n\\n/**\\n * Whether the user agent is running on a X11 windowing system.\\n * @type {boolean}\\n */\\ngoog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_X11 :\\n    goog.userAgent.isX11_();\\n\\n\\n/**\\n * Whether the user agent is running on Android.\\n * @type {boolean}\\n */\\ngoog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_ANDROID :\\n    goog.labs.userAgent.platform.isAndroid();\\n\\n\\n/**\\n * Whether the user agent is running on an iPhone.\\n * @type {boolean}\\n */\\ngoog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_IPHONE :\\n    goog.labs.userAgent.platform.isIphone();\\n\\n\\n/**\\n * Whether the user agent is running on an iPad.\\n * @type {boolean}\\n */\\ngoog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_IPAD :\\n    goog.labs.userAgent.platform.isIpad();\\n\\n\\n/**\\n * Whether the user agent is running on an iPod.\\n * @type {boolean}\\n */\\ngoog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ?\\n    goog.userAgent.ASSUME_IPOD :\\n    goog.labs.userAgent.platform.isIpod();\\n\\n\\n/**\\n * Whether the user agent is running on iOS.\\n * @type {boolean}\\n */\\ngoog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ?\\n    (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\\n     goog.userAgent.ASSUME_IPOD) :\\n    goog.labs.userAgent.platform.isIos();\\n\\n/**\\n * @return {string} The string that describes the version number of the user\\n *     agent.\\n * @private\\n */\\ngoog.userAgent.determineVersion_ = function() {\\n  // All browsers have different ways to detect the version and they all have\\n  // different naming schemes.\\n  // version is a string rather than a number because it may contain 'b', 'a',\\n  // and so on.\\n  var version = '';\\n  var arr = goog.userAgent.getVersionRegexResult_();\\n  if (arr) {\\n    version = arr ? arr[1] : '';\\n  }\\n\\n  if (goog.userAgent.IE) {\\n    // IE9 can be in document mode 9 but be reporting an inconsistent user agent\\n    // version.  If it is identifying as a version lower than 9 we take the\\n    // documentMode as the version instead.  IE8 has similar behavior.\\n    // It is recommended to set the X-UA-Compatible header to ensure that IE9\\n    // uses documentMode 9.\\n    var docMode = goog.userAgent.getDocumentMode_();\\n    if (docMode != null && docMode > parseFloat(version)) {\\n      return String(docMode);\\n    }\\n  }\\n\\n  return version;\\n};\\n\\n\\n/**\\n * @return {?Array|undefined} The version regex matches from parsing the user\\n *     agent string. These regex statements must be executed inline so they can\\n *     be compiled out by the closure compiler with the rest of the useragent\\n *     detection logic when ASSUME_* is specified.\\n * @private\\n */\\ngoog.userAgent.getVersionRegexResult_ = function() {\\n  var userAgent = goog.userAgent.getUserAgentString();\\n  if (goog.userAgent.GECKO) {\\n    return /rv\\\\:([^\\\\);]+)(\\\\)|;)/.exec(userAgent);\\n  }\\n  if (goog.userAgent.EDGE) {\\n    return /Edge\\\\/([\\\\d\\\\.]+)/.exec(userAgent);\\n  }\\n  if (goog.userAgent.IE) {\\n    return /\\\\b(?:MSIE|rv)[: ]([^\\\\);]+)(\\\\)|;)/.exec(userAgent);\\n  }\\n  if (goog.userAgent.WEBKIT) {\\n    // WebKit/125.4\\n    return /WebKit\\\\/(\\\\S+)/.exec(userAgent);\\n  }\\n  if (goog.userAgent.OPERA) {\\n    // If none of the above browsers were detected but the browser is Opera, the\\n    // only string that is of interest is 'Version/<number>'.\\n    return /(?:Version)[ \\\\/]?(\\\\S+)/.exec(userAgent);\\n  }\\n  return undefined;\\n};\\n\\n\\n/**\\n * @return {number|undefined} Returns the document mode (for testing).\\n * @private\\n */\\ngoog.userAgent.getDocumentMode_ = function() {\\n  // NOTE(user): goog.userAgent may be used in context where there is no DOM.\\n  var doc = goog.global['document'];\\n  return doc ? doc['documentMode'] : undefined;\\n};\\n\\n\\n/**\\n * The version of the user agent. This is a string because it might contain\\n * 'b' (as in beta) as well as multiple dots.\\n * @type {string}\\n */\\ngoog.userAgent.VERSION = goog.userAgent.determineVersion_();\\n\\n\\n/**\\n * Compares two version numbers.\\n *\\n * @param {string} v1 Version of first item.\\n * @param {string} v2 Version of second item.\\n *\\n * @return {number}  1 if first argument is higher\\n *                   0 if arguments are equal\\n *                  -1 if second argument is higher.\\n * @deprecated Use goog.string.compareVersions.\\n */\\ngoog.userAgent.compare = function(v1, v2) {\\n  return goog.string.compareVersions(v1, v2);\\n};\\n\\n\\n/**\\n * Cache for {@link goog.userAgent.isVersionOrHigher}.\\n * Calls to compareVersions are surprisingly expensive and, as a browser's\\n * version number is unlikely to change during a session, we cache the results.\\n * @const\\n * @private\\n */\\ngoog.userAgent.isVersionOrHigherCache_ = {};\\n\\n\\n/**\\n * Whether the user agent version is higher or the same as the given version.\\n * NOTE: When checking the version numbers for Firefox and Safari, be sure to\\n * use the engine's version, not the browser's version number.  For example,\\n * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.\\n * Opera and Internet Explorer versions match the product release number.<br>\\n * @see <a href=\\\"http://en.wikipedia.org/wiki/Safari_version_history\\\">\\n *     Webkit</a>\\n * @see <a href=\\\"http://en.wikipedia.org/wiki/Gecko_engine\\\">Gecko</a>\\n *\\n * @param {string|number} version The version to check.\\n * @return {boolean} Whether the user agent version is higher or the same as\\n *     the given version.\\n */\\ngoog.userAgent.isVersionOrHigher = function(version) {\\n  return goog.userAgent.ASSUME_ANY_VERSION ||\\n      goog.reflect.cache(\\n          goog.userAgent.isVersionOrHigherCache_, version, function() {\\n            return goog.string.compareVersions(\\n                       goog.userAgent.VERSION, version) >= 0;\\n          });\\n};\\n\\n\\n/**\\n * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.\\n * @param {string|number} version The version to check.\\n * @return {boolean} Whether the user agent version is higher or the same as\\n *     the given version.\\n * @deprecated Use goog.userAgent.isVersionOrHigher().\\n */\\ngoog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;\\n\\n\\n/**\\n * Whether the IE effective document mode is higher or the same as the given\\n * document mode version.\\n * NOTE: Only for IE, return false for another browser.\\n *\\n * @param {number} documentMode The document mode version to check.\\n * @return {boolean} Whether the IE effective document mode is higher or the\\n *     same as the given version.\\n */\\ngoog.userAgent.isDocumentModeOrHigher = function(documentMode) {\\n  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;\\n};\\n\\n\\n/**\\n * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.\\n * @param {number} version The version to check.\\n * @return {boolean} Whether the IE effective document mode is higher or the\\n *      same as the given version.\\n * @deprecated Use goog.userAgent.isDocumentModeOrHigher().\\n */\\ngoog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;\\n\\n\\n/**\\n * For IE version < 7, documentMode is undefined, so attempt to use the\\n * CSS1Compat property to see if we are in standards mode. If we are in\\n * standards mode, treat the browser version as the document mode. Otherwise,\\n * IE is emulating version 5.\\n * @type {number|undefined}\\n * @const\\n */\\ngoog.userAgent.DOCUMENT_MODE = (function() {\\n  var doc = goog.global['document'];\\n  var mode = goog.userAgent.getDocumentMode_();\\n  if (!doc || !goog.userAgent.IE) {\\n    return undefined;\\n  }\\n  return mode || (doc['compatMode'] == 'CSS1Compat' ?\\n                      parseInt(goog.userAgent.VERSION, 10) :\\n                      5);\\n})();\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"define\",\"userAgent\",\"BROWSER_KNOWN_\",\"ASSUME_IE\",\"ASSUME_EDGE\",\"ASSUME_GECKO\",\"ASSUME_MOBILE_WEBKIT\",\"ASSUME_WEBKIT\",\"ASSUME_OPERA\",\"getUserAgentString\",\"goog.userAgent.getUserAgentString\",\"labs\",\"util\",\"getUserAgent\",\"getNavigator\",\"goog.userAgent.getNavigator\",\"global\",\"OPERA\",\"browser\",\"isOpera\",\"IE\",\"isIE\",\"EDGE\",\"engine\",\"isEdge\",\"EDGE_OR_IE\",\"GECKO\",\"isGecko\",\"WEBKIT\",\"isWebKit\",\"isMobile_\",\"goog.userAgent.isMobile_\",\"matchUserAgent\",\"MOBILE\",\"SAFARI\",\"determinePlatform_\",\"goog.userAgent.determinePlatform_\",\"navigator\",\"platform\",\"PLATFORM\",\"PLATFORM_KNOWN_\",\"ASSUME_MAC\",\"ASSUME_WINDOWS\",\"ASSUME_LINUX\",\"ASSUME_X11\",\"ASSUME_ANDROID\",\"ASSUME_IPHONE\",\"ASSUME_IPAD\",\"ASSUME_IPOD\",\"MAC\",\"isMacintosh\",\"WINDOWS\",\"isWindows\",\"isLegacyLinux_\",\"goog.userAgent.isLegacyLinux_\",\"isLinux\",\"isChromeOS\",\"LINUX\",\"isX11_\",\"goog.userAgent.isX11_\",\"string\",\"contains\",\"X11\",\"ANDROID\",\"isAndroid\",\"IPHONE\",\"isIphone\",\"IPAD\",\"isIpad\",\"IPOD\",\"isIpod\",\"IOS\",\"isIos\",\"determineVersion_\",\"goog.userAgent.determineVersion_\",\"version\",\"arr\",\"getVersionRegexResult_\",\"docMode\",\"getDocumentMode_\",\"parseFloat\",\"String\",\"goog.userAgent.getVersionRegexResult_\",\"exec\",\"undefined\",\"goog.userAgent.getDocumentMode_\",\"doc\",\"VERSION\",\"compare\",\"goog.userAgent.compare\",\"v1\",\"v2\",\"compareVersions\",\"isVersionOrHigherCache_\",\"isVersionOrHigher\",\"goog.userAgent.isVersionOrHigher\",\"ASSUME_ANY_VERSION\",\"reflect\",\"cache\",\"isVersion\",\"isDocumentModeOrHigher\",\"goog.userAgent.isDocumentModeOrHigher\",\"documentMode\",\"Number\",\"DOCUMENT_MODE\",\"isDocumentMode\",\"mode\",\"parseInt\"]\n}\n"]