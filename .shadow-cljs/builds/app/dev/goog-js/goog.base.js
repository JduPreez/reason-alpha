["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/base.js"],"~:js","/** @define {boolean} */ var COMPILED = false;\n/** @const */ var goog = goog || {};\ngoog.global = this;\n/** @type {(Object<string,(string|number|boolean)>|undefined)} */ goog.global.CLOSURE_UNCOMPILED_DEFINES;\n/** @type {(Object<string,(string|number|boolean)>|undefined)} */ goog.global.CLOSURE_DEFINES;\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isDef = function(val) {\n  return val !== void 0;\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isString = function(val) {\n  return typeof val == \"string\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isBoolean = function(val) {\n  return typeof val == \"boolean\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isNumber = function(val) {\n  return typeof val == \"number\";\n};\n/**\n * @private\n * @param {string} name\n * @param {*=} opt_object\n * @param {Object=} opt_objectToExportTo\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split(\".\");\n  var cur = opt_objectToExportTo || goog.global;\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript(\"var \" + parts[0]);\n  }\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      cur[part] = opt_object;\n    } else {\n      if (cur[part] && cur[part] !== Object.prototype[part]) {\n        cur = cur[part];\n      } else {\n        cur = cur[part] = {};\n      }\n    }\n  }\n};\n/**\n * @param {string} name\n * @param {(string|number|boolean)} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && /** @type {?} */ (goog.global.CLOSURE_UNCOMPILED_DEFINES).nodeType === undefined && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else {\n      if (goog.global.CLOSURE_DEFINES && /** @type {?} */ (goog.global.CLOSURE_DEFINES).nodeType === undefined && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {\n        value = goog.global.CLOSURE_DEFINES[name];\n      }\n    }\n  }\n  goog.exportPath_(name, value);\n};\n/** @define {boolean} */ goog.define(\"goog.DEBUG\", true);\n/** @define {string} */ goog.define(\"goog.LOCALE\", \"en\");\n/** @define {boolean} */ goog.define(\"goog.TRUSTED_SITE\", true);\n/** @define {boolean} */ goog.define(\"goog.STRICT_MODE_COMPATIBLE\", false);\n/** @define {boolean} */ goog.define(\"goog.DISALLOW_TEST_ONLY_CODE\", COMPILED && !goog.DEBUG);\n/** @define {boolean} */ goog.define(\"goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING\", false);\n/**\n * @param {string} name\n */\ngoog.provide = function(name) {\n  if (goog.isInModuleLoader_()) {\n    throw Error(\"goog.provide can not be used within a goog.module.\");\n  }\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n  goog.constructNamespace_(name);\n};\n/**\n * @private\n * @param {string} name\n * @param {Object=} opt_obj\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n    var namespace = name;\n    while (namespace = namespace.substring(0, namespace.lastIndexOf(\".\"))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n  goog.exportPath_(name, opt_obj);\n};\n/** @private */ goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n/**\n * @param {string} name\n * @return {void}\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error(\"Invalid module identifier\");\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error(\"Module \" + name + \" has been loaded incorrectly. Note, \" + \"modules cannot be loaded as normal scripts. They require some kind of \" + \"pre-processing step. You're likely trying to load a module via a \" + \"script tag or as a part of a concatenated bundle without rewriting the \" + \"module. For more info see: \" + \"https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\");\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error(\"goog.module may only be called once per module.\");\n  }\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n/**\n * @param {string} name\n * @return {?}\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n/**\n * @private\n * @param {string} name\n * @return {?}\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (name in goog.loadedModules_) {\n      return goog.loadedModules_[name];\n    } else {\n      if (!goog.implicitNamespaces_[name]) {\n        var ns = goog.getObjectByName(name);\n        return ns != null ? ns : null;\n      }\n    }\n  }\n  return null;\n};\n/** @private @type {?{moduleName:(string|undefined),declareLegacyNamespace:boolean}} */ goog.moduleLoaderState_ = null;\n/**\n * @private\n * @return {boolean}\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n/**\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error(\"goog.module.declareLegacyNamespace must be called from \" + \"within a goog.module\");\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error(\"goog.module must be called prior to \" + \"goog.module.declareLegacyNamespace.\");\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n/**\n * @param {string=} opt_message\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || \"\";\n    throw Error(\"Importing test-only code into non-debug environment\" + (opt_message ? \": \" + opt_message : \".\"));\n  }\n};\n/**\n * @param {string} name\n */\ngoog.forwardDeclare = function(name) {\n};\ngoog.forwardDeclare(\"Document\");\ngoog.forwardDeclare(\"HTMLScriptElement\");\ngoog.forwardDeclare(\"XMLHttpRequest\");\nif (!COMPILED) {\n  /**\n   * @private\n   * @param {string} name\n   * @return {boolean}\n   */\n  goog.isProvided_ = function(name) {\n    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));\n  };\n  /** @private @type {!Object<string,(boolean|undefined)>} */ goog.implicitNamespaces_ = {\"goog.module\":true};\n}\n/**\n * @param {string} name\n * @param {Object=} opt_obj\n * @return {?}\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split(\".\");\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift();) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n/**\n * @param {!Object} obj\n * @param {Object=} opt_global\n * @deprecated Properties may be explicitly exported to the global scope, but this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n/**\n * @param {string} relPath\n * @param {!Array<string>} provides\n * @param {!Array<string>} requires\n * @param {(boolean|!Object<?,string>)=} opt_loadFlags\n */\ngoog.addDependency = function(relPath, provides, requires, opt_loadFlags) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, \"/\");\n    var deps = goog.dependencies_;\n    if (!opt_loadFlags || typeof opt_loadFlags === \"boolean\") {\n      opt_loadFlags = opt_loadFlags ? {\"module\":\"goog\"} : {};\n    }\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.loadFlags[path] = opt_loadFlags;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n/** @define {boolean} */ goog.define(\"goog.ENABLE_DEBUG_LOADER\", true);\n/**\n * @private\n * @param {string} msg\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console[\"error\"](msg);\n  }\n};\n/**\n * @param {string} name\n * @return {?}\n */\ngoog.require = function(name) {\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      }\n    } else {\n      if (goog.ENABLE_DEBUG_LOADER) {\n        var path = goog.getPathFromDeps_(name);\n        if (path) {\n          goog.writeScripts_(path);\n        } else {\n          var errorMessage = \"goog.require could not find: \" + name;\n          goog.logToConsole_(errorMessage);\n          throw Error(errorMessage);\n        }\n      }\n    }\n    return null;\n  }\n};\n/** @type {string} */ goog.basePath = \"\";\n/** @type {(string|undefined)} */ goog.global.CLOSURE_BASE_PATH;\n/** @type {(boolean|undefined)} */ goog.global.CLOSURE_NO_DEPS;\n/** @type {(function(string):boolean|undefined)} */ goog.global.CLOSURE_IMPORT_SCRIPT;\n/**\n * @return {void}\n */\ngoog.nullFunction = function() {\n};\n/** @type {!Function} */ goog.abstractMethod = function() {\n  throw Error(\"unimplemented abstract method\");\n};\n/**\n * @param {!Function} ctor\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.instance_ = undefined;\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n/** @private @type {!Array<!Function>} */ goog.instantiatedSingletons_ = [];\n/** @define {boolean} */ goog.define(\"goog.LOAD_MODULE_USING_EVAL\", true);\n/** @define {boolean} */ goog.define(\"goog.SEAL_MODULE_EXPORTS\", goog.DEBUG);\n/** @private @const @type {!Object<string,?>} */ goog.loadedModules_ = {};\n/** @const @type {boolean} */ goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n/** @define {string} */ goog.define(\"goog.TRANSPILE\", \"detect\");\n/** @define {string} */ goog.define(\"goog.TRANSPILER\", \"transpile.js\");\nif (goog.DEPENDENCIES_ENABLED) {\n  /** @private @type {{loadFlags:!Object<string,!Object<string,string>>,nameToPath:!Object<string,string>,requires:!Object<string,!Object<string,boolean>>,visited:!Object<string,boolean>,written:!Object<string,boolean>,deferred:!Object<string,string>}} */ goog.dependencies_ = {loadFlags:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};\n  /**\n   * @private\n   * @return {boolean}\n   */\n  goog.inHtmlDocument_ = function() {\n    /** @type {Document} */ var doc = goog.global.document;\n    return doc != null && \"write\" in doc;\n  };\n  /** @private */ goog.findBasePath_ = function() {\n    if (goog.isDef(goog.global.CLOSURE_BASE_PATH) && goog.isString(goog.global.CLOSURE_BASE_PATH)) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else {\n      if (!goog.inHtmlDocument_()) {\n        return;\n      }\n    }\n    /** @type {Document} */ var doc = goog.global.document;\n    var currentScript = doc.currentScript;\n    if (currentScript) {\n      var scripts = [currentScript];\n    } else {\n      var scripts = doc.getElementsByTagName(\"SCRIPT\");\n    }\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf(\"?\");\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == \"base.js\") {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {string} src\n   * @param {string=} opt_sourceText\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n  /** @private @const @type {boolean} */ goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);\n  /** @private @type {boolean} */ goog.oldIeWaiting_ = false;\n  /**\n   * @private\n   * @param {string} src\n   * @param {boolean} isModule\n   * @param {boolean} needsTranspile\n   */\n  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {\n    var bootstrap = 'goog.retrieveAndExec_(\"' + src + '\", ' + isModule + \", \" + needsTranspile + \");\";\n    goog.importScript_(\"\", bootstrap);\n  };\n  /** @private @type {!Array<string>} */ goog.queuedModules_ = [];\n  /**\n   * @private\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return \"\" + \"goog.loadModule(function(exports) {\" + '\"use strict\";' + scriptText + \"\\n\" + \";return exports\" + \"});\" + \"\\n//# sourceURL\\x3d\" + srcUrl + \"\\n\";\n    } else {\n      return \"\" + \"goog.loadModule(\" + goog.global.JSON.stringify(scriptText + \"\\n//# sourceURL\\x3d\" + srcUrl + \"\\n\") + \");\";\n    }\n  };\n  /** @private */ goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n    goog.oldIeWaiting_ = false;\n  };\n  /**\n   * @private\n   * @param {string} name\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n  /**\n   * @private\n   * @param {string} name\n   * @return {boolean}\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};\n    var languageLevel = loadFlags[\"lang\"] || \"es3\";\n    if (path && (loadFlags[\"module\"] == \"goog\" || goog.needsTranspile_(languageLevel))) {\n      var abspath = goog.basePath + path;\n      return abspath in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n  /**\n   * @private\n   * @param {string} name\n   * @return {boolean}\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && path in goog.dependencies_.requires) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  /**\n   * @private\n   * @param {string} abspath\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n  /**\n   * @param {string} url\n   */\n  goog.loadModuleFromUrl = function(url) {\n    goog.retrieveAndExec_(url, true, false);\n  };\n  /**\n   * @private\n   * @param {string} src\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write('\\x3cscript type\\x3d\"text/javascript\" src\\x3d\"' + src + '\"\\x3e\\x3c/' + \"script\\x3e\");\n  };\n  /**\n   * @private\n   * @param {string} src\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    /** @type {Document} */ var doc = goog.global.document;\n    var scriptEl = /** @type {HTMLScriptElement} */ (doc.createElement(\"script\"));\n    scriptEl.type = \"text/javascript\";\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n  /**\n   * @private\n   * @param {string} src\n   * @param {string=} opt_sourceText\n   * @return {boolean}\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      /** @type {!HTMLDocument} */ var doc = goog.global.document;\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == \"complete\") {\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n      if (opt_sourceText === undefined) {\n        if (!goog.IS_OLD_IE_) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          goog.oldIeWaiting_ = true;\n          var state = \" onreadystatechange\\x3d'goog.onScriptLoad_(this, \" + ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write('\\x3cscript type\\x3d\"text/javascript\" src\\x3d\"' + src + '\"' + state + \"\\x3e\\x3c/\" + \"script\\x3e\");\n        }\n      } else {\n        doc.write('\\x3cscript type\\x3d\"text/javascript\"\\x3e' + goog.protectScriptTag_(opt_sourceText) + \"\\x3c/\" + \"script\\x3e\");\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */\n  goog.protectScriptTag_ = function(str) {\n    return str.replace(/<\\/(SCRIPT)/ig, \"\\\\x3c/$1\");\n  };\n  /**\n   * @private\n   * @param {string} lang\n   * @return {boolean}\n   */\n  goog.needsTranspile_ = function(lang) {\n    if (goog.TRANSPILE == \"always\") {\n      return true;\n    } else {\n      if (goog.TRANSPILE == \"never\") {\n        return false;\n      } else {\n        if (!goog.requiresTranspilation_) {\n          goog.requiresTranspilation_ = goog.createRequiresTranspilation_();\n        }\n      }\n    }\n    if (lang in goog.requiresTranspilation_) {\n      return goog.requiresTranspilation_[lang];\n    } else {\n      throw new Error(\"Unknown language mode: \" + lang);\n    }\n  };\n  /** @private @type {?Object<string,boolean>} */ goog.requiresTranspilation_ = null;\n  /** @private @type {number} */ goog.lastNonModuleScriptIndex_ = 0;\n  /**\n   * @private\n   * @param {?} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    if (script.readyState == \"complete\" && goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n  /**\n   * @private\n   * @param {string} pathToLoad\n   */\n  goog.writeScripts_ = function(pathToLoad) {\n    /** @type {!Array<string>} */ var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n    /**\n     * @param {string} path\n     */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n      if (path in deps.visited) {\n        return;\n      }\n      deps.visited[path] = true;\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error(\"Undefined nameToPath for \" + requireName);\n            }\n          }\n        }\n      }\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n    visitNode(pathToLoad);\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        var loadFlags = deps.loadFlags[path] || {};\n        var languageLevel = loadFlags[\"lang\"] || \"es3\";\n        var needsTranspile = goog.needsTranspile_(languageLevel);\n        if (loadFlags[\"module\"] == \"goog\" || needsTranspile) {\n          goog.importProcessedScript_(goog.basePath + path, loadFlags[\"module\"] == \"goog\", needsTranspile);\n        } else {\n          goog.importScript_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error(\"Undefined script input\");\n      }\n    }\n    goog.moduleLoaderState_ = moduleState;\n  };\n  /**\n   * @private\n   * @param {string} rule\n   * @return {?string}\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n  goog.findBasePath_();\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + \"deps.js\");\n  }\n}\n/** @package @type {?boolean} */ goog.hasBadLetScoping = null;\n/**\n * @package\n * @return {boolean}\n */\ngoog.useSafari10Workaround = function() {\n  if (goog.hasBadLetScoping == null) {\n    var hasBadLetScoping;\n    try {\n      hasBadLetScoping = !eval('\"use strict\";' + \"let x \\x3d 1; function f() { return typeof x; };\" + 'f() \\x3d\\x3d \"number\";');\n    } catch (e) {\n      hasBadLetScoping = false;\n    }\n    goog.hasBadLetScoping = hasBadLetScoping;\n  }\n  return goog.hasBadLetScoping;\n};\n/**\n * @package\n * @param {string} moduleDef\n * @return {string}\n */\ngoog.workaroundSafari10EvalBug = function(moduleDef) {\n  return \"(function(){\" + moduleDef + \"\\n\" + \";\" + \"})();\\n\";\n};\n/**\n * @param {(function(?):?|string)} moduleDef\n */\ngoog.loadModule = function(moduleDef) {\n  var previousState = goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};\n    var exports;\n    if (goog.isFunction(moduleDef)) {\n      exports = moduleDef.call(undefined, {});\n    } else {\n      if (goog.isString(moduleDef)) {\n        if (goog.useSafari10Workaround()) {\n          moduleDef = goog.workaroundSafari10EvalBug(moduleDef);\n        }\n        exports = goog.loadModuleFromSource_.call(undefined, moduleDef);\n      } else {\n        throw Error(\"Invalid module definition\");\n      }\n    }\n    var moduleName = goog.moduleLoaderState_.moduleName;\n    if (!goog.isString(moduleName) || !moduleName) {\n      throw Error('Invalid module name \"' + moduleName + '\"');\n    }\n    if (goog.moduleLoaderState_.declareLegacyNamespace) {\n      goog.constructNamespace_(moduleName, exports);\n    } else {\n      if (goog.SEAL_MODULE_EXPORTS && Object.seal && typeof exports == \"object\" && exports != null) {\n        Object.seal(exports);\n      }\n    }\n    goog.loadedModules_[moduleName] = exports;\n  } finally {\n    goog.moduleLoaderState_ = previousState;\n  }\n};\n/** @private @const */ goog.loadModuleFromSource_ = /** @type {function(string):?} */ (function() {\n  var exports = {};\n  eval(arguments[0]);\n  return exports;\n});\n/**\n * @private\n * @param {string} path\n * @return {string}\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split(\"/\");\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == \".\") {\n      components.splice(i, 1);\n    } else {\n      if (i && components[i] == \"..\" && components[i - 1] && components[i - 1] != \"..\") {\n        components.splice(--i, 2);\n      } else {\n        i++;\n      }\n    }\n  }\n  return components.join(\"/\");\n};\n/** @type {(function(string):string|undefined)} */ goog.global.CLOSURE_LOAD_FILE_SYNC;\n/**\n * @private\n * @param {string} src\n * @return {?string}\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    try {\n      /** @type {XMLHttpRequest} */ var xhr = new goog.global[\"XMLHttpRequest\"];\n      xhr.open(\"get\", src, false);\n      xhr.send();\n      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;\n    } catch (err) {\n      return null;\n    }\n  }\n};\n/**\n * @private\n * @param {string} src\n * @param {boolean} isModule\n * @param {boolean} needsTranspile\n */\ngoog.retrieveAndExec_ = function(src, isModule, needsTranspile) {\n  if (!COMPILED) {\n    var originalPath = src;\n    src = goog.normalizePath_(src);\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\n    var scriptText = goog.loadFileSync_(src);\n    if (scriptText == null) {\n      throw new Error('Load of \"' + src + '\" failed');\n    }\n    if (needsTranspile) {\n      scriptText = goog.transpile_.call(goog.global, scriptText, src);\n    }\n    if (isModule) {\n      scriptText = goog.wrapModule_(src, scriptText);\n    } else {\n      scriptText += \"\\n//# sourceURL\\x3d\" + src;\n    }\n    var isOldIE = goog.IS_OLD_IE_;\n    if (isOldIE && goog.oldIeWaiting_) {\n      goog.dependencies_.deferred[originalPath] = scriptText;\n      goog.queuedModules_.push(originalPath);\n    } else {\n      importScript(src, scriptText);\n    }\n  }\n};\n/**\n * @private\n * @param {string} code\n * @param {string} path\n * @return {string}\n */\ngoog.transpile_ = function(code, path) {\n  var jscomp = goog.global[\"$jscomp\"];\n  if (!jscomp) {\n    goog.global[\"$jscomp\"] = jscomp = {};\n  }\n  var transpile = jscomp.transpile;\n  if (!transpile) {\n    var transpilerPath = goog.basePath + goog.TRANSPILER;\n    var transpilerCode = goog.loadFileSync_(transpilerPath);\n    if (transpilerCode) {\n      eval(transpilerCode + \"\\n//# sourceURL\\x3d\" + transpilerPath);\n      if (goog.global[\"$gwtExport\"] && goog.global[\"$gwtExport\"][\"$jscomp\"] && !goog.global[\"$gwtExport\"][\"$jscomp\"][\"transpile\"]) {\n        throw new Error('The transpiler did not properly export the \"transpile\" ' + \"method. $gwtExport: \" + JSON.stringify(goog.global[\"$gwtExport\"]));\n      }\n      goog.global[\"$jscomp\"].transpile = goog.global[\"$gwtExport\"][\"$jscomp\"][\"transpile\"];\n      jscomp = goog.global[\"$jscomp\"];\n      transpile = jscomp.transpile;\n    }\n  }\n  if (!transpile) {\n    var suffix = \" requires transpilation but no transpiler was found.\";\n    transpile = jscomp.transpile = function(code, path) {\n      goog.logToConsole_(path + suffix);\n      return code;\n    };\n  }\n  return transpile(code, path);\n};\n/**\n * @param {?} value\n * @return {string}\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == \"object\") {\n    if (value) {\n      if (value instanceof Array) {\n        return \"array\";\n      } else {\n        if (value instanceof Object) {\n          return s;\n        }\n      }\n      var className = Object.prototype.toString.call(/** @type {!Object} */ (value));\n      if (className == \"[object Window]\") {\n        return \"object\";\n      }\n      if (className == \"[object Array]\" || typeof value.length == \"number\" && typeof value.splice != \"undefined\" && typeof value.propertyIsEnumerable != \"undefined\" && !value.propertyIsEnumerable(\"splice\")) {\n        return \"array\";\n      }\n      if (className == \"[object Function]\" || typeof value.call != \"undefined\" && typeof value.propertyIsEnumerable != \"undefined\" && !value.propertyIsEnumerable(\"call\")) {\n        return \"function\";\n      }\n    } else {\n      return \"null\";\n    }\n  } else {\n    if (s == \"function\" && typeof value.call == \"undefined\") {\n      return \"object\";\n    }\n  }\n  return s;\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isDefAndNotNull = function(val) {\n  return val != null;\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == \"array\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  return type == \"array\" || type == \"object\" && typeof val.length == \"number\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == \"function\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == \"function\";\n};\n/**\n * @param {?} val\n * @return {boolean}\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == \"object\" && val != null || type == \"function\";\n};\n/**\n * @param {Object} obj\n * @return {number}\n */\ngoog.getUid = function(obj) {\n  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n/**\n * @param {!Object} obj\n * @return {boolean}\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n/**\n * @param {Object} obj\n */\ngoog.removeUid = function(obj) {\n  if (obj !== null && \"removeAttribute\" in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n/** @private @type {string} */ goog.UID_PROPERTY_ = \"closure_uid_\" + (Math.random() * 1e9 >>> 0);\n/** @private @type {number} */ goog.uidCounter_ = 0;\n/**\n * @param {Object} obj\n * @return {number}\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n/**\n * @param {Object} obj\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n/**\n * @param {*} obj\n * @return {*}\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == \"object\" || type == \"array\") {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == \"array\" ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n  return obj;\n};\n/**\n * @private\n * @param {?function(this:T,...)} fn\n * @param {T} selfObj\n * @param {...*} var_args\n * @return {!Function}\n * @template T\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return (/** @type {!Function} */ (fn.call.apply(fn.bind, arguments)));\n};\n/**\n * @private\n * @param {?function(this:T,...)} fn\n * @param {T} selfObj\n * @param {...*} var_args\n * @return {!Function}\n * @template T\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error;\n  }\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n/**\n * @param {?function(this:T,...)} fn\n * @param {T} selfObj\n * @param {...*} var_args\n * @return {!Function}\n * @template T\n * @suppress {deprecated}\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf(\"native code\") != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n/**\n * @param {Function} fn\n * @param {...*} var_args\n * @return {!Function}\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n/**\n * @param {Object} target\n * @param {Object} source\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n};\n/**\n * @return {number}\n */\ngoog.now = goog.TRUSTED_SITE && Date.now || function() {\n  return +new Date;\n};\n/**\n * @param {string} script\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, \"JavaScript\");\n  } else {\n    if (goog.global.eval) {\n      if (goog.evalWorksForGlobals_ == null) {\n        goog.global.eval(\"var _evalTest_ \\x3d 1;\");\n        if (typeof goog.global[\"_evalTest_\"] != \"undefined\") {\n          try {\n            delete goog.global[\"_evalTest_\"];\n          } catch (ignore) {\n          }\n          goog.evalWorksForGlobals_ = true;\n        } else {\n          goog.evalWorksForGlobals_ = false;\n        }\n      }\n      if (goog.evalWorksForGlobals_) {\n        goog.global.eval(script);\n      } else {\n        /** @type {Document} */ var doc = goog.global.document;\n        var scriptElt = /** @type {!HTMLScriptElement} */ (doc.createElement(\"SCRIPT\"));\n        scriptElt.type = \"text/javascript\";\n        scriptElt.defer = false;\n        scriptElt.appendChild(doc.createTextNode(script));\n        doc.body.appendChild(scriptElt);\n        doc.body.removeChild(scriptElt);\n      }\n    } else {\n      throw Error(\"goog.globalEval not available\");\n    }\n  }\n};\n/** @private @type {?boolean} */ goog.evalWorksForGlobals_ = null;\n/** @private @type {(!Object<string,string>|undefined)} */ goog.cssNameMapping_;\n/** @private @type {(string|undefined)} */ goog.cssNameMappingStyle_;\n/** @type {(function(string):string|undefined)} */ goog.global.CLOSURE_CSS_NAME_MAP_FN;\n/**\n * @param {string} className\n * @param {string=} opt_modifier\n * @return {string}\n */\ngoog.getCssName = function(className, opt_modifier) {\n  if (String(className).charAt(0) == \".\") {\n    throw new Error('className passed in goog.getCssName must not start with \".\".' + \" You passed: \" + className);\n  }\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n  var renameByParts = function(cssName) {\n    var parts = cssName.split(\"-\");\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join(\"-\");\n  };\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == \"BY_WHOLE\" ? getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n  var result = opt_modifier ? className + \"-\" + rename(opt_modifier) : rename(className);\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\n  }\n  return result;\n};\n/**\n * @param {!Object} mapping\n * @param {string=} opt_style\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n/** @type {(!Object<string,string>|undefined)} */ goog.global.CLOSURE_CSS_NAME_MAPPING;\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n/**\n * @param {string} str\n * @param {Object<string,string>=} opt_values\n * @return {string}\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return opt_values != null && key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n/**\n * @param {string} publicPath\n * @param {*} object\n * @param {Object=} opt_objectToExportTo\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n/**\n * @param {Object} object\n * @param {string} publicName\n * @param {*} symbol\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n/**\n * @param {!Function} childCtor\n * @param {!Function} parentCtor\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */ function tempCtor() {\n  }\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor;\n  /** @override */ childCtor.prototype.constructor = childCtor;\n  /**\n   * @param {!Object} me\n   * @param {string} methodName\n   * @param {...*} var_args\n   * @return {*}\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n/**\n * @param {!Object} me\n * @param {*=} opt_methodName\n * @param {...*} var_args\n * @return {*}\n * @suppress {es5Strict}\n * @deprecated goog.base is not strict mode compatible.  Prefer the static \"base\" method added to the constructor by goog.inherits or ES6 classes and the \"super\" keyword.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {\n    throw Error(\"arguments.caller not defined.  goog.base() cannot be used \" + \"with strict mode code. See \" + \"http://www.ecma-international.org/ecma-262/5.1/#sec-C\");\n  }\n  if (caller.superClass_) {\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else {\n      if (foundCaller) {\n        return ctor.prototype[opt_methodName].apply(me, args);\n      }\n    }\n  }\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\"goog.base called from a method of one name \" + \"to a method of a different name\");\n  }\n};\n/**\n * @param {function()} fn\n */\ngoog.scope = function(fn) {\n  if (goog.isInModuleLoader_()) {\n    throw Error(\"goog.scope is not supported within a goog.module.\");\n  }\n  fn.call(goog.global);\n};\nif (!COMPILED) {\n  goog.global[\"COMPILED\"] = COMPILED;\n}\n/**\n * @param {Function} superClass\n * @param {goog.defineClass.ClassDescriptor} def\n * @return {!Function}\n */\ngoog.defineClass = function(superClass, def) {\n  var constructor = def.constructor;\n  var statics = def.statics;\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error(\"cannot instantiate an interface (no constructor defined).\");\n    };\n  }\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n  delete def.constructor;\n  delete def.statics;\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n  return cls;\n};\n/** @typedef {{constructor:(!Function|undefined),statics:(Object|undefined|function(Function):void)}} */ goog.defineClass.ClassDescriptor;\n/** @define {boolean} */ goog.define(\"goog.defineClass.SEAL_CLASS_INSTANCES\", goog.DEBUG);\n/**\n * @private\n * @param {!Function} ctr\n * @param {Function} superClass\n * @return {!Function}\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    return ctr;\n  }\n  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);\n  /**\n   * @this {Object}\n   * @return {?}\n   */\n  var wrappedCtr = function() {\n    var instance = ctr.apply(this, arguments) || this;\n    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n    if (this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function) {\n      Object.seal(instance);\n    }\n    return instance;\n  };\n  return wrappedCtr;\n};\n/**\n * @private\n * @param {Function} ctr\n * @return {boolean}\n */\ngoog.defineClass.isUnsealable_ = function(ctr) {\n  return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];\n};\n/** @private @const @type {!Array<string>} */ goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\"];\n/**\n * @private\n * @param {!Object} target\n * @param {!Object} source\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n/**\n * @param {!Function} ctr\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n/** @private @const @type {string} */ goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = \"goog_defineClass_legacy_unsealable\";\n/**\n * @private\n * @return {!Object<string,boolean>}\n */\ngoog.createRequiresTranspilation_ = function() {\n  var /** !Object<string,boolean> */ requiresTranspilation = {\"es3\":false};\n  var transpilationRequiredForAllLaterModes = false;\n  /**\n   * @param {string} modeName\n   * @param {function():boolean} isSupported\n   */\n  function addNewerLanguageTranspilationCheck(modeName, isSupported) {\n    if (transpilationRequiredForAllLaterModes) {\n      requiresTranspilation[modeName] = true;\n    } else {\n      if (isSupported()) {\n        requiresTranspilation[modeName] = false;\n      } else {\n        requiresTranspilation[modeName] = true;\n        transpilationRequiredForAllLaterModes = true;\n      }\n    }\n  }\n  function/** boolean */ evalCheck(/** string */ code) {\n    try {\n      return !!eval(code);\n    } catch (ignored) {\n      return false;\n    }\n  }\n  var userAgent = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : \"\";\n  addNewerLanguageTranspilationCheck(\"es5\", function() {\n    return evalCheck(\"[1,].length\\x3d\\x3d1\");\n  });\n  addNewerLanguageTranspilationCheck(\"es6\", function() {\n    var re = /Edge\\/(\\d+)(\\.\\d)*/i;\n    var edgeUserAgent = userAgent.match(re);\n    if (edgeUserAgent && Number(edgeUserAgent[1]) < 15) {\n      return false;\n    }\n    var es6fullTest = \"class X{constructor(){if(new.target!\\x3dString)throw 1;this.x\\x3d42}}\" + \"let q\\x3dReflect.construct(X,[],String);if(q.x!\\x3d42||!(q instanceof \" + \"String))throw 1;for(const a of[2,3]){if(a\\x3d\\x3d2)continue;function \" + \"f(z\\x3d{a}){let a\\x3d0;return z.a}{function f(){return 0;}}return f()\" + \"\\x3d\\x3d3}\";\n    return evalCheck('(()\\x3d\\x3e{\"use strict\";' + es6fullTest + \"})()\");\n  });\n  addNewerLanguageTranspilationCheck(\"es6-impl\", function() {\n    return true;\n  });\n  addNewerLanguageTranspilationCheck(\"es7\", function() {\n    return evalCheck(\"2 ** 2 \\x3d\\x3d 4\");\n  });\n  addNewerLanguageTranspilationCheck(\"es8\", function() {\n    return evalCheck(\"async () \\x3d\\x3e 1, true\");\n  });\n  return requiresTranspilation;\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will attempt to load Closure's deps file, unless\n * the global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects\n * to include their own deps file(s) from different locations.\n *\n * Avoid including base.js more than once. This is strictly discouraged and not\n * supported. goog.require(...) won't work properly in that case.\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is `goog.global`.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part] && cur[part] !== Object.prototype[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (goog.global.CLOSURE_UNCOMPILED_DEFINES).nodeType ===\n            undefined &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (\n        goog.global.CLOSURE_DEFINES &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (goog.global.CLOSURE_DEFINES).nodeType === undefined &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production. It can be easily stripped\n * by specifying --define goog.DEBUG=false to the Closure Compiler aka\n * JSCompiler. For example, most toString() methods should be declared inside an\n * \"if (goog.DEBUG)\" conditional because they are generally used for debugging\n * purposes and it is difficult for the JSCompiler to statically determine\n * whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as a compiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he).\n *\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the compiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://goo.gl/PudQ4y\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (goog.isInModuleLoader_()) {\n    throw Error('goog.provide can not be used within a goog.module.');\n  }\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n * @return {void}\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) || !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error(\n        'Module ' + name + ' has been loaded incorrectly. Note, ' +\n        'modules cannot be loaded as normal scripts. They require some kind of ' +\n        'pre-processing step. You\\'re likely trying to load a module via a ' +\n        'script tag or as a part of a concatenated bundle without rewriting the ' +\n        'module. For more info see: ' +\n        'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (name in goog.loadedModules_) {\n      return goog.loadedModules_[name];\n    } else if (!goog.implicitNamespaces_[name]) {\n      var ns = goog.getObjectByName(name);\n      return ns != null ? ns : null;\n    }\n  }\n  return null;\n};\n\n\n/**\n * @private {?{moduleName: (string|undefined), declareLegacyNamespace:boolean}}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error(\n        'goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error(\n        'goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error(\n        'Importing test-only code into non-debug environment' +\n        (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n * Before using goog.forwardDeclare, please read the documentation at\n * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\n * understand the options and tradeoffs when working with forward declarations.\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\n/**\n * Forward declare type information. Used to assign types to goog.global\n * referenced object that would otherwise result in unknown type references\n * and thus block property disambiguation.\n */\ngoog.forwardDeclare('Document');\ngoog.forwardDeclare('HTMLScriptElement');\ngoog.forwardDeclare('XMLHttpRequest');\n\n\nif (!COMPILED) {\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n         goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift();) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating\n *     how the file must be loaded.  The boolean 'true' is equivalent\n *     to {'module': 'goog'} for backwards-compatibility.  Valid properties\n *     and values include {'module': 'goog'} and {'lang': 'es6'}.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_loadFlags) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {\n      opt_loadFlags = opt_loadFlags ? {'module': 'goog'} : {};\n    }\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.loadFlags[path] = opt_loadFlags;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n//\n// User-defined namespaces may need their own deps file. For a reference on\n// creating a deps file, see:\n// Externally: https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work was done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the compiler.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n  // If the object already exists we do not need to do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      }\n    } else if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.writeScripts_(path);\n      } else {\n        var errorMessage = 'goog.require could not find: ' + name;\n        goog.logToConsole_(errorMessage);\n\n        throw Error(errorMessage);\n      }\n    }\n\n    return null;\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to attempt to load Closure's deps file. By default, when uncompiled,\n * deps files will attempt to be loaded.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  // instance_ is immediately set to prevent issues with sealed constructors\n  // such as are encountered when a constructor is returned as the export object\n  // of a goog.module in unoptimized code.\n  ctor.instance_ = undefined;\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\n/**\n * @define {string} How to decide whether to transpile.  Valid values\n * are 'always', 'never', and 'detect'.  The default ('detect') is to\n * use feature detection to determine which language levels need\n * transpilation.\n */\n// NOTE(user): we could expand this to accept a language level to bypass\n// detection: e.g. goog.TRANSPILE == 'es5' would transpile ES6 files but\n// would leave ES3 and ES5 files alone.\ngoog.define('goog.TRANSPILE', 'detect');\n\n\n/**\n * @define {string} Path to the transpiler.  Executing the script at this\n * path (relative to base.js) should define a function $jscomp.transpile.\n */\ngoog.define('goog.TRANSPILER', 'transpile.js');\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   loadFlags: !Object<string, !Object<string, string>>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    loadFlags: {},  // 1 to 1\n\n    nameToPath: {},  // 1 to 1\n\n    requires: {},  // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {},  // Used to keep track of script files we have written.\n\n    deferred: {}  // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    /** @type {Document} */\n    var doc = goog.global.document;\n    return doc != null && 'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.isDef(goog.global.CLOSURE_BASE_PATH) &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        goog.isString(goog.global.CLOSURE_BASE_PATH)) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    /** @type {Document} */\n    var doc = goog.global.document;\n    // If we have a currentScript available, use it exclusively.\n    var currentScript = doc.currentScript;\n    if (currentScript) {\n      var scripts = [currentScript];\n    } else {\n      var scripts = doc.getElementsByTagName('SCRIPT');\n    }\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript =\n        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /**\n   * Whether the browser is IE9 or earlier, which needs special handling\n   * for deferred modules.\n   * @const @private {boolean}\n   */\n  goog.IS_OLD_IE_ =\n      !!(!goog.global.atob && goog.global.document && goog.global.document.all);\n\n\n  /**\n   * Whether IE9 or earlier is waiting on a dependency.  This ensures that\n   * deferred modules that have no non-deferred dependencies actually get\n   * loaded, since if we defer them and then never pull in a non-deferred\n   * script, then `goog.loadQueuedModules_` will never be called.  Instead,\n   * if not waiting on anything we simply don't defer in the first place.\n   * @private {boolean}\n   */\n  goog.oldIeWaiting_ = false;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of a script that needs\n   * pre-processing.\n   * @param {string} src Script source URL.\n   * @param {boolean} isModule Whether this is a goog.module.\n   * @param {boolean} needsTranspile Whether this source needs transpilation.\n   * @private\n   */\n  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExec_(\"' + src + '\", ' + isModule + ', ' +\n        needsTranspile + ');';\n\n    goog.importScript_('', bootstrap);\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' + scriptText +\n          '\\n' +  // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n    goog.oldIeWaiting_ = false;\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};\n    var languageLevel = loadFlags['lang'] || 'es3';\n    if (path && (loadFlags['module'] == 'goog' ||\n                 goog.needsTranspile_(languageLevel))) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * Load a goog.module from the provided URL.  This is not a general purpose\n   * code loader and does not support late loading code, that is it should only\n   * be used during page load. This method exists to support unit tests and\n   * \"debug\" loaders that would otherwise have inserted script tags. Under the\n   * hood this needs to use a synchronous XHR and is not recommeneded for\n   * production code.\n   *\n   * The module's goog.requires must have already been satisified; an exception\n   * will be thrown if this is not the case. This assumption is that no\n   * \"deps.js\" file exists, so there is no way to discover and locate the\n   * module-to-be-loaded's dependencies and no attempt is made to do so.\n   *\n   * There should only be one attempt to load a module.  If\n   * \"goog.loadModuleFromUrl\" is called for an already loaded module, an\n   * exception will be throw.\n   *\n   * @param {string} url The URL from which to attempt to load the goog.module.\n   */\n  goog.loadModuleFromUrl = function(url) {\n    // Because this executes synchronously, we don't need to do any additional\n    // bookkeeping. When \"goog.loadModule\" the namespace will be marked as\n    // having been provided which is sufficient.\n    goog.retrieveAndExec_(url, true, false);\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' +\n        'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    /** @type {Document} */\n    var doc = goog.global.document;\n    var scriptEl =\n        /** @type {HTMLScriptElement} */ (doc.createElement('script'));\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      /** @type {!HTMLDocument} */\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      if (opt_sourceText === undefined) {\n        if (!goog.IS_OLD_IE_) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          goog.oldIeWaiting_ = true;\n          var state = ' onreadystatechange=\\'goog.onScriptLoad_(this, ' +\n              ++goog.lastNonModuleScriptIndex_ + ')\\' ';\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' + src + '\"' + state +\n              '></' +\n              'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            goog.protectScriptTag_(opt_sourceText) + '</' +\n            'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  /**\n   * Rewrites closing script tags in input to avoid ending an enclosing script\n   * tag.\n   *\n   * @param {string} str\n   * @return {string}\n   * @private\n   */\n  goog.protectScriptTag_ = function(str) {\n    return str.replace(/<\\/(SCRIPT)/ig, '\\\\x3c/$1');\n  };\n\n  /**\n   * Determines whether the given language needs to be transpiled.\n   * @param {string} lang\n   * @return {boolean}\n   * @private\n   */\n  goog.needsTranspile_ = function(lang) {\n    if (goog.TRANSPILE == 'always') {\n      return true;\n    } else if (goog.TRANSPILE == 'never') {\n      return false;\n    } else if (!goog.requiresTranspilation_) {\n      goog.requiresTranspilation_ = goog.createRequiresTranspilation_();\n    }\n    if (lang in goog.requiresTranspilation_) {\n      return goog.requiresTranspilation_[lang];\n    } else {\n      throw new Error('Unknown language mode: ' + lang);\n    }\n  };\n\n  /** @private {?Object<string, boolean>} */\n  goog.requiresTranspilation_ = null;\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {?} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @param {string} pathToLoad The path from which to start discovering\n   *     dependencies.\n   * @private\n   */\n  goog.writeScripts_ = function(pathToLoad) {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    visitNode(pathToLoad);\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        var loadFlags = deps.loadFlags[path] || {};\n        var languageLevel = loadFlags['lang'] || 'es3';\n        var needsTranspile = goog.needsTranspile_(languageLevel);\n        if (loadFlags['module'] == 'goog' || needsTranspile) {\n          goog.importProcessedScript_(\n              goog.basePath + path, loadFlags['module'] == 'goog',\n              needsTranspile);\n        } else {\n          goog.importScript_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * @package {?boolean}\n * Visible for testing.\n */\ngoog.hasBadLetScoping = null;\n\n\n/**\n * @return {boolean}\n * @package Visible for testing.\n */\ngoog.useSafari10Workaround = function() {\n  if (goog.hasBadLetScoping == null) {\n    var hasBadLetScoping;\n    try {\n      hasBadLetScoping = !eval(\n          '\"use strict\";' +\n          'let x = 1; function f() { return typeof x; };' +\n          'f() == \"number\";');\n    } catch (e) {\n      // Assume that ES6 syntax isn't supported.\n      hasBadLetScoping = false;\n    }\n    goog.hasBadLetScoping = hasBadLetScoping;\n  }\n  return goog.hasBadLetScoping;\n};\n\n\n/**\n * @param {string} moduleDef\n * @return {string}\n * @package Visible for testing.\n */\ngoog.workaroundSafari10EvalBug = function(moduleDef) {\n  return '(function(){' + moduleDef +\n      '\\n' +  // Terminate any trailing single line comment.\n      ';' +   // Terminate any trailing expression.\n      '})();\\n';\n};\n\n\n/**\n * @param {function(?):?|string} moduleDef The module definition.\n */\ngoog.loadModule = function(moduleDef) {\n  // NOTE: we allow function definitions to be either in the from\n  // of a string to eval (which keeps the original source intact) or\n  // in a eval forbidden environment (CSP) we allow a function definition\n  // which in its body must call {@code goog.module}, and return the exports\n  // of the module.\n  var previousState = goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ = {\n      moduleName: undefined,\n      declareLegacyNamespace: false\n    };\n    var exports;\n    if (goog.isFunction(moduleDef)) {\n      exports = moduleDef.call(undefined, {});\n    } else if (goog.isString(moduleDef)) {\n      if (goog.useSafari10Workaround()) {\n        moduleDef = goog.workaroundSafari10EvalBug(moduleDef);\n      }\n\n      exports = goog.loadModuleFromSource_.call(undefined, moduleDef);\n    } else {\n      throw Error('Invalid module definition');\n    }\n\n    var moduleName = goog.moduleLoaderState_.moduleName;\n    if (!goog.isString(moduleName) || !moduleName) {\n      throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n    }\n\n    // Don't seal legacy namespaces as they may be uses as a parent of\n    // another namespace\n    if (goog.moduleLoaderState_.declareLegacyNamespace) {\n      goog.constructNamespace_(moduleName, exports);\n    } else if (\n        goog.SEAL_MODULE_EXPORTS && Object.seal && typeof exports == 'object' &&\n        exports != null) {\n      Object.seal(exports);\n    }\n\n    goog.loadedModules_[moduleName] = exports;\n  } finally {\n    goog.moduleLoaderState_ = previousState;\n  }\n};\n\n\n/**\n * @private @const\n */\ngoog.loadModuleFromSource_ = /** @type {function(string):?} */ (function() {\n  // NOTE: we avoid declaring parameters or local variables here to avoid\n  // masking globals or leaking values into the module definition.\n  'use strict';\n  var exports = {};\n  eval(arguments[0]);\n  return exports;\n});\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (\n        i && components[i] == '..' && components[i - 1] &&\n        components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Provides a hook for loading a file when using Closure's goog.require() API\n * with goog.modules.  In particular this hook is provided to support Node.js.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_LOAD_FILE_SYNC;\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {?string} File contents, or null if load failed.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    try {\n      /** @type {XMLHttpRequest} */\n      var xhr = new goog.global['XMLHttpRequest']();\n      xhr.open('get', src, false);\n      xhr.send();\n      // NOTE: Successful http: requests have a status of 200, but successful\n      // file: requests may have a status of zero.  Any other status, or a\n      // thrown exception (particularly in case of file: requests) indicates\n      // some sort of error, which we treat as a missing or unavailable file.\n      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;\n    } catch (err) {\n      // No need to rethrow or log, since errors should show up on their own.\n      return null;\n    }\n  }\n};\n\n\n/**\n * Retrieve and execute a script that needs some sort of wrapping.\n * @param {string} src Script source URL.\n * @param {boolean} isModule Whether to load as a module.\n * @param {boolean} needsTranspile Whether to transpile down to ES3.\n * @private\n */\ngoog.retrieveAndExec_ = function(src, isModule, needsTranspile) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript =\n        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n    if (scriptText == null) {\n      throw new Error('Load of \"' + src + '\" failed');\n    }\n\n    if (needsTranspile) {\n      scriptText = goog.transpile_.call(goog.global, scriptText, src);\n    }\n\n    if (isModule) {\n      scriptText = goog.wrapModule_(src, scriptText);\n    } else {\n      scriptText += '\\n//# sourceURL=' + src;\n    }\n    var isOldIE = goog.IS_OLD_IE_;\n    if (isOldIE && goog.oldIeWaiting_) {\n      goog.dependencies_.deferred[originalPath] = scriptText;\n      goog.queuedModules_.push(originalPath);\n    } else {\n      importScript(src, scriptText);\n    }\n  }\n};\n\n\n/**\n * Lazily retrieves the transpiler and applies it to the source.\n * @param {string} code JS code.\n * @param {string} path Path to the code.\n * @return {string} The transpiled code.\n * @private\n */\ngoog.transpile_ = function(code, path) {\n  var jscomp = goog.global['$jscomp'];\n  if (!jscomp) {\n    goog.global['$jscomp'] = jscomp = {};\n  }\n  var transpile = jscomp.transpile;\n  if (!transpile) {\n    var transpilerPath = goog.basePath + goog.TRANSPILER;\n    var transpilerCode = goog.loadFileSync_(transpilerPath);\n    if (transpilerCode) {\n      // This must be executed synchronously, since by the time we know we\n      // need it, we're about to load and write the ES6 code synchronously,\n      // so a normal script-tag load will be too slow.\n      eval(transpilerCode + '\\n//# sourceURL=' + transpilerPath);\n      // Even though the transpiler is optional, if $gwtExport is found, it's\n      // a sign the transpiler was loaded and the $jscomp.transpile *should*\n      // be there.\n      if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp'] &&\n          !goog.global['$gwtExport']['$jscomp']['transpile']) {\n        throw new Error(\n            'The transpiler did not properly export the \"transpile\" ' +\n            'method. $gwtExport: ' + JSON.stringify(goog.global['$gwtExport']));\n      }\n      // transpile.js only exports a single $jscomp function, transpile. We\n      // grab just that and add it to the existing definition of $jscomp which\n      // contains the polyfills.\n      goog.global['$jscomp'].transpile =\n          goog.global['$gwtExport']['$jscomp']['transpile'];\n      jscomp = goog.global['$jscomp'];\n      transpile = jscomp.transpile;\n    }\n  }\n  if (!transpile) {\n    // The transpiler is an optional component.  If it's not available then\n    // replace it with a pass-through function that simply logs.\n    var suffix = ' requires transpilation but no transpiler was found.';\n    transpile = jscomp.transpile = function(code, path) {\n      // TODO(user): figure out some way to get this error to show up\n      // in test results, noting that the failure may occur in many\n      // different ways, including in loadModule() before the test\n      // runner even comes up.\n      goog.logToConsole_(path + suffix);\n      return code;\n    };\n  }\n  // Note: any transpilation errors/warnings will be logged to the console.\n  return transpile(code, path);\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {?} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals typeof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {!Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n               typeof value.splice != 'undefined' &&\n               typeof value.propertyIsEnumerable != 'undefined' &&\n               !value.propertyIsEnumerable('splice')\n\n               )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n           typeof value.call != 'undefined' &&\n               typeof value.propertyIsEnumerable != 'undefined' &&\n               !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if (obj !== null && 'removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like goog.bind(), except that a 'this object' is not required. Useful when\n * the target function is already bound.\n *\n * Usage:\n * var g = goog.partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n             // Unary plus operator converts its operand to a number which in\n             // the case of\n             // a date is done by calling getTime().\n             return +new Date();\n           });\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _evalTest_ = 1;');\n      if (typeof goog.global['_evalTest_'] != 'undefined') {\n        try {\n          delete goog.global['_evalTest_'];\n        } catch (ignore) {\n          // Microsoft edge fails the deletion above in strict mode.\n        }\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      /** @type {Document} */\n      var doc = goog.global.document;\n      var scriptElt =\n          /** @type {!HTMLScriptElement} */ (doc.createElement('SCRIPT'));\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n\n/**\n * A hook for modifying the default behavior goog.getCssName. The function\n * if present, will recieve the standard output of the goog.getCssName as\n * its input.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAP_FN;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x = 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  // String() is used for compatibility with compiled soy where the passed\n  // className can be non-string objects.\n  if (String(className).charAt(0) == '.') {\n    throw new Error(\n        'className passed in goog.getCssName must not start with \".\".' +\n        ' You passed: ' + className);\n  }\n\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename =\n        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  var result =\n      opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);\n\n  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further\n  // processing of the class name.\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\n  }\n\n  return result;\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --process_closure_primitives flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * This function produces a string which should be treated as plain text. Use\n * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to\n * produce SafeHtml.\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] :\n                                                         match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {!Function} childCtor Child class.\n * @param {!Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {}\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n * @deprecated goog.base is not strict mode compatible.  Prefer the static\n *     \"base\" method added to the constructor by goog.inherits\n *     or ES6 classes and the \"super\" keyword.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error(\n        'arguments.caller not defined.  goog.base() cannot be used ' +\n        'with strict mode code. See ' +\n        'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor; ctor;\n       ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  if (goog.isInModuleLoader_()) {\n    throw Error('goog.scope is not supported within a goog.module.');\n  }\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {{\n *   constructor: (!Function|undefined),\n *   statics: (Object|undefined|function(Function):void)\n * }}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by goog.defineClass should\n *     be sealed when possible.\n *\n * When sealing is disabled the constructor function will not be wrapped by\n * goog.defineClass, making it incompatible with ES6 class methods.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    // Do now wrap the constructor when sealing is disabled. Angular code\n    // depends on this for injection to work properly.\n    return ctr;\n  }\n\n  // Compute whether the constructor is sealable at definition time, rather\n  // than when the instance is being constructed.\n  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);\n\n  /**\n   * @this {Object}\n   * @return {?}\n   */\n  var wrappedCtr = function() {\n    // Don't seal an instance of a subclass when it calls the constructor of\n    // its super class as there is most likely still setup to do.\n    var instance = ctr.apply(this, arguments) || this;\n    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n\n    if (this.constructor === wrappedCtr && superclassSealable &&\n        Object.seal instanceof Function) {\n      Object.seal(instance);\n    }\n    return instance;\n  };\n\n  return wrappedCtr;\n};\n\n\n/**\n * @param {Function} ctr The constructor to test.\n * @return {boolean} Whether the constructor has been tagged as unsealable\n *     using goog.tagUnsealableClass.\n * @private\n */\ngoog.defineClass.isUnsealable_ = function(ctr) {\n  return ctr && ctr.prototype &&\n      ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n  'toLocaleString', 'toString', 'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor. As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n\n\n/**\n * Returns a newly created map from language mode string to a boolean\n * indicating whether transpilation should be done for that mode.\n *\n * Guaranteed invariant:\n * For any two modes, l1 and l2 where l2 is a newer mode than l1,\n * `map[l1] == true` implies that `map[l2] == true`.\n * @private\n * @return {!Object<string, boolean>}\n */\ngoog.createRequiresTranspilation_ = function() {\n  var /** !Object<string, boolean> */ requiresTranspilation = {'es3': false};\n  var transpilationRequiredForAllLaterModes = false;\n\n  /**\n   * Adds an entry to requiresTranspliation for the given language mode.\n   *\n   * IMPORTANT: Calls must be made in order from oldest to newest language\n   * mode.\n   * @param {string} modeName\n   * @param {function(): boolean} isSupported Returns true if the JS engine\n   *     supports the given mode.\n   */\n  function addNewerLanguageTranspilationCheck(modeName, isSupported) {\n    if (transpilationRequiredForAllLaterModes) {\n      requiresTranspilation[modeName] = true;\n    } else if (isSupported()) {\n      requiresTranspilation[modeName] = false;\n    } else {\n      requiresTranspilation[modeName] = true;\n      transpilationRequiredForAllLaterModes = true;\n    }\n  }\n\n  /**\n   * Does the given code evaluate without syntax errors and return a truthy\n   * result?\n   */\n  function /** boolean */ evalCheck(/** string */ code) {\n    try {\n      return !!eval(code);\n    } catch (ignored) {\n      return false;\n    }\n  }\n\n  var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?\n      goog.global.navigator.userAgent :\n      '';\n\n  // Identify ES3-only browsers by their incorrect treatment of commas.\n  addNewerLanguageTranspilationCheck('es5', function() {\n    return evalCheck('[1,].length==1');\n  });\n  addNewerLanguageTranspilationCheck('es6', function() {\n    // Edge has a non-deterministic (i.e., not reproducible) bug with ES6:\n    // https://github.com/Microsoft/ChakraCore/issues/1496.\n    var re = /Edge\\/(\\d+)(\\.\\d)*/i;\n    var edgeUserAgent = userAgent.match(re);\n    if (edgeUserAgent && Number(edgeUserAgent[1]) < 15) {\n      return false;\n    }\n    // Test es6: [FF50 (?), Edge 14 (?), Chrome 50]\n    //   (a) default params (specifically shadowing locals),\n    //   (b) destructuring, (c) block-scoped functions,\n    //   (d) for-of (const), (e) new.target/Reflect.construct\n    var es6fullTest =\n        'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}' +\n        'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof ' +\n        'String))throw 1;for(const a of[2,3]){if(a==2)continue;function ' +\n        'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()' +\n        '==3}';\n\n    return evalCheck('(()=>{\"use strict\";' + es6fullTest + '})()');\n  });\n  // TODO(joeltine): Remove es6-impl references for b/31340605.\n  // Consider es6-impl (widely-implemented es6 features) to be supported\n  // whenever es6 is supported. Technically es6-impl is a lower level of\n  // support than es6, but we don't have tests specifically for it.\n  addNewerLanguageTranspilationCheck('es6-impl', function() {\n    return true;\n  });\n  // ** and **= are the only new features in 'es7'\n  addNewerLanguageTranspilationCheck('es7', function() {\n    return evalCheck('2 ** 2 == 4');\n  });\n  // async functions are the only new features in 'es8'\n  addNewerLanguageTranspilationCheck('es8', function() {\n    return evalCheck('async () => 1, true');\n  });\n  return requiresTranspilation;\n};\n","~:compiled-at",1574163695897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.base.js\",\n\"lineCount\":1403,\n\"mappings\":\"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\",\n\"sources\":[\"goog/base.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Bootstrap for the Google JS Library (Closure).\\n *\\n * In uncompiled mode base.js will attempt to load Closure's deps file, unless\\n * the global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects\\n * to include their own deps file(s) from different locations.\\n *\\n * Avoid including base.js more than once. This is strictly discouraged and not\\n * supported. goog.require(...) won't work properly in that case.\\n *\\n * @provideGoog\\n */\\n\\n\\n/**\\n * @define {boolean} Overridden to true by the compiler.\\n */\\nvar COMPILED = false;\\n\\n\\n/**\\n * Base namespace for the Closure library.  Checks to see goog is already\\n * defined in the current scope before assigning to prevent clobbering if\\n * base.js is loaded more than once.\\n *\\n * @const\\n */\\nvar goog = goog || {};\\n\\n\\n/**\\n * Reference to the global context.  In most cases this will be 'window'.\\n */\\ngoog.global = this;\\n\\n\\n/**\\n * A hook for overriding the define values in uncompiled mode.\\n *\\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\\n * {@code goog.define} will use the value instead of the default value.  This\\n * allows flags to be overwritten without compilation (this is normally\\n * accomplished with the compiler's \\\"define\\\" flag).\\n *\\n * Example:\\n * <pre>\\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\\n * </pre>\\n *\\n * @type {Object<string, (string|number|boolean)>|undefined}\\n */\\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\\n\\n\\n/**\\n * A hook for overriding the define values in uncompiled or compiled mode,\\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\\n *\\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\\n * string literals or the compiler will emit an error.\\n *\\n * While any @define value may be set, only those set with goog.define will be\\n * effective for uncompiled code.\\n *\\n * Example:\\n * <pre>\\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\\n * </pre>\\n *\\n * @type {Object<string, (string|number|boolean)>|undefined}\\n */\\ngoog.global.CLOSURE_DEFINES;\\n\\n\\n/**\\n * Returns true if the specified value is not undefined.\\n *\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is defined.\\n */\\ngoog.isDef = function(val) {\\n  // void 0 always evaluates to undefined and hence we do not need to depend on\\n  // the definition of the global variable named 'undefined'.\\n  return val !== void 0;\\n};\\n\\n/**\\n * Returns true if the specified value is a string.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is a string.\\n */\\ngoog.isString = function(val) {\\n  return typeof val == 'string';\\n};\\n\\n\\n/**\\n * Returns true if the specified value is a boolean.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is boolean.\\n */\\ngoog.isBoolean = function(val) {\\n  return typeof val == 'boolean';\\n};\\n\\n\\n/**\\n * Returns true if the specified value is a number.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is a number.\\n */\\ngoog.isNumber = function(val) {\\n  return typeof val == 'number';\\n};\\n\\n\\n/**\\n * Builds an object structure for the provided namespace path, ensuring that\\n * names that already exist are not overwritten. For example:\\n * \\\"a.b.c\\\" -> a = {};a.b={};a.b.c={};\\n * Used by goog.provide and goog.exportSymbol.\\n * @param {string} name name of the object that this file defines.\\n * @param {*=} opt_object the object to expose at the end of the path.\\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\\n *     is `goog.global`.\\n * @private\\n */\\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\\n  var parts = name.split('.');\\n  var cur = opt_objectToExportTo || goog.global;\\n\\n  // Internet Explorer exhibits strange behavior when throwing errors from\\n  // methods externed in this manner.  See the testExportSymbolExceptions in\\n  // base_test.html for an example.\\n  if (!(parts[0] in cur) && cur.execScript) {\\n    cur.execScript('var ' + parts[0]);\\n  }\\n\\n  for (var part; parts.length && (part = parts.shift());) {\\n    if (!parts.length && goog.isDef(opt_object)) {\\n      // last part and we have an object; use it\\n      cur[part] = opt_object;\\n    } else if (cur[part] && cur[part] !== Object.prototype[part]) {\\n      cur = cur[part];\\n    } else {\\n      cur = cur[part] = {};\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Defines a named value. In uncompiled mode, the value is retrieved from\\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\\n * has the property specified, and otherwise used the defined defaultValue.\\n * When compiled the default can be overridden using the compiler\\n * options or the value set in the CLOSURE_DEFINES object.\\n *\\n * @param {string} name The distinguished name to provide.\\n * @param {string|number|boolean} defaultValue\\n */\\ngoog.define = function(name, defaultValue) {\\n  var value = defaultValue;\\n  if (!COMPILED) {\\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\\n        // Anti DOM-clobbering runtime check (b/37736576).\\n        /** @type {?} */ (goog.global.CLOSURE_UNCOMPILED_DEFINES).nodeType ===\\n            undefined &&\\n        Object.prototype.hasOwnProperty.call(\\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\\n    } else if (\\n        goog.global.CLOSURE_DEFINES &&\\n        // Anti DOM-clobbering runtime check (b/37736576).\\n        /** @type {?} */ (goog.global.CLOSURE_DEFINES).nodeType === undefined &&\\n        Object.prototype.hasOwnProperty.call(\\n            goog.global.CLOSURE_DEFINES, name)) {\\n      value = goog.global.CLOSURE_DEFINES[name];\\n    }\\n  }\\n  goog.exportPath_(name, value);\\n};\\n\\n\\n/**\\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\\n * that should not be included in a production. It can be easily stripped\\n * by specifying --define goog.DEBUG=false to the Closure Compiler aka\\n * JSCompiler. For example, most toString() methods should be declared inside an\\n * \\\"if (goog.DEBUG)\\\" conditional because they are generally used for debugging\\n * purposes and it is difficult for the JSCompiler to statically determine\\n * whether they are used.\\n */\\ngoog.define('goog.DEBUG', true);\\n\\n\\n/**\\n * @define {string} LOCALE defines the locale being used for compilation. It is\\n * used to select locale specific data to be compiled in js binary. BUILD rule\\n * can specify this value by \\\"--define goog.LOCALE=<locale_name>\\\" as a compiler\\n * option.\\n *\\n * Take into account that the locale code format is important. You should use\\n * the canonical Unicode format with hyphen as a delimiter. Language must be\\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\\n *\\n * See more info about locale codes here:\\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\\n *\\n * For language codes you should use values defined by ISO 693-1. See it here\\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\\n * be used instead of the new code (he).\\n *\\n */\\ngoog.define('goog.LOCALE', 'en');  // default to en\\n\\n\\n/**\\n * @define {boolean} Whether this code is running on trusted sites.\\n *\\n * On untrusted sites, several native functions can be defined or overridden by\\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\\n * to false forces closure to use its own implementations when possible.\\n *\\n * If your JavaScript can be loaded by a third party site and you are wary about\\n * relying on non-standard implementations, specify\\n * \\\"--define goog.TRUSTED_SITE=false\\\" to the compiler.\\n */\\ngoog.define('goog.TRUSTED_SITE', true);\\n\\n\\n/**\\n * @define {boolean} Whether a project is expected to be running in strict mode.\\n *\\n * This define can be used to trigger alternate implementations compatible with\\n * running in EcmaScript Strict mode or warn about unavailable functionality.\\n * @see https://goo.gl/PudQ4y\\n *\\n */\\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\\n\\n\\n/**\\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\\n *     be disallowed in the compilation unit.\\n */\\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\\n\\n\\n/**\\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\\n */\\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\\n\\n\\n/**\\n * Defines a namespace in Closure.\\n *\\n * A namespace may only be defined once in a codebase. It may be defined using\\n * goog.provide() or goog.module().\\n *\\n * The presence of one or more goog.provide() calls in a file indicates\\n * that the file defines the given objects/namespaces.\\n * Provided symbols must not be null or undefined.\\n *\\n * In addition, goog.provide() creates the object stubs for a namespace\\n * (for example, goog.provide(\\\"goog.foo.bar\\\") will create the object\\n * goog.foo.bar if it does not already exist).\\n *\\n * Build tools also scan for provide/require/module statements\\n * to discern dependencies, build dependency files (see deps.js), etc.\\n *\\n * @see goog.require\\n * @see goog.module\\n * @param {string} name Namespace provided by this file in the form\\n *     \\\"goog.package.part\\\".\\n */\\ngoog.provide = function(name) {\\n  if (goog.isInModuleLoader_()) {\\n    throw Error('goog.provide can not be used within a goog.module.');\\n  }\\n  if (!COMPILED) {\\n    // Ensure that the same namespace isn't provided twice.\\n    // A goog.module/goog.provide maps a goog.require to a specific file\\n    if (goog.isProvided_(name)) {\\n      throw Error('Namespace \\\"' + name + '\\\" already declared.');\\n    }\\n  }\\n\\n  goog.constructNamespace_(name);\\n};\\n\\n\\n/**\\n * @param {string} name Namespace provided by this file in the form\\n *     \\\"goog.package.part\\\".\\n * @param {Object=} opt_obj The object to embed in the namespace.\\n * @private\\n */\\ngoog.constructNamespace_ = function(name, opt_obj) {\\n  if (!COMPILED) {\\n    delete goog.implicitNamespaces_[name];\\n\\n    var namespace = name;\\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\\n      if (goog.getObjectByName(namespace)) {\\n        break;\\n      }\\n      goog.implicitNamespaces_[namespace] = true;\\n    }\\n  }\\n\\n  goog.exportPath_(name, opt_obj);\\n};\\n\\n\\n/**\\n * Module identifier validation regexp.\\n * Note: This is a conservative check, it is very possible to be more lenient,\\n *   the primary exclusion here is \\\"/\\\" and \\\"\\\\\\\" and a leading \\\".\\\", these\\n *   restrictions are intended to leave the door open for using goog.require\\n *   with relative file paths rather than module identifiers.\\n * @private\\n */\\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\\n\\n\\n/**\\n * Defines a module in Closure.\\n *\\n * Marks that this file must be loaded as a module and claims the namespace.\\n *\\n * A namespace may only be defined once in a codebase. It may be defined using\\n * goog.provide() or goog.module().\\n *\\n * goog.module() has three requirements:\\n * - goog.module may not be used in the same file as goog.provide.\\n * - goog.module must be the first statement in the file.\\n * - only one goog.module is allowed per file.\\n *\\n * When a goog.module annotated file is loaded, it is enclosed in\\n * a strict function closure. This means that:\\n * - any variables declared in a goog.module file are private to the file\\n * (not global), though the compiler is expected to inline the module.\\n * - The code must obey all the rules of \\\"strict\\\" JavaScript.\\n * - the file will be marked as \\\"use strict\\\"\\n *\\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\\n * itself. If declared symbols are desired, use\\n * goog.module.declareLegacyNamespace().\\n *\\n *\\n * See the public goog.module proposal: http://goo.gl/Va1hin\\n *\\n * @param {string} name Namespace provided by this file in the form\\n *     \\\"goog.package.part\\\", is expected but not required.\\n * @return {void}\\n */\\ngoog.module = function(name) {\\n  if (!goog.isString(name) || !name ||\\n      name.search(goog.VALID_MODULE_RE_) == -1) {\\n    throw Error('Invalid module identifier');\\n  }\\n  if (!goog.isInModuleLoader_()) {\\n    throw Error(\\n        'Module ' + name + ' has been loaded incorrectly. Note, ' +\\n        'modules cannot be loaded as normal scripts. They require some kind of ' +\\n        'pre-processing step. You\\\\'re likely trying to load a module via a ' +\\n        'script tag or as a part of a concatenated bundle without rewriting the ' +\\n        'module. For more info see: ' +\\n        'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');\\n  }\\n  if (goog.moduleLoaderState_.moduleName) {\\n    throw Error('goog.module may only be called once per module.');\\n  }\\n\\n  // Store the module name for the loader.\\n  goog.moduleLoaderState_.moduleName = name;\\n  if (!COMPILED) {\\n    // Ensure that the same namespace isn't provided twice.\\n    // A goog.module/goog.provide maps a goog.require to a specific file\\n    if (goog.isProvided_(name)) {\\n      throw Error('Namespace \\\"' + name + '\\\" already declared.');\\n    }\\n    delete goog.implicitNamespaces_[name];\\n  }\\n};\\n\\n\\n/**\\n * @param {string} name The module identifier.\\n * @return {?} The module exports for an already loaded module or null.\\n *\\n * Note: This is not an alternative to goog.require, it does not\\n * indicate a hard dependency, instead it is used to indicate\\n * an optional dependency or to access the exports of a module\\n * that has already been loaded.\\n * @suppress {missingProvide}\\n */\\ngoog.module.get = function(name) {\\n  return goog.module.getInternal_(name);\\n};\\n\\n\\n/**\\n * @param {string} name The module identifier.\\n * @return {?} The module exports for an already loaded module or null.\\n * @private\\n */\\ngoog.module.getInternal_ = function(name) {\\n  if (!COMPILED) {\\n    if (name in goog.loadedModules_) {\\n      return goog.loadedModules_[name];\\n    } else if (!goog.implicitNamespaces_[name]) {\\n      var ns = goog.getObjectByName(name);\\n      return ns != null ? ns : null;\\n    }\\n  }\\n  return null;\\n};\\n\\n\\n/**\\n * @private {?{moduleName: (string|undefined), declareLegacyNamespace:boolean}}\\n */\\ngoog.moduleLoaderState_ = null;\\n\\n\\n/**\\n * @private\\n * @return {boolean} Whether a goog.module is currently being initialized.\\n */\\ngoog.isInModuleLoader_ = function() {\\n  return goog.moduleLoaderState_ != null;\\n};\\n\\n\\n/**\\n * Provide the module's exports as a globally accessible object under the\\n * module's declared name.  This is intended to ease migration to goog.module\\n * for files that have existing usages.\\n * @suppress {missingProvide}\\n */\\ngoog.module.declareLegacyNamespace = function() {\\n  if (!COMPILED && !goog.isInModuleLoader_()) {\\n    throw new Error(\\n        'goog.module.declareLegacyNamespace must be called from ' +\\n        'within a goog.module');\\n  }\\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\\n    throw Error(\\n        'goog.module must be called prior to ' +\\n        'goog.module.declareLegacyNamespace.');\\n  }\\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\\n};\\n\\n\\n/**\\n * Marks that the current file should only be used for testing, and never for\\n * live code in production.\\n *\\n * In the case of unit tests, the message may optionally be an exact namespace\\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\\n * provide (if not explicitly defined in the code).\\n *\\n * @param {string=} opt_message Optional message to add to the error that's\\n *     raised when used in production code.\\n */\\ngoog.setTestOnly = function(opt_message) {\\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\\n    opt_message = opt_message || '';\\n    throw Error(\\n        'Importing test-only code into non-debug environment' +\\n        (opt_message ? ': ' + opt_message : '.'));\\n  }\\n};\\n\\n\\n/**\\n * Forward declares a symbol. This is an indication to the compiler that the\\n * symbol may be used in the source yet is not required and may not be provided\\n * in compilation.\\n *\\n * The most common usage of forward declaration is code that takes a type as a\\n * function parameter but does not need to require it. By forward declaring\\n * instead of requiring, no hard dependency is made, and (if not required\\n * elsewhere) the namespace may never be required and thus, not be pulled\\n * into the JavaScript binary. If it is required elsewhere, it will be type\\n * checked as normal.\\n *\\n * Before using goog.forwardDeclare, please read the documentation at\\n * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\\n * understand the options and tradeoffs when working with forward declarations.\\n *\\n * @param {string} name The namespace to forward declare in the form of\\n *     \\\"goog.package.part\\\".\\n */\\ngoog.forwardDeclare = function(name) {};\\n\\n\\n/**\\n * Forward declare type information. Used to assign types to goog.global\\n * referenced object that would otherwise result in unknown type references\\n * and thus block property disambiguation.\\n */\\ngoog.forwardDeclare('Document');\\ngoog.forwardDeclare('HTMLScriptElement');\\ngoog.forwardDeclare('XMLHttpRequest');\\n\\n\\nif (!COMPILED) {\\n  /**\\n   * Check if the given name has been goog.provided. This will return false for\\n   * names that are available only as implicit namespaces.\\n   * @param {string} name name of the object to look for.\\n   * @return {boolean} Whether the name has been provided.\\n   * @private\\n   */\\n  goog.isProvided_ = function(name) {\\n    return (name in goog.loadedModules_) ||\\n        (!goog.implicitNamespaces_[name] &&\\n         goog.isDefAndNotNull(goog.getObjectByName(name)));\\n  };\\n\\n  /**\\n   * Namespaces implicitly defined by goog.provide. For example,\\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\\n   * 'goog.events' must be namespaces.\\n   *\\n   * @type {!Object<string, (boolean|undefined)>}\\n   * @private\\n   */\\n  goog.implicitNamespaces_ = {'goog.module': true};\\n\\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\\n  // here and because the existing module package has not been moved yet out of\\n  // the goog.module namespace. This satisifies both the debug loader and\\n  // ahead-of-time dependency management.\\n}\\n\\n\\n/**\\n * Returns an object based on its fully qualified external name.  The object\\n * is not found if null or undefined.  If you are using a compilation pass that\\n * renames property names beware that using this function will not find renamed\\n * properties.\\n *\\n * @param {string} name The fully qualified name.\\n * @param {Object=} opt_obj The object within which to look; default is\\n *     |goog.global|.\\n * @return {?} The value (object or primitive) or, if not found, null.\\n */\\ngoog.getObjectByName = function(name, opt_obj) {\\n  var parts = name.split('.');\\n  var cur = opt_obj || goog.global;\\n  for (var part; part = parts.shift();) {\\n    if (goog.isDefAndNotNull(cur[part])) {\\n      cur = cur[part];\\n    } else {\\n      return null;\\n    }\\n  }\\n  return cur;\\n};\\n\\n\\n/**\\n * Globalizes a whole namespace, such as goog or goog.lang.\\n *\\n * @param {!Object} obj The namespace to globalize.\\n * @param {Object=} opt_global The object to add the properties to.\\n * @deprecated Properties may be explicitly exported to the global scope, but\\n *     this should no longer be done in bulk.\\n */\\ngoog.globalize = function(obj, opt_global) {\\n  var global = opt_global || goog.global;\\n  for (var x in obj) {\\n    global[x] = obj[x];\\n  }\\n};\\n\\n\\n/**\\n * Adds a dependency from a file to the files it requires.\\n * @param {string} relPath The path to the js file.\\n * @param {!Array<string>} provides An array of strings with\\n *     the names of the objects this file provides.\\n * @param {!Array<string>} requires An array of strings with\\n *     the names of the objects this file requires.\\n * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating\\n *     how the file must be loaded.  The boolean 'true' is equivalent\\n *     to {'module': 'goog'} for backwards-compatibility.  Valid properties\\n *     and values include {'module': 'goog'} and {'lang': 'es6'}.\\n */\\ngoog.addDependency = function(relPath, provides, requires, opt_loadFlags) {\\n  if (goog.DEPENDENCIES_ENABLED) {\\n    var provide, require;\\n    var path = relPath.replace(/\\\\\\\\/g, '/');\\n    var deps = goog.dependencies_;\\n    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {\\n      opt_loadFlags = opt_loadFlags ? {'module': 'goog'} : {};\\n    }\\n    for (var i = 0; provide = provides[i]; i++) {\\n      deps.nameToPath[provide] = path;\\n      deps.loadFlags[path] = opt_loadFlags;\\n    }\\n    for (var j = 0; require = requires[j]; j++) {\\n      if (!(path in deps.requires)) {\\n        deps.requires[path] = {};\\n      }\\n      deps.requires[path][require] = true;\\n    }\\n  }\\n};\\n\\n\\n\\n\\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\\n// to do \\\"debug-mode\\\" development.  The dependency system can sometimes be\\n// confusing, as can the debug DOM loader's asynchronous nature.\\n//\\n// With the DOM loader, a call to goog.require() is not blocking -- the script\\n// will not load until some point after the current script.  If a namespace is\\n// needed at runtime, it needs to be defined in a previous script, or loaded via\\n// require() with its registered dependencies.\\n//\\n// User-defined namespaces may need their own deps file. For a reference on\\n// creating a deps file, see:\\n// Externally: https://developers.google.com/closure/library/docs/depswriter\\n//\\n// Because of legacy clients, the DOM loader can't be easily removed from\\n// base.js.  Work was done to make it disableable or replaceable for\\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\\n// for example). See bootstrap/ for more information.\\n\\n\\n/**\\n * @define {boolean} Whether to enable the debug loader.\\n *\\n * If enabled, a call to goog.require() will attempt to load the namespace by\\n * appending a script tag to the DOM (if the namespace has been registered).\\n *\\n * If disabled, goog.require() will simply assert that the namespace has been\\n * provided (and depend on the fact that some outside tool correctly ordered\\n * the script).\\n */\\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\\n\\n\\n/**\\n * @param {string} msg\\n * @private\\n */\\ngoog.logToConsole_ = function(msg) {\\n  if (goog.global.console) {\\n    goog.global.console['error'](msg);\\n  }\\n};\\n\\n\\n/**\\n * Implements a system for the dynamic resolution of dependencies that works in\\n * parallel with the BUILD system. Note that all calls to goog.require will be\\n * stripped by the compiler.\\n * @see goog.provide\\n * @param {string} name Namespace to include (as was given in goog.provide()) in\\n *     the form \\\"goog.package.part\\\".\\n * @return {?} If called within a goog.module file, the associated namespace or\\n *     module otherwise null.\\n */\\ngoog.require = function(name) {\\n  // If the object already exists we do not need to do anything.\\n  if (!COMPILED) {\\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\\n      goog.maybeProcessDeferredDep_(name);\\n    }\\n\\n    if (goog.isProvided_(name)) {\\n      if (goog.isInModuleLoader_()) {\\n        return goog.module.getInternal_(name);\\n      }\\n    } else if (goog.ENABLE_DEBUG_LOADER) {\\n      var path = goog.getPathFromDeps_(name);\\n      if (path) {\\n        goog.writeScripts_(path);\\n      } else {\\n        var errorMessage = 'goog.require could not find: ' + name;\\n        goog.logToConsole_(errorMessage);\\n\\n        throw Error(errorMessage);\\n      }\\n    }\\n\\n    return null;\\n  }\\n};\\n\\n\\n/**\\n * Path for included scripts.\\n * @type {string}\\n */\\ngoog.basePath = '';\\n\\n\\n/**\\n * A hook for overriding the base path.\\n * @type {string|undefined}\\n */\\ngoog.global.CLOSURE_BASE_PATH;\\n\\n\\n/**\\n * Whether to attempt to load Closure's deps file. By default, when uncompiled,\\n * deps files will attempt to be loaded.\\n * @type {boolean|undefined}\\n */\\ngoog.global.CLOSURE_NO_DEPS;\\n\\n\\n/**\\n * A function to import a single script. This is meant to be overridden when\\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\\n * in the global scope so that it can be set before base.js is loaded, which\\n * allows deps.js to be imported properly.\\n *\\n * The function is passed the script source, which is a relative URI. It should\\n * return true if the script was imported, false otherwise.\\n * @type {(function(string): boolean)|undefined}\\n */\\ngoog.global.CLOSURE_IMPORT_SCRIPT;\\n\\n\\n/**\\n * Null function used for default values of callbacks, etc.\\n * @return {void} Nothing.\\n */\\ngoog.nullFunction = function() {};\\n\\n\\n/**\\n * When defining a class Foo with an abstract method bar(), you can do:\\n * Foo.prototype.bar = goog.abstractMethod\\n *\\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\\n * when bar() is invoked.\\n *\\n * @type {!Function}\\n * @throws {Error} when invoked to indicate the method should be overridden.\\n */\\ngoog.abstractMethod = function() {\\n  throw Error('unimplemented abstract method');\\n};\\n\\n\\n/**\\n * Adds a {@code getInstance} static method that always returns the same\\n * instance object.\\n * @param {!Function} ctor The constructor for the class to add the static\\n *     method to.\\n */\\ngoog.addSingletonGetter = function(ctor) {\\n  // instance_ is immediately set to prevent issues with sealed constructors\\n  // such as are encountered when a constructor is returned as the export object\\n  // of a goog.module in unoptimized code.\\n  ctor.instance_ = undefined;\\n  ctor.getInstance = function() {\\n    if (ctor.instance_) {\\n      return ctor.instance_;\\n    }\\n    if (goog.DEBUG) {\\n      // NOTE: JSCompiler can't optimize away Array#push.\\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\\n    }\\n    return ctor.instance_ = new ctor;\\n  };\\n};\\n\\n\\n/**\\n * All singleton classes that have been instantiated, for testing. Don't read\\n * it directly, use the {@code goog.testing.singleton} module. The compiler\\n * removes this variable if unused.\\n * @type {!Array<!Function>}\\n * @private\\n */\\ngoog.instantiatedSingletons_ = [];\\n\\n\\n/**\\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\\n * the debug loader.  This provides a better debugging experience as the\\n * source is unmodified and can be edited using Chrome Workspaces or similar.\\n * However in some environments the use of {@code eval} is banned\\n * so we provide an alternative.\\n */\\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\\n\\n\\n/**\\n * @define {boolean} Whether the exports of goog.modules should be sealed when\\n * possible.\\n */\\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\\n\\n\\n/**\\n * The registry of initialized modules:\\n * the module identifier to module exports map.\\n * @private @const {!Object<string, ?>}\\n */\\ngoog.loadedModules_ = {};\\n\\n\\n/**\\n * True if goog.dependencies_ is available.\\n * @const {boolean}\\n */\\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\\n\\n\\n/**\\n * @define {string} How to decide whether to transpile.  Valid values\\n * are 'always', 'never', and 'detect'.  The default ('detect') is to\\n * use feature detection to determine which language levels need\\n * transpilation.\\n */\\n// NOTE(user): we could expand this to accept a language level to bypass\\n// detection: e.g. goog.TRANSPILE == 'es5' would transpile ES6 files but\\n// would leave ES3 and ES5 files alone.\\ngoog.define('goog.TRANSPILE', 'detect');\\n\\n\\n/**\\n * @define {string} Path to the transpiler.  Executing the script at this\\n * path (relative to base.js) should define a function $jscomp.transpile.\\n */\\ngoog.define('goog.TRANSPILER', 'transpile.js');\\n\\n\\nif (goog.DEPENDENCIES_ENABLED) {\\n  /**\\n   * This object is used to keep track of dependencies and other data that is\\n   * used for loading scripts.\\n   * @private\\n   * @type {{\\n   *   loadFlags: !Object<string, !Object<string, string>>,\\n   *   nameToPath: !Object<string, string>,\\n   *   requires: !Object<string, !Object<string, boolean>>,\\n   *   visited: !Object<string, boolean>,\\n   *   written: !Object<string, boolean>,\\n   *   deferred: !Object<string, string>\\n   * }}\\n   */\\n  goog.dependencies_ = {\\n    loadFlags: {},  // 1 to 1\\n\\n    nameToPath: {},  // 1 to 1\\n\\n    requires: {},  // 1 to many\\n\\n    // Used when resolving dependencies to prevent us from visiting file twice.\\n    visited: {},\\n\\n    written: {},  // Used to keep track of script files we have written.\\n\\n    deferred: {}  // Used to track deferred module evaluations in old IEs\\n  };\\n\\n\\n  /**\\n   * Tries to detect whether is in the context of an HTML document.\\n   * @return {boolean} True if it looks like HTML document.\\n   * @private\\n   */\\n  goog.inHtmlDocument_ = function() {\\n    /** @type {Document} */\\n    var doc = goog.global.document;\\n    return doc != null && 'write' in doc;  // XULDocument misses write.\\n  };\\n\\n\\n  /**\\n   * Tries to detect the base path of base.js script that bootstraps Closure.\\n   * @private\\n   */\\n  goog.findBasePath_ = function() {\\n    if (goog.isDef(goog.global.CLOSURE_BASE_PATH) &&\\n        // Anti DOM-clobbering runtime check (b/37736576).\\n        goog.isString(goog.global.CLOSURE_BASE_PATH)) {\\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\\n      return;\\n    } else if (!goog.inHtmlDocument_()) {\\n      return;\\n    }\\n    /** @type {Document} */\\n    var doc = goog.global.document;\\n    // If we have a currentScript available, use it exclusively.\\n    var currentScript = doc.currentScript;\\n    if (currentScript) {\\n      var scripts = [currentScript];\\n    } else {\\n      var scripts = doc.getElementsByTagName('SCRIPT');\\n    }\\n    // Search backwards since the current script is in almost all cases the one\\n    // that has base.js.\\n    for (var i = scripts.length - 1; i >= 0; --i) {\\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\\n      var src = script.src;\\n      var qmark = src.lastIndexOf('?');\\n      var l = qmark == -1 ? src.length : qmark;\\n      if (src.substr(l - 7, 7) == 'base.js') {\\n        goog.basePath = src.substr(0, l - 7);\\n        return;\\n      }\\n    }\\n  };\\n\\n\\n  /**\\n   * Imports a script if, and only if, that script hasn't already been imported.\\n   * (Must be called at execution time)\\n   * @param {string} src Script source.\\n   * @param {string=} opt_sourceText The optionally source text to evaluate\\n   * @private\\n   */\\n  goog.importScript_ = function(src, opt_sourceText) {\\n    var importScript =\\n        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\\n    if (importScript(src, opt_sourceText)) {\\n      goog.dependencies_.written[src] = true;\\n    }\\n  };\\n\\n\\n  /**\\n   * Whether the browser is IE9 or earlier, which needs special handling\\n   * for deferred modules.\\n   * @const @private {boolean}\\n   */\\n  goog.IS_OLD_IE_ =\\n      !!(!goog.global.atob && goog.global.document && goog.global.document.all);\\n\\n\\n  /**\\n   * Whether IE9 or earlier is waiting on a dependency.  This ensures that\\n   * deferred modules that have no non-deferred dependencies actually get\\n   * loaded, since if we defer them and then never pull in a non-deferred\\n   * script, then `goog.loadQueuedModules_` will never be called.  Instead,\\n   * if not waiting on anything we simply don't defer in the first place.\\n   * @private {boolean}\\n   */\\n  goog.oldIeWaiting_ = false;\\n\\n\\n  /**\\n   * Given a URL initiate retrieval and execution of a script that needs\\n   * pre-processing.\\n   * @param {string} src Script source URL.\\n   * @param {boolean} isModule Whether this is a goog.module.\\n   * @param {boolean} needsTranspile Whether this source needs transpilation.\\n   * @private\\n   */\\n  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {\\n    // In an attempt to keep browsers from timing out loading scripts using\\n    // synchronous XHRs, put each load in its own script block.\\n    var bootstrap = 'goog.retrieveAndExec_(\\\"' + src + '\\\", ' + isModule + ', ' +\\n        needsTranspile + ');';\\n\\n    goog.importScript_('', bootstrap);\\n  };\\n\\n\\n  /** @private {!Array<string>} */\\n  goog.queuedModules_ = [];\\n\\n\\n  /**\\n   * Return an appropriate module text. Suitable to insert into\\n   * a script tag (that is unescaped).\\n   * @param {string} srcUrl\\n   * @param {string} scriptText\\n   * @return {string}\\n   * @private\\n   */\\n  goog.wrapModule_ = function(srcUrl, scriptText) {\\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\\n      return '' +\\n          'goog.loadModule(function(exports) {' +\\n          '\\\"use strict\\\";' + scriptText +\\n          '\\\\n' +  // terminate any trailing single line comment.\\n          ';return exports' +\\n          '});' +\\n          '\\\\n//# sourceURL=' + srcUrl + '\\\\n';\\n    } else {\\n      return '' +\\n          'goog.loadModule(' +\\n          goog.global.JSON.stringify(\\n              scriptText + '\\\\n//# sourceURL=' + srcUrl + '\\\\n') +\\n          ');';\\n    }\\n  };\\n\\n  // On IE9 and earlier, it is necessary to handle\\n  // deferred module loads. In later browsers, the\\n  // code to be evaluated is simply inserted as a script\\n  // block in the correct order. To eval deferred\\n  // code at the right time, we piggy back on goog.require to call\\n  // goog.maybeProcessDeferredDep_.\\n  //\\n  // The goog.requires are used both to bootstrap\\n  // the loading process (when no deps are available) and\\n  // declare that they should be available.\\n  //\\n  // Here we eval the sources, if all the deps are available\\n  // either already eval'd or goog.require'd.  This will\\n  // be the case when all the dependencies have already\\n  // been loaded, and the dependent module is loaded.\\n  //\\n  // But this alone isn't sufficient because it is also\\n  // necessary to handle the case where there is no root\\n  // that is not deferred.  For that there we register for an event\\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\\n  // evaluations.\\n\\n  /**\\n   * Handle any remaining deferred goog.module evals.\\n   * @private\\n   */\\n  goog.loadQueuedModules_ = function() {\\n    var count = goog.queuedModules_.length;\\n    if (count > 0) {\\n      var queue = goog.queuedModules_;\\n      goog.queuedModules_ = [];\\n      for (var i = 0; i < count; i++) {\\n        var path = queue[i];\\n        goog.maybeProcessDeferredPath_(path);\\n      }\\n    }\\n    goog.oldIeWaiting_ = false;\\n  };\\n\\n\\n  /**\\n   * Eval the named module if its dependencies are\\n   * available.\\n   * @param {string} name The module to load.\\n   * @private\\n   */\\n  goog.maybeProcessDeferredDep_ = function(name) {\\n    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {\\n      var path = goog.getPathFromDeps_(name);\\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\\n    }\\n  };\\n\\n  /**\\n   * @param {string} name The module to check.\\n   * @return {boolean} Whether the name represents a\\n   *     module whose evaluation has been deferred.\\n   * @private\\n   */\\n  goog.isDeferredModule_ = function(name) {\\n    var path = goog.getPathFromDeps_(name);\\n    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};\\n    var languageLevel = loadFlags['lang'] || 'es3';\\n    if (path && (loadFlags['module'] == 'goog' ||\\n                 goog.needsTranspile_(languageLevel))) {\\n      var abspath = goog.basePath + path;\\n      return (abspath) in goog.dependencies_.deferred;\\n    }\\n    return false;\\n  };\\n\\n  /**\\n   * @param {string} name The module to check.\\n   * @return {boolean} Whether the name represents a\\n   *     module whose declared dependencies have all been loaded\\n   *     (eval'd or a deferred module load)\\n   * @private\\n   */\\n  goog.allDepsAreAvailable_ = function(name) {\\n    var path = goog.getPathFromDeps_(name);\\n    if (path && (path in goog.dependencies_.requires)) {\\n      for (var requireName in goog.dependencies_.requires[path]) {\\n        if (!goog.isProvided_(requireName) &&\\n            !goog.isDeferredModule_(requireName)) {\\n          return false;\\n        }\\n      }\\n    }\\n    return true;\\n  };\\n\\n\\n  /**\\n   * @param {string} abspath\\n   * @private\\n   */\\n  goog.maybeProcessDeferredPath_ = function(abspath) {\\n    if (abspath in goog.dependencies_.deferred) {\\n      var src = goog.dependencies_.deferred[abspath];\\n      delete goog.dependencies_.deferred[abspath];\\n      goog.globalEval(src);\\n    }\\n  };\\n\\n\\n  /**\\n   * Load a goog.module from the provided URL.  This is not a general purpose\\n   * code loader and does not support late loading code, that is it should only\\n   * be used during page load. This method exists to support unit tests and\\n   * \\\"debug\\\" loaders that would otherwise have inserted script tags. Under the\\n   * hood this needs to use a synchronous XHR and is not recommeneded for\\n   * production code.\\n   *\\n   * The module's goog.requires must have already been satisified; an exception\\n   * will be thrown if this is not the case. This assumption is that no\\n   * \\\"deps.js\\\" file exists, so there is no way to discover and locate the\\n   * module-to-be-loaded's dependencies and no attempt is made to do so.\\n   *\\n   * There should only be one attempt to load a module.  If\\n   * \\\"goog.loadModuleFromUrl\\\" is called for an already loaded module, an\\n   * exception will be throw.\\n   *\\n   * @param {string} url The URL from which to attempt to load the goog.module.\\n   */\\n  goog.loadModuleFromUrl = function(url) {\\n    // Because this executes synchronously, we don't need to do any additional\\n    // bookkeeping. When \\\"goog.loadModule\\\" the namespace will be marked as\\n    // having been provided which is sufficient.\\n    goog.retrieveAndExec_(url, true, false);\\n  };\\n\\n\\n  /**\\n   * Writes a new script pointing to {@code src} directly into the DOM.\\n   *\\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\\n   * the fallback mechanism.\\n   *\\n   * @param {string} src The script URL.\\n   * @private\\n   */\\n  goog.writeScriptSrcNode_ = function(src) {\\n    goog.global.document.write(\\n        '<script type=\\\"text/javascript\\\" src=\\\"' + src + '\\\"></' +\\n        'script>');\\n  };\\n\\n\\n  /**\\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\\n   * method exists as a fallback for document.write (which is not allowed in a\\n   * strict CSP context, e.g., Chrome apps).\\n   *\\n   * NOTE: This method is not analogous to using document.write to insert a\\n   * <script> tag; specifically, the user agent will execute a script added by\\n   * document.write immediately after the current script block finishes\\n   * executing, whereas the DOM-appended script node will not be executed until\\n   * the entire document is parsed and executed. That is to say, this script is\\n   * added to the end of the script execution queue.\\n   *\\n   * The page must not attempt to call goog.required entities until after the\\n   * document has loaded, e.g., in or after the window.onload callback.\\n   *\\n   * @param {string} src The script URL.\\n   * @private\\n   */\\n  goog.appendScriptSrcNode_ = function(src) {\\n    /** @type {Document} */\\n    var doc = goog.global.document;\\n    var scriptEl =\\n        /** @type {HTMLScriptElement} */ (doc.createElement('script'));\\n    scriptEl.type = 'text/javascript';\\n    scriptEl.src = src;\\n    scriptEl.defer = false;\\n    scriptEl.async = false;\\n    doc.head.appendChild(scriptEl);\\n  };\\n\\n\\n  /**\\n   * The default implementation of the import function. Writes a script tag to\\n   * import the script.\\n   *\\n   * @param {string} src The script url.\\n   * @param {string=} opt_sourceText The optionally source text to evaluate\\n   * @return {boolean} True if the script was imported, false otherwise.\\n   * @private\\n   */\\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\\n    if (goog.inHtmlDocument_()) {\\n      /** @type {!HTMLDocument} */\\n      var doc = goog.global.document;\\n\\n      // If the user tries to require a new symbol after document load,\\n      // something has gone terribly wrong. Doing a document.write would\\n      // wipe out the page. This does not apply to the CSP-compliant method\\n      // of writing script tags.\\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\\n          doc.readyState == 'complete') {\\n        // Certain test frameworks load base.js multiple times, which tries\\n        // to write deps.js each time. If that happens, just fail silently.\\n        // These frameworks wipe the page between each load of base.js, so this\\n        // is OK.\\n        var isDeps = /\\\\bdeps.js$/.test(src);\\n        if (isDeps) {\\n          return false;\\n        } else {\\n          throw Error('Cannot write \\\"' + src + '\\\" after document load');\\n        }\\n      }\\n\\n      if (opt_sourceText === undefined) {\\n        if (!goog.IS_OLD_IE_) {\\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\\n            goog.appendScriptSrcNode_(src);\\n          } else {\\n            goog.writeScriptSrcNode_(src);\\n          }\\n        } else {\\n          goog.oldIeWaiting_ = true;\\n          var state = ' onreadystatechange=\\\\'goog.onScriptLoad_(this, ' +\\n              ++goog.lastNonModuleScriptIndex_ + ')\\\\' ';\\n          doc.write(\\n              '<script type=\\\"text/javascript\\\" src=\\\"' + src + '\\\"' + state +\\n              '></' +\\n              'script>');\\n        }\\n      } else {\\n        doc.write(\\n            '<script type=\\\"text/javascript\\\">' +\\n            goog.protectScriptTag_(opt_sourceText) + '</' +\\n            'script>');\\n      }\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  /**\\n   * Rewrites closing script tags in input to avoid ending an enclosing script\\n   * tag.\\n   *\\n   * @param {string} str\\n   * @return {string}\\n   * @private\\n   */\\n  goog.protectScriptTag_ = function(str) {\\n    return str.replace(/<\\\\/(SCRIPT)/ig, '\\\\\\\\x3c/$1');\\n  };\\n\\n  /**\\n   * Determines whether the given language needs to be transpiled.\\n   * @param {string} lang\\n   * @return {boolean}\\n   * @private\\n   */\\n  goog.needsTranspile_ = function(lang) {\\n    if (goog.TRANSPILE == 'always') {\\n      return true;\\n    } else if (goog.TRANSPILE == 'never') {\\n      return false;\\n    } else if (!goog.requiresTranspilation_) {\\n      goog.requiresTranspilation_ = goog.createRequiresTranspilation_();\\n    }\\n    if (lang in goog.requiresTranspilation_) {\\n      return goog.requiresTranspilation_[lang];\\n    } else {\\n      throw new Error('Unknown language mode: ' + lang);\\n    }\\n  };\\n\\n  /** @private {?Object<string, boolean>} */\\n  goog.requiresTranspilation_ = null;\\n\\n\\n  /** @private {number} */\\n  goog.lastNonModuleScriptIndex_ = 0;\\n\\n\\n  /**\\n   * A readystatechange handler for legacy IE\\n   * @param {?} script\\n   * @param {number} scriptIndex\\n   * @return {boolean}\\n   * @private\\n   */\\n  goog.onScriptLoad_ = function(script, scriptIndex) {\\n    // for now load the modules when we reach the last script,\\n    // later allow more inter-mingling.\\n    if (script.readyState == 'complete' &&\\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\\n      goog.loadQueuedModules_();\\n    }\\n    return true;\\n  };\\n\\n  /**\\n   * Resolves dependencies based on the dependencies added using addDependency\\n   * and calls importScript_ in the correct order.\\n   * @param {string} pathToLoad The path from which to start discovering\\n   *     dependencies.\\n   * @private\\n   */\\n  goog.writeScripts_ = function(pathToLoad) {\\n    /** @type {!Array<string>} The scripts we need to write this time. */\\n    var scripts = [];\\n    var seenScript = {};\\n    var deps = goog.dependencies_;\\n\\n    /** @param {string} path */\\n    function visitNode(path) {\\n      if (path in deps.written) {\\n        return;\\n      }\\n\\n      // We have already visited this one. We can get here if we have cyclic\\n      // dependencies.\\n      if (path in deps.visited) {\\n        return;\\n      }\\n\\n      deps.visited[path] = true;\\n\\n      if (path in deps.requires) {\\n        for (var requireName in deps.requires[path]) {\\n          // If the required name is defined, we assume that it was already\\n          // bootstrapped by other means.\\n          if (!goog.isProvided_(requireName)) {\\n            if (requireName in deps.nameToPath) {\\n              visitNode(deps.nameToPath[requireName]);\\n            } else {\\n              throw Error('Undefined nameToPath for ' + requireName);\\n            }\\n          }\\n        }\\n      }\\n\\n      if (!(path in seenScript)) {\\n        seenScript[path] = true;\\n        scripts.push(path);\\n      }\\n    }\\n\\n    visitNode(pathToLoad);\\n\\n    // record that we are going to load all these scripts.\\n    for (var i = 0; i < scripts.length; i++) {\\n      var path = scripts[i];\\n      goog.dependencies_.written[path] = true;\\n    }\\n\\n    // If a module is loaded synchronously then we need to\\n    // clear the current inModuleLoader value, and restore it when we are\\n    // done loading the current \\\"requires\\\".\\n    var moduleState = goog.moduleLoaderState_;\\n    goog.moduleLoaderState_ = null;\\n\\n    for (var i = 0; i < scripts.length; i++) {\\n      var path = scripts[i];\\n      if (path) {\\n        var loadFlags = deps.loadFlags[path] || {};\\n        var languageLevel = loadFlags['lang'] || 'es3';\\n        var needsTranspile = goog.needsTranspile_(languageLevel);\\n        if (loadFlags['module'] == 'goog' || needsTranspile) {\\n          goog.importProcessedScript_(\\n              goog.basePath + path, loadFlags['module'] == 'goog',\\n              needsTranspile);\\n        } else {\\n          goog.importScript_(goog.basePath + path);\\n        }\\n      } else {\\n        goog.moduleLoaderState_ = moduleState;\\n        throw Error('Undefined script input');\\n      }\\n    }\\n\\n    // restore the current \\\"module loading state\\\"\\n    goog.moduleLoaderState_ = moduleState;\\n  };\\n\\n\\n  /**\\n   * Looks at the dependency rules and tries to determine the script file that\\n   * fulfills a particular rule.\\n   * @param {string} rule In the form goog.namespace.Class or project.script.\\n   * @return {?string} Url corresponding to the rule, or null.\\n   * @private\\n   */\\n  goog.getPathFromDeps_ = function(rule) {\\n    if (rule in goog.dependencies_.nameToPath) {\\n      return goog.dependencies_.nameToPath[rule];\\n    } else {\\n      return null;\\n    }\\n  };\\n\\n  goog.findBasePath_();\\n\\n  // Allow projects to manage the deps files themselves.\\n  if (!goog.global.CLOSURE_NO_DEPS) {\\n    goog.importScript_(goog.basePath + 'deps.js');\\n  }\\n}\\n\\n\\n/**\\n * @package {?boolean}\\n * Visible for testing.\\n */\\ngoog.hasBadLetScoping = null;\\n\\n\\n/**\\n * @return {boolean}\\n * @package Visible for testing.\\n */\\ngoog.useSafari10Workaround = function() {\\n  if (goog.hasBadLetScoping == null) {\\n    var hasBadLetScoping;\\n    try {\\n      hasBadLetScoping = !eval(\\n          '\\\"use strict\\\";' +\\n          'let x = 1; function f() { return typeof x; };' +\\n          'f() == \\\"number\\\";');\\n    } catch (e) {\\n      // Assume that ES6 syntax isn't supported.\\n      hasBadLetScoping = false;\\n    }\\n    goog.hasBadLetScoping = hasBadLetScoping;\\n  }\\n  return goog.hasBadLetScoping;\\n};\\n\\n\\n/**\\n * @param {string} moduleDef\\n * @return {string}\\n * @package Visible for testing.\\n */\\ngoog.workaroundSafari10EvalBug = function(moduleDef) {\\n  return '(function(){' + moduleDef +\\n      '\\\\n' +  // Terminate any trailing single line comment.\\n      ';' +   // Terminate any trailing expression.\\n      '})();\\\\n';\\n};\\n\\n\\n/**\\n * @param {function(?):?|string} moduleDef The module definition.\\n */\\ngoog.loadModule = function(moduleDef) {\\n  // NOTE: we allow function definitions to be either in the from\\n  // of a string to eval (which keeps the original source intact) or\\n  // in a eval forbidden environment (CSP) we allow a function definition\\n  // which in its body must call {@code goog.module}, and return the exports\\n  // of the module.\\n  var previousState = goog.moduleLoaderState_;\\n  try {\\n    goog.moduleLoaderState_ = {\\n      moduleName: undefined,\\n      declareLegacyNamespace: false\\n    };\\n    var exports;\\n    if (goog.isFunction(moduleDef)) {\\n      exports = moduleDef.call(undefined, {});\\n    } else if (goog.isString(moduleDef)) {\\n      if (goog.useSafari10Workaround()) {\\n        moduleDef = goog.workaroundSafari10EvalBug(moduleDef);\\n      }\\n\\n      exports = goog.loadModuleFromSource_.call(undefined, moduleDef);\\n    } else {\\n      throw Error('Invalid module definition');\\n    }\\n\\n    var moduleName = goog.moduleLoaderState_.moduleName;\\n    if (!goog.isString(moduleName) || !moduleName) {\\n      throw Error('Invalid module name \\\\\\\"' + moduleName + '\\\\\\\"');\\n    }\\n\\n    // Don't seal legacy namespaces as they may be uses as a parent of\\n    // another namespace\\n    if (goog.moduleLoaderState_.declareLegacyNamespace) {\\n      goog.constructNamespace_(moduleName, exports);\\n    } else if (\\n        goog.SEAL_MODULE_EXPORTS && Object.seal && typeof exports == 'object' &&\\n        exports != null) {\\n      Object.seal(exports);\\n    }\\n\\n    goog.loadedModules_[moduleName] = exports;\\n  } finally {\\n    goog.moduleLoaderState_ = previousState;\\n  }\\n};\\n\\n\\n/**\\n * @private @const\\n */\\ngoog.loadModuleFromSource_ = /** @type {function(string):?} */ (function() {\\n  // NOTE: we avoid declaring parameters or local variables here to avoid\\n  // masking globals or leaking values into the module definition.\\n  'use strict';\\n  var exports = {};\\n  eval(arguments[0]);\\n  return exports;\\n});\\n\\n\\n/**\\n * Normalize a file path by removing redundant \\\"..\\\" and extraneous \\\".\\\" file\\n * path components.\\n * @param {string} path\\n * @return {string}\\n * @private\\n */\\ngoog.normalizePath_ = function(path) {\\n  var components = path.split('/');\\n  var i = 0;\\n  while (i < components.length) {\\n    if (components[i] == '.') {\\n      components.splice(i, 1);\\n    } else if (\\n        i && components[i] == '..' && components[i - 1] &&\\n        components[i - 1] != '..') {\\n      components.splice(--i, 2);\\n    } else {\\n      i++;\\n    }\\n  }\\n  return components.join('/');\\n};\\n\\n\\n/**\\n * Provides a hook for loading a file when using Closure's goog.require() API\\n * with goog.modules.  In particular this hook is provided to support Node.js.\\n *\\n * @type {(function(string):string)|undefined}\\n */\\ngoog.global.CLOSURE_LOAD_FILE_SYNC;\\n\\n\\n/**\\n * Loads file by synchronous XHR. Should not be used in production environments.\\n * @param {string} src Source URL.\\n * @return {?string} File contents, or null if load failed.\\n * @private\\n */\\ngoog.loadFileSync_ = function(src) {\\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\\n  } else {\\n    try {\\n      /** @type {XMLHttpRequest} */\\n      var xhr = new goog.global['XMLHttpRequest']();\\n      xhr.open('get', src, false);\\n      xhr.send();\\n      // NOTE: Successful http: requests have a status of 200, but successful\\n      // file: requests may have a status of zero.  Any other status, or a\\n      // thrown exception (particularly in case of file: requests) indicates\\n      // some sort of error, which we treat as a missing or unavailable file.\\n      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;\\n    } catch (err) {\\n      // No need to rethrow or log, since errors should show up on their own.\\n      return null;\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Retrieve and execute a script that needs some sort of wrapping.\\n * @param {string} src Script source URL.\\n * @param {boolean} isModule Whether to load as a module.\\n * @param {boolean} needsTranspile Whether to transpile down to ES3.\\n * @private\\n */\\ngoog.retrieveAndExec_ = function(src, isModule, needsTranspile) {\\n  if (!COMPILED) {\\n    // The full but non-canonicalized URL for later use.\\n    var originalPath = src;\\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\\n    src = goog.normalizePath_(src);\\n\\n    var importScript =\\n        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\\n\\n    var scriptText = goog.loadFileSync_(src);\\n    if (scriptText == null) {\\n      throw new Error('Load of \\\"' + src + '\\\" failed');\\n    }\\n\\n    if (needsTranspile) {\\n      scriptText = goog.transpile_.call(goog.global, scriptText, src);\\n    }\\n\\n    if (isModule) {\\n      scriptText = goog.wrapModule_(src, scriptText);\\n    } else {\\n      scriptText += '\\\\n//# sourceURL=' + src;\\n    }\\n    var isOldIE = goog.IS_OLD_IE_;\\n    if (isOldIE && goog.oldIeWaiting_) {\\n      goog.dependencies_.deferred[originalPath] = scriptText;\\n      goog.queuedModules_.push(originalPath);\\n    } else {\\n      importScript(src, scriptText);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Lazily retrieves the transpiler and applies it to the source.\\n * @param {string} code JS code.\\n * @param {string} path Path to the code.\\n * @return {string} The transpiled code.\\n * @private\\n */\\ngoog.transpile_ = function(code, path) {\\n  var jscomp = goog.global['$jscomp'];\\n  if (!jscomp) {\\n    goog.global['$jscomp'] = jscomp = {};\\n  }\\n  var transpile = jscomp.transpile;\\n  if (!transpile) {\\n    var transpilerPath = goog.basePath + goog.TRANSPILER;\\n    var transpilerCode = goog.loadFileSync_(transpilerPath);\\n    if (transpilerCode) {\\n      // This must be executed synchronously, since by the time we know we\\n      // need it, we're about to load and write the ES6 code synchronously,\\n      // so a normal script-tag load will be too slow.\\n      eval(transpilerCode + '\\\\n//# sourceURL=' + transpilerPath);\\n      // Even though the transpiler is optional, if $gwtExport is found, it's\\n      // a sign the transpiler was loaded and the $jscomp.transpile *should*\\n      // be there.\\n      if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp'] &&\\n          !goog.global['$gwtExport']['$jscomp']['transpile']) {\\n        throw new Error(\\n            'The transpiler did not properly export the \\\"transpile\\\" ' +\\n            'method. $gwtExport: ' + JSON.stringify(goog.global['$gwtExport']));\\n      }\\n      // transpile.js only exports a single $jscomp function, transpile. We\\n      // grab just that and add it to the existing definition of $jscomp which\\n      // contains the polyfills.\\n      goog.global['$jscomp'].transpile =\\n          goog.global['$gwtExport']['$jscomp']['transpile'];\\n      jscomp = goog.global['$jscomp'];\\n      transpile = jscomp.transpile;\\n    }\\n  }\\n  if (!transpile) {\\n    // The transpiler is an optional component.  If it's not available then\\n    // replace it with a pass-through function that simply logs.\\n    var suffix = ' requires transpilation but no transpiler was found.';\\n    transpile = jscomp.transpile = function(code, path) {\\n      // TODO(user): figure out some way to get this error to show up\\n      // in test results, noting that the failure may occur in many\\n      // different ways, including in loadModule() before the test\\n      // runner even comes up.\\n      goog.logToConsole_(path + suffix);\\n      return code;\\n    };\\n  }\\n  // Note: any transpilation errors/warnings will be logged to the console.\\n  return transpile(code, path);\\n};\\n\\n\\n//==============================================================================\\n// Language Enhancements\\n//==============================================================================\\n\\n\\n/**\\n * This is a \\\"fixed\\\" version of the typeof operator.  It differs from the typeof\\n * operator in such a way that null returns 'null' and arrays return 'array'.\\n * @param {?} value The value to get the type of.\\n * @return {string} The name of the type.\\n */\\ngoog.typeOf = function(value) {\\n  var s = typeof value;\\n  if (s == 'object') {\\n    if (value) {\\n      // Check these first, so we can avoid calling Object.prototype.toString if\\n      // possible.\\n      //\\n      // IE improperly marshals typeof across execution contexts, but a\\n      // cross-context object will still return false for \\\"instanceof Object\\\".\\n      if (value instanceof Array) {\\n        return 'array';\\n      } else if (value instanceof Object) {\\n        return s;\\n      }\\n\\n      // HACK: In order to use an Object prototype method on the arbitrary\\n      //   value, the compiler requires the value be cast to type Object,\\n      //   even though the ECMA spec explicitly allows it.\\n      var className = Object.prototype.toString.call(\\n          /** @type {!Object} */ (value));\\n      // In Firefox 3.6, attempting to access iframe window objects' length\\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\\n      // here.\\n      if (className == '[object Window]') {\\n        return 'object';\\n      }\\n\\n      // We cannot always use constructor == Array or instanceof Array because\\n      // different frames have different Array objects. In IE6, if the iframe\\n      // where the array was created is destroyed, the array loses its\\n      // prototype. Then dereferencing val.splice here throws an exception, so\\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\\n      // so that will work. In this case, this function will return false and\\n      // most array functions will still work because the array is still\\n      // array-like (supports length and []) even though it has lost its\\n      // prototype.\\n      // Mark Miller noticed that Object.prototype.toString\\n      // allows access to the unforgeable [[Class]] property.\\n      //  15.2.4.2 Object.prototype.toString ( )\\n      //  When the toString method is called, the following steps are taken:\\n      //      1. Get the [[Class]] property of this object.\\n      //      2. Compute a string value by concatenating the three strings\\n      //         \\\"[object \\\", Result(1), and \\\"]\\\".\\n      //      3. Return Result(2).\\n      // and this behavior survives the destruction of the execution context.\\n      if ((className == '[object Array]' ||\\n           // In IE all non value types are wrapped as objects across window\\n           // boundaries (not iframe though) so we have to do object detection\\n           // for this edge case.\\n           typeof value.length == 'number' &&\\n               typeof value.splice != 'undefined' &&\\n               typeof value.propertyIsEnumerable != 'undefined' &&\\n               !value.propertyIsEnumerable('splice')\\n\\n               )) {\\n        return 'array';\\n      }\\n      // HACK: There is still an array case that fails.\\n      //     function ArrayImpostor() {}\\n      //     ArrayImpostor.prototype = [];\\n      //     var impostor = new ArrayImpostor;\\n      // this can be fixed by getting rid of the fast path\\n      // (value instanceof Array) and solely relying on\\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\\n      // but that would require many more function calls and is not warranted\\n      // unless closure code is receiving objects from untrusted sources.\\n\\n      // IE in cross-window calls does not correctly marshal the function type\\n      // (it appears just as an object) so we cannot use just typeof val ==\\n      // 'function'. However, if the object has a call property, it is a\\n      // function.\\n      if ((className == '[object Function]' ||\\n           typeof value.call != 'undefined' &&\\n               typeof value.propertyIsEnumerable != 'undefined' &&\\n               !value.propertyIsEnumerable('call'))) {\\n        return 'function';\\n      }\\n\\n    } else {\\n      return 'null';\\n    }\\n\\n  } else if (s == 'function' && typeof value.call == 'undefined') {\\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\\n    // would like to return object for those and we can detect an invalid\\n    // function by making sure that the function object has a call method.\\n    return 'object';\\n  }\\n  return s;\\n};\\n\\n\\n/**\\n * Returns true if the specified value is null.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is null.\\n */\\ngoog.isNull = function(val) {\\n  return val === null;\\n};\\n\\n\\n/**\\n * Returns true if the specified value is defined and not null.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is defined and not null.\\n */\\ngoog.isDefAndNotNull = function(val) {\\n  // Note that undefined == null.\\n  return val != null;\\n};\\n\\n\\n/**\\n * Returns true if the specified value is an array.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is an array.\\n */\\ngoog.isArray = function(val) {\\n  return goog.typeOf(val) == 'array';\\n};\\n\\n\\n/**\\n * Returns true if the object looks like an array. To qualify as array like\\n * the value needs to be either a NodeList or an object with a Number length\\n * property. As a special case, a function value is not array like, because its\\n * length property is fixed to correspond to the number of expected arguments.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is an array.\\n */\\ngoog.isArrayLike = function(val) {\\n  var type = goog.typeOf(val);\\n  // We do not use goog.isObject here in order to exclude function values.\\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\\n};\\n\\n\\n/**\\n * Returns true if the object looks like a Date. To qualify as Date-like the\\n * value needs to be an object and have a getFullYear() function.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is a like a Date.\\n */\\ngoog.isDateLike = function(val) {\\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\\n};\\n\\n\\n/**\\n * Returns true if the specified value is a function.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is a function.\\n */\\ngoog.isFunction = function(val) {\\n  return goog.typeOf(val) == 'function';\\n};\\n\\n\\n/**\\n * Returns true if the specified value is an object.  This includes arrays and\\n * functions.\\n * @param {?} val Variable to test.\\n * @return {boolean} Whether variable is an object.\\n */\\ngoog.isObject = function(val) {\\n  var type = typeof val;\\n  return type == 'object' && val != null || type == 'function';\\n  // return Object(val) === val also works, but is slower, especially if val is\\n  // not an object.\\n};\\n\\n\\n/**\\n * Gets a unique ID for an object. This mutates the object so that further calls\\n * with the same object as a parameter returns the same value. The unique ID is\\n * guaranteed to be unique across the current session amongst objects that are\\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\\n * consistent across sessions. It is unsafe to generate unique ID for function\\n * prototypes.\\n *\\n * @param {Object} obj The object to get the unique ID for.\\n * @return {number} The unique ID for the object.\\n */\\ngoog.getUid = function(obj) {\\n  // TODO(arv): Make the type stricter, do not accept null.\\n\\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\\n  // and SubClass.prototype will be the same.\\n  return obj[goog.UID_PROPERTY_] ||\\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\\n};\\n\\n\\n/**\\n * Whether the given object is already assigned a unique ID.\\n *\\n * This does not modify the object.\\n *\\n * @param {!Object} obj The object to check.\\n * @return {boolean} Whether there is an assigned unique id for the object.\\n */\\ngoog.hasUid = function(obj) {\\n  return !!obj[goog.UID_PROPERTY_];\\n};\\n\\n\\n/**\\n * Removes the unique ID from an object. This is useful if the object was\\n * previously mutated using {@code goog.getUid} in which case the mutation is\\n * undone.\\n * @param {Object} obj The object to remove the unique ID field from.\\n */\\ngoog.removeUid = function(obj) {\\n  // TODO(arv): Make the type stricter, do not accept null.\\n\\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\\n  // try to delete.  Instead we try to use removeAttribute.\\n  if (obj !== null && 'removeAttribute' in obj) {\\n    obj.removeAttribute(goog.UID_PROPERTY_);\\n  }\\n\\n  try {\\n    delete obj[goog.UID_PROPERTY_];\\n  } catch (ex) {\\n  }\\n};\\n\\n\\n/**\\n * Name for unique ID property. Initialized in a way to help avoid collisions\\n * with other closure JavaScript on the same page.\\n * @type {string}\\n * @private\\n */\\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\\n\\n\\n/**\\n * Counter for UID.\\n * @type {number}\\n * @private\\n */\\ngoog.uidCounter_ = 0;\\n\\n\\n/**\\n * Adds a hash code field to an object. The hash code is unique for the\\n * given object.\\n * @param {Object} obj The object to get the hash code for.\\n * @return {number} The hash code for the object.\\n * @deprecated Use goog.getUid instead.\\n */\\ngoog.getHashCode = goog.getUid;\\n\\n\\n/**\\n * Removes the hash code field from an object.\\n * @param {Object} obj The object to remove the field from.\\n * @deprecated Use goog.removeUid instead.\\n */\\ngoog.removeHashCode = goog.removeUid;\\n\\n\\n/**\\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\\n * arrays will be cloned recursively.\\n *\\n * WARNINGS:\\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\\n * refer to themselves will cause infinite recursion.\\n *\\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\\n * UIDs created by <code>getUid</code> into cloned results.\\n *\\n * @param {*} obj The value to clone.\\n * @return {*} A clone of the input value.\\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\\n */\\ngoog.cloneObject = function(obj) {\\n  var type = goog.typeOf(obj);\\n  if (type == 'object' || type == 'array') {\\n    if (obj.clone) {\\n      return obj.clone();\\n    }\\n    var clone = type == 'array' ? [] : {};\\n    for (var key in obj) {\\n      clone[key] = goog.cloneObject(obj[key]);\\n    }\\n    return clone;\\n  }\\n\\n  return obj;\\n};\\n\\n\\n/**\\n * A native implementation of goog.bind.\\n * @param {?function(this:T, ...)} fn A function to partially apply.\\n * @param {T} selfObj Specifies the object which this should point to when the\\n *     function is run.\\n * @param {...*} var_args Additional arguments that are partially applied to the\\n *     function.\\n * @return {!Function} A partially-applied form of the function goog.bind() was\\n *     invoked as a method of.\\n * @template T\\n * @private\\n */\\ngoog.bindNative_ = function(fn, selfObj, var_args) {\\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\\n};\\n\\n\\n/**\\n * A pure-JS implementation of goog.bind.\\n * @param {?function(this:T, ...)} fn A function to partially apply.\\n * @param {T} selfObj Specifies the object which this should point to when the\\n *     function is run.\\n * @param {...*} var_args Additional arguments that are partially applied to the\\n *     function.\\n * @return {!Function} A partially-applied form of the function goog.bind() was\\n *     invoked as a method of.\\n * @template T\\n * @private\\n */\\ngoog.bindJs_ = function(fn, selfObj, var_args) {\\n  if (!fn) {\\n    throw new Error();\\n  }\\n\\n  if (arguments.length > 2) {\\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\\n    return function() {\\n      // Prepend the bound arguments to the current arguments.\\n      var newArgs = Array.prototype.slice.call(arguments);\\n      Array.prototype.unshift.apply(newArgs, boundArgs);\\n      return fn.apply(selfObj, newArgs);\\n    };\\n\\n  } else {\\n    return function() {\\n      return fn.apply(selfObj, arguments);\\n    };\\n  }\\n};\\n\\n\\n/**\\n * Partially applies this function to a particular 'this object' and zero or\\n * more arguments. The result is a new function with some arguments of the first\\n * function pre-filled and the value of this 'pre-specified'.\\n *\\n * Remaining arguments specified at call-time are appended to the pre-specified\\n * ones.\\n *\\n * Also see: {@link #partial}.\\n *\\n * Usage:\\n * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');\\n * barMethBound('arg3', 'arg4');</pre>\\n *\\n * @param {?function(this:T, ...)} fn A function to partially apply.\\n * @param {T} selfObj Specifies the object which this should point to when the\\n *     function is run.\\n * @param {...*} var_args Additional arguments that are partially applied to the\\n *     function.\\n * @return {!Function} A partially-applied form of the function goog.bind() was\\n *     invoked as a method of.\\n * @template T\\n * @suppress {deprecated} See above.\\n */\\ngoog.bind = function(fn, selfObj, var_args) {\\n  // TODO(nicksantos): narrow the type signature.\\n  if (Function.prototype.bind &&\\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\\n      // extension environment. This means that for Chrome extensions, they get\\n      // the implementation of Function.prototype.bind that calls goog.bind\\n      // instead of the native one. Even worse, we don't want to introduce a\\n      // circular dependency between goog.bind and Function.prototype.bind, so\\n      // we have to hack this to make sure it works correctly.\\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\\n    goog.bind = goog.bindNative_;\\n  } else {\\n    goog.bind = goog.bindJs_;\\n  }\\n  return goog.bind.apply(null, arguments);\\n};\\n\\n\\n/**\\n * Like goog.bind(), except that a 'this object' is not required. Useful when\\n * the target function is already bound.\\n *\\n * Usage:\\n * var g = goog.partial(f, arg1, arg2);\\n * g(arg3, arg4);\\n *\\n * @param {Function} fn A function to partially apply.\\n * @param {...*} var_args Additional arguments that are partially applied to fn.\\n * @return {!Function} A partially-applied form of the function goog.partial()\\n *     was invoked as a method of.\\n */\\ngoog.partial = function(fn, var_args) {\\n  var args = Array.prototype.slice.call(arguments, 1);\\n  return function() {\\n    // Clone the array (with slice()) and append additional arguments\\n    // to the existing arguments.\\n    var newArgs = args.slice();\\n    newArgs.push.apply(newArgs, arguments);\\n    return fn.apply(this, newArgs);\\n  };\\n};\\n\\n\\n/**\\n * Copies all the members of a source object to a target object. This method\\n * does not work on all browsers for all objects that contain keys such as\\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\\n * @param {Object} target Target.\\n * @param {Object} source Source.\\n */\\ngoog.mixin = function(target, source) {\\n  for (var x in source) {\\n    target[x] = source[x];\\n  }\\n\\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\\n  // not enumerable on the prototype object (for example, isPrototypeOf from\\n  // Object.prototype) but also it will not include 'replace' on objects that\\n  // extend String and change 'replace' (not that it is common for anyone to\\n  // extend anything except Object).\\n};\\n\\n\\n/**\\n * @return {number} An integer value representing the number of milliseconds\\n *     between midnight, January 1, 1970 and the current time.\\n */\\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\\n             // Unary plus operator converts its operand to a number which in\\n             // the case of\\n             // a date is done by calling getTime().\\n             return +new Date();\\n           });\\n\\n\\n/**\\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\\n * global scope (for example, in Safari), appends a script tag instead.\\n * Throws an exception if neither execScript or eval is defined.\\n * @param {string} script JavaScript string.\\n */\\ngoog.globalEval = function(script) {\\n  if (goog.global.execScript) {\\n    goog.global.execScript(script, 'JavaScript');\\n  } else if (goog.global.eval) {\\n    // Test to see if eval works\\n    if (goog.evalWorksForGlobals_ == null) {\\n      goog.global.eval('var _evalTest_ = 1;');\\n      if (typeof goog.global['_evalTest_'] != 'undefined') {\\n        try {\\n          delete goog.global['_evalTest_'];\\n        } catch (ignore) {\\n          // Microsoft edge fails the deletion above in strict mode.\\n        }\\n        goog.evalWorksForGlobals_ = true;\\n      } else {\\n        goog.evalWorksForGlobals_ = false;\\n      }\\n    }\\n\\n    if (goog.evalWorksForGlobals_) {\\n      goog.global.eval(script);\\n    } else {\\n      /** @type {Document} */\\n      var doc = goog.global.document;\\n      var scriptElt =\\n          /** @type {!HTMLScriptElement} */ (doc.createElement('SCRIPT'));\\n      scriptElt.type = 'text/javascript';\\n      scriptElt.defer = false;\\n      // Note(user): can't use .innerHTML since \\\"t('<test>')\\\" will fail and\\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\\n      scriptElt.appendChild(doc.createTextNode(script));\\n      doc.body.appendChild(scriptElt);\\n      doc.body.removeChild(scriptElt);\\n    }\\n  } else {\\n    throw Error('goog.globalEval not available');\\n  }\\n};\\n\\n\\n/**\\n * Indicates whether or not we can call 'eval' directly to eval code in the\\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\\n * empirically tests whether eval works for globals). @see goog.globalEval\\n * @type {?boolean}\\n * @private\\n */\\ngoog.evalWorksForGlobals_ = null;\\n\\n\\n/**\\n * Optional map of CSS class names to obfuscated names used with\\n * goog.getCssName().\\n * @private {!Object<string, string>|undefined}\\n * @see goog.setCssNameMapping\\n */\\ngoog.cssNameMapping_;\\n\\n\\n/**\\n * Optional obfuscation style for CSS class names. Should be set to either\\n * 'BY_WHOLE' or 'BY_PART' if defined.\\n * @type {string|undefined}\\n * @private\\n * @see goog.setCssNameMapping\\n */\\ngoog.cssNameMappingStyle_;\\n\\n\\n\\n/**\\n * A hook for modifying the default behavior goog.getCssName. The function\\n * if present, will recieve the standard output of the goog.getCssName as\\n * its input.\\n *\\n * @type {(function(string):string)|undefined}\\n */\\ngoog.global.CLOSURE_CSS_NAME_MAP_FN;\\n\\n\\n/**\\n * Handles strings that are intended to be used as CSS class names.\\n *\\n * This function works in tandem with @see goog.setCssNameMapping.\\n *\\n * Without any mapping set, the arguments are simple joined with a hyphen and\\n * passed through unaltered.\\n *\\n * When there is a mapping, there are two possible styles in which these\\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\\n * style, the full css name is looked up in the map directly. If a rewrite is\\n * not specified by the map, the compiler will output a warning.\\n *\\n * When the mapping is passed to the compiler, it will replace calls to\\n * goog.getCssName with the strings from the mapping, e.g.\\n *     var x = goog.getCssName('foo');\\n *     var y = goog.getCssName(this.baseClass, 'active');\\n *  becomes:\\n *     var x = 'foo';\\n *     var y = this.baseClass + '-active';\\n *\\n * If one argument is passed it will be processed, if two are passed only the\\n * modifier will be processed, as it is assumed the first argument was generated\\n * as a result of calling goog.getCssName.\\n *\\n * @param {string} className The class name.\\n * @param {string=} opt_modifier A modifier to be appended to the class name.\\n * @return {string} The class name or the concatenation of the class name and\\n *     the modifier.\\n */\\ngoog.getCssName = function(className, opt_modifier) {\\n  // String() is used for compatibility with compiled soy where the passed\\n  // className can be non-string objects.\\n  if (String(className).charAt(0) == '.') {\\n    throw new Error(\\n        'className passed in goog.getCssName must not start with \\\".\\\".' +\\n        ' You passed: ' + className);\\n  }\\n\\n  var getMapping = function(cssName) {\\n    return goog.cssNameMapping_[cssName] || cssName;\\n  };\\n\\n  var renameByParts = function(cssName) {\\n    // Remap all the parts individually.\\n    var parts = cssName.split('-');\\n    var mapped = [];\\n    for (var i = 0; i < parts.length; i++) {\\n      mapped.push(getMapping(parts[i]));\\n    }\\n    return mapped.join('-');\\n  };\\n\\n  var rename;\\n  if (goog.cssNameMapping_) {\\n    rename =\\n        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;\\n  } else {\\n    rename = function(a) {\\n      return a;\\n    };\\n  }\\n\\n  var result =\\n      opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);\\n\\n  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further\\n  // processing of the class name.\\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\\n  }\\n\\n  return result;\\n};\\n\\n\\n/**\\n * Sets the map to check when returning a value from goog.getCssName(). Example:\\n * <pre>\\n * goog.setCssNameMapping({\\n *   \\\"goog\\\": \\\"a\\\",\\n *   \\\"disabled\\\": \\\"b\\\",\\n * });\\n *\\n * var x = goog.getCssName('goog');\\n * // The following evaluates to: \\\"a a-b\\\".\\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\\n * </pre>\\n * When declared as a map of string literals to string literals, the JSCompiler\\n * will replace all calls to goog.getCssName() using the supplied map if the\\n * --process_closure_primitives flag is set.\\n *\\n * @param {!Object} mapping A map of strings to strings where keys are possible\\n *     arguments to goog.getCssName() and values are the corresponding values\\n *     that should be returned.\\n * @param {string=} opt_style The style of css name mapping. There are two valid\\n *     options: 'BY_PART', and 'BY_WHOLE'.\\n * @see goog.getCssName for a description.\\n */\\ngoog.setCssNameMapping = function(mapping, opt_style) {\\n  goog.cssNameMapping_ = mapping;\\n  goog.cssNameMappingStyle_ = opt_style;\\n};\\n\\n\\n/**\\n * To use CSS renaming in compiled mode, one of the input files should have a\\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\\n * mode, JavaScript code should be loaded before this base.js file that declares\\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\\n * are made in uncompiled mode.\\n *\\n * A hook for overriding the CSS name mapping.\\n * @type {!Object<string, string>|undefined}\\n */\\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\\n\\n\\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\\n  // This does not call goog.setCssNameMapping() because the JSCompiler\\n  // requires that goog.setCssNameMapping() be called with an object literal.\\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\\n}\\n\\n\\n/**\\n * Gets a localized message.\\n *\\n * This function is a compiler primitive. If you give the compiler a localized\\n * message bundle, it will replace the string at compile-time with a localized\\n * version, and expand goog.getMsg call to a concatenated string.\\n *\\n * Messages must be initialized in the form:\\n * <code>\\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\\n * </code>\\n *\\n * This function produces a string which should be treated as plain text. Use\\n * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to\\n * produce SafeHtml.\\n *\\n * @param {string} str Translatable string, places holders in the form {$foo}.\\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\\n * @return {string} message with placeholders filled.\\n */\\ngoog.getMsg = function(str, opt_values) {\\n  if (opt_values) {\\n    str = str.replace(/\\\\{\\\\$([^}]+)}/g, function(match, key) {\\n      return (opt_values != null && key in opt_values) ? opt_values[key] :\\n                                                         match;\\n    });\\n  }\\n  return str;\\n};\\n\\n\\n/**\\n * Gets a localized message. If the message does not have a translation, gives a\\n * fallback message.\\n *\\n * This is useful when introducing a new message that has not yet been\\n * translated into all languages.\\n *\\n * This function is a compiler primitive. Must be used in the form:\\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\\n * where MSG_A and MSG_B were initialized with goog.getMsg.\\n *\\n * @param {string} a The preferred message.\\n * @param {string} b The fallback message.\\n * @return {string} The best translated message.\\n */\\ngoog.getMsgWithFallback = function(a, b) {\\n  return a;\\n};\\n\\n\\n/**\\n * Exposes an unobfuscated global namespace path for the given object.\\n * Note that fields of the exported object *will* be obfuscated, unless they are\\n * exported in turn via this function or goog.exportProperty.\\n *\\n * Also handy for making public items that are defined in anonymous closures.\\n *\\n * ex. goog.exportSymbol('public.path.Foo', Foo);\\n *\\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\\n *     public.path.Foo.staticFunction();\\n *\\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\\n *                       Foo.prototype.myMethod);\\n *     new public.path.Foo().myMethod();\\n *\\n * @param {string} publicPath Unobfuscated name to export.\\n * @param {*} object Object the name should point to.\\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\\n *     is goog.global.\\n */\\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\\n};\\n\\n\\n/**\\n * Exports a property unobfuscated into the object's namespace.\\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\\n * @param {Object} object Object whose static property is being exported.\\n * @param {string} publicName Unobfuscated name to export.\\n * @param {*} symbol Object the name should point to.\\n */\\ngoog.exportProperty = function(object, publicName, symbol) {\\n  object[publicName] = symbol;\\n};\\n\\n\\n/**\\n * Inherit the prototype methods from one constructor into another.\\n *\\n * Usage:\\n * <pre>\\n * function ParentClass(a, b) { }\\n * ParentClass.prototype.foo = function(a) { };\\n *\\n * function ChildClass(a, b, c) {\\n *   ChildClass.base(this, 'constructor', a, b);\\n * }\\n * goog.inherits(ChildClass, ParentClass);\\n *\\n * var child = new ChildClass('a', 'b', 'see');\\n * child.foo(); // This works.\\n * </pre>\\n *\\n * @param {!Function} childCtor Child class.\\n * @param {!Function} parentCtor Parent class.\\n */\\ngoog.inherits = function(childCtor, parentCtor) {\\n  /** @constructor */\\n  function tempCtor() {}\\n  tempCtor.prototype = parentCtor.prototype;\\n  childCtor.superClass_ = parentCtor.prototype;\\n  childCtor.prototype = new tempCtor();\\n  /** @override */\\n  childCtor.prototype.constructor = childCtor;\\n\\n  /**\\n   * Calls superclass constructor/method.\\n   *\\n   * This function is only available if you use goog.inherits to\\n   * express inheritance relationships between classes.\\n   *\\n   * NOTE: This is a replacement for goog.base and for superClass_\\n   * property defined in childCtor.\\n   *\\n   * @param {!Object} me Should always be \\\"this\\\".\\n   * @param {string} methodName The method name to call. Calling\\n   *     superclass constructor can be done with the special string\\n   *     'constructor'.\\n   * @param {...*} var_args The arguments to pass to superclass\\n   *     method/constructor.\\n   * @return {*} The return value of the superclass method/constructor.\\n   */\\n  childCtor.base = function(me, methodName, var_args) {\\n    // Copying using loop to avoid deop due to passing arguments object to\\n    // function. This is faster in many JS engines as of late 2014.\\n    var args = new Array(arguments.length - 2);\\n    for (var i = 2; i < arguments.length; i++) {\\n      args[i - 2] = arguments[i];\\n    }\\n    return parentCtor.prototype[methodName].apply(me, args);\\n  };\\n};\\n\\n\\n/**\\n * Call up to the superclass.\\n *\\n * If this is called from a constructor, then this calls the superclass\\n * constructor with arguments 1-N.\\n *\\n * If this is called from a prototype method, then you must pass the name of the\\n * method as the second argument to this function. If you do not, you will get a\\n * runtime error. This calls the superclass' method with arguments 2-N.\\n *\\n * This function only works if you use goog.inherits to express inheritance\\n * relationships between your classes.\\n *\\n * This function is a compiler primitive. At compile-time, the compiler will do\\n * macro expansion to remove a lot of the extra overhead that this function\\n * introduces. The compiler will also enforce a lot of the assumptions that this\\n * function makes, and treat it as a compiler error if you break them.\\n *\\n * @param {!Object} me Should always be \\\"this\\\".\\n * @param {*=} opt_methodName The method name if calling a super method.\\n * @param {...*} var_args The rest of the arguments.\\n * @return {*} The return value of the superclass method.\\n * @suppress {es5Strict} This method can not be used in strict mode, but\\n *     all Closure Library consumers must depend on this file.\\n * @deprecated goog.base is not strict mode compatible.  Prefer the static\\n *     \\\"base\\\" method added to the constructor by goog.inherits\\n *     or ES6 classes and the \\\"super\\\" keyword.\\n */\\ngoog.base = function(me, opt_methodName, var_args) {\\n  var caller = arguments.callee.caller;\\n\\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\\n    throw Error(\\n        'arguments.caller not defined.  goog.base() cannot be used ' +\\n        'with strict mode code. See ' +\\n        'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\\n  }\\n\\n  if (caller.superClass_) {\\n    // Copying using loop to avoid deop due to passing arguments object to\\n    // function. This is faster in many JS engines as of late 2014.\\n    var ctorArgs = new Array(arguments.length - 1);\\n    for (var i = 1; i < arguments.length; i++) {\\n      ctorArgs[i - 1] = arguments[i];\\n    }\\n    // This is a constructor. Call the superclass constructor.\\n    return caller.superClass_.constructor.apply(me, ctorArgs);\\n  }\\n\\n  // Copying using loop to avoid deop due to passing arguments object to\\n  // function. This is faster in many JS engines as of late 2014.\\n  var args = new Array(arguments.length - 2);\\n  for (var i = 2; i < arguments.length; i++) {\\n    args[i - 2] = arguments[i];\\n  }\\n  var foundCaller = false;\\n  for (var ctor = me.constructor; ctor;\\n       ctor = ctor.superClass_ && ctor.superClass_.constructor) {\\n    if (ctor.prototype[opt_methodName] === caller) {\\n      foundCaller = true;\\n    } else if (foundCaller) {\\n      return ctor.prototype[opt_methodName].apply(me, args);\\n    }\\n  }\\n\\n  // If we did not find the caller in the prototype chain, then one of two\\n  // things happened:\\n  // 1) The caller is an instance method.\\n  // 2) This method was not called by the right caller.\\n  if (me[opt_methodName] === caller) {\\n    return me.constructor.prototype[opt_methodName].apply(me, args);\\n  } else {\\n    throw Error(\\n        'goog.base called from a method of one name ' +\\n        'to a method of a different name');\\n  }\\n};\\n\\n\\n/**\\n * Allow for aliasing within scope functions.  This function exists for\\n * uncompiled code - in compiled code the calls will be inlined and the aliases\\n * applied.  In uncompiled code the function is simply run since the aliases as\\n * written are valid JavaScript.\\n *\\n *\\n * @param {function()} fn Function to call.  This function can contain aliases\\n *     to namespaces (e.g. \\\"var dom = goog.dom\\\") or classes\\n *     (e.g. \\\"var Timer = goog.Timer\\\").\\n */\\ngoog.scope = function(fn) {\\n  if (goog.isInModuleLoader_()) {\\n    throw Error('goog.scope is not supported within a goog.module.');\\n  }\\n  fn.call(goog.global);\\n};\\n\\n\\n/*\\n * To support uncompiled, strict mode bundles that use eval to divide source\\n * like so:\\n *    eval('someSource;//# sourceUrl sourcefile.js');\\n * We need to export the globally defined symbols \\\"goog\\\" and \\\"COMPILED\\\".\\n * Exporting \\\"goog\\\" breaks the compiler optimizations, so we required that\\n * be defined externally.\\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\\n * extern generation when that compiler option is enabled.\\n */\\nif (!COMPILED) {\\n  goog.global['COMPILED'] = COMPILED;\\n}\\n\\n\\n//==============================================================================\\n// goog.defineClass implementation\\n//==============================================================================\\n\\n\\n/**\\n * Creates a restricted form of a Closure \\\"class\\\":\\n *   - from the compiler's perspective, the instance returned from the\\n *     constructor is sealed (no new properties may be added).  This enables\\n *     better checks.\\n *   - the compiler will rewrite this definition to a form that is optimal\\n *     for type checking and optimization (initially this will be a more\\n *     traditional form).\\n *\\n * @param {Function} superClass The superclass, Object or null.\\n * @param {goog.defineClass.ClassDescriptor} def\\n *     An object literal describing\\n *     the class.  It may have the following properties:\\n *     \\\"constructor\\\": the constructor function\\n *     \\\"statics\\\": an object literal containing methods to add to the constructor\\n *        as \\\"static\\\" methods or a function that will receive the constructor\\n *        function as its only parameter to which static properties can\\n *        be added.\\n *     all other properties are added to the prototype.\\n * @return {!Function} The class constructor.\\n */\\ngoog.defineClass = function(superClass, def) {\\n  // TODO(johnlenz): consider making the superClass an optional parameter.\\n  var constructor = def.constructor;\\n  var statics = def.statics;\\n  // Wrap the constructor prior to setting up the prototype and static methods.\\n  if (!constructor || constructor == Object.prototype.constructor) {\\n    constructor = function() {\\n      throw Error('cannot instantiate an interface (no constructor defined).');\\n    };\\n  }\\n\\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\\n  if (superClass) {\\n    goog.inherits(cls, superClass);\\n  }\\n\\n  // Remove all the properties that should not be copied to the prototype.\\n  delete def.constructor;\\n  delete def.statics;\\n\\n  goog.defineClass.applyProperties_(cls.prototype, def);\\n  if (statics != null) {\\n    if (statics instanceof Function) {\\n      statics(cls);\\n    } else {\\n      goog.defineClass.applyProperties_(cls, statics);\\n    }\\n  }\\n\\n  return cls;\\n};\\n\\n\\n/**\\n * @typedef {{\\n *   constructor: (!Function|undefined),\\n *   statics: (Object|undefined|function(Function):void)\\n * }}\\n */\\ngoog.defineClass.ClassDescriptor;\\n\\n\\n/**\\n * @define {boolean} Whether the instances returned by goog.defineClass should\\n *     be sealed when possible.\\n *\\n * When sealing is disabled the constructor function will not be wrapped by\\n * goog.defineClass, making it incompatible with ES6 class methods.\\n */\\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\\n\\n\\n/**\\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\\n * defined, this function will wrap the constructor in a function that seals the\\n * results of the provided constructor function.\\n *\\n * @param {!Function} ctr The constructor whose results maybe be sealed.\\n * @param {Function} superClass The superclass constructor.\\n * @return {!Function} The replacement constructor.\\n * @private\\n */\\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\\n    // Do now wrap the constructor when sealing is disabled. Angular code\\n    // depends on this for injection to work properly.\\n    return ctr;\\n  }\\n\\n  // Compute whether the constructor is sealable at definition time, rather\\n  // than when the instance is being constructed.\\n  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);\\n\\n  /**\\n   * @this {Object}\\n   * @return {?}\\n   */\\n  var wrappedCtr = function() {\\n    // Don't seal an instance of a subclass when it calls the constructor of\\n    // its super class as there is most likely still setup to do.\\n    var instance = ctr.apply(this, arguments) || this;\\n    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\\n\\n    if (this.constructor === wrappedCtr && superclassSealable &&\\n        Object.seal instanceof Function) {\\n      Object.seal(instance);\\n    }\\n    return instance;\\n  };\\n\\n  return wrappedCtr;\\n};\\n\\n\\n/**\\n * @param {Function} ctr The constructor to test.\\n * @return {boolean} Whether the constructor has been tagged as unsealable\\n *     using goog.tagUnsealableClass.\\n * @private\\n */\\ngoog.defineClass.isUnsealable_ = function(ctr) {\\n  return ctr && ctr.prototype &&\\n      ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];\\n};\\n\\n\\n// TODO(johnlenz): share these values with the goog.object\\n/**\\n * The names of the fields that are defined on Object.prototype.\\n * @type {!Array<string>}\\n * @private\\n * @const\\n */\\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\\n  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\\n  'toLocaleString', 'toString', 'valueOf'\\n];\\n\\n\\n// TODO(johnlenz): share this function with the goog.object\\n/**\\n * @param {!Object} target The object to add properties to.\\n * @param {!Object} source The object to copy properties from.\\n * @private\\n */\\ngoog.defineClass.applyProperties_ = function(target, source) {\\n  // TODO(johnlenz): update this to support ES5 getters/setters\\n\\n  var key;\\n  for (key in source) {\\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\\n      target[key] = source[key];\\n    }\\n  }\\n\\n  // For IE the for-in-loop does not contain any properties that are not\\n  // enumerable on the prototype object (for example isPrototypeOf from\\n  // Object.prototype) and it will also not include 'replace' on objects that\\n  // extend String and change 'replace' (not that it is common for anyone to\\n  // extend anything except Object).\\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\\n      target[key] = source[key];\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Sealing classes breaks the older idiom of assigning properties on the\\n * prototype rather than in the constructor. As such, goog.defineClass\\n * must not seal subclasses of these old-style classes until they are fixed.\\n * Until then, this marks a class as \\\"broken\\\", instructing defineClass\\n * not to seal subclasses.\\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\\n */\\ngoog.tagUnsealableClass = function(ctr) {\\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\\n  }\\n};\\n\\n\\n/**\\n * Name for unsealable tag property.\\n * @const @private {string}\\n */\\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\\n\\n\\n/**\\n * Returns a newly created map from language mode string to a boolean\\n * indicating whether transpilation should be done for that mode.\\n *\\n * Guaranteed invariant:\\n * For any two modes, l1 and l2 where l2 is a newer mode than l1,\\n * `map[l1] == true` implies that `map[l2] == true`.\\n * @private\\n * @return {!Object<string, boolean>}\\n */\\ngoog.createRequiresTranspilation_ = function() {\\n  var /** !Object<string, boolean> */ requiresTranspilation = {'es3': false};\\n  var transpilationRequiredForAllLaterModes = false;\\n\\n  /**\\n   * Adds an entry to requiresTranspliation for the given language mode.\\n   *\\n   * IMPORTANT: Calls must be made in order from oldest to newest language\\n   * mode.\\n   * @param {string} modeName\\n   * @param {function(): boolean} isSupported Returns true if the JS engine\\n   *     supports the given mode.\\n   */\\n  function addNewerLanguageTranspilationCheck(modeName, isSupported) {\\n    if (transpilationRequiredForAllLaterModes) {\\n      requiresTranspilation[modeName] = true;\\n    } else if (isSupported()) {\\n      requiresTranspilation[modeName] = false;\\n    } else {\\n      requiresTranspilation[modeName] = true;\\n      transpilationRequiredForAllLaterModes = true;\\n    }\\n  }\\n\\n  /**\\n   * Does the given code evaluate without syntax errors and return a truthy\\n   * result?\\n   */\\n  function /** boolean */ evalCheck(/** string */ code) {\\n    try {\\n      return !!eval(code);\\n    } catch (ignored) {\\n      return false;\\n    }\\n  }\\n\\n  var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?\\n      goog.global.navigator.userAgent :\\n      '';\\n\\n  // Identify ES3-only browsers by their incorrect treatment of commas.\\n  addNewerLanguageTranspilationCheck('es5', function() {\\n    return evalCheck('[1,].length==1');\\n  });\\n  addNewerLanguageTranspilationCheck('es6', function() {\\n    // Edge has a non-deterministic (i.e., not reproducible) bug with ES6:\\n    // https://github.com/Microsoft/ChakraCore/issues/1496.\\n    var re = /Edge\\\\/(\\\\d+)(\\\\.\\\\d)*/i;\\n    var edgeUserAgent = userAgent.match(re);\\n    if (edgeUserAgent && Number(edgeUserAgent[1]) < 15) {\\n      return false;\\n    }\\n    // Test es6: [FF50 (?), Edge 14 (?), Chrome 50]\\n    //   (a) default params (specifically shadowing locals),\\n    //   (b) destructuring, (c) block-scoped functions,\\n    //   (d) for-of (const), (e) new.target/Reflect.construct\\n    var es6fullTest =\\n        'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}' +\\n        'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof ' +\\n        'String))throw 1;for(const a of[2,3]){if(a==2)continue;function ' +\\n        'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()' +\\n        '==3}';\\n\\n    return evalCheck('(()=>{\\\"use strict\\\";' + es6fullTest + '})()');\\n  });\\n  // TODO(joeltine): Remove es6-impl references for b/31340605.\\n  // Consider es6-impl (widely-implemented es6 features) to be supported\\n  // whenever es6 is supported. Technically es6-impl is a lower level of\\n  // support than es6, but we don't have tests specifically for it.\\n  addNewerLanguageTranspilationCheck('es6-impl', function() {\\n    return true;\\n  });\\n  // ** and **= are the only new features in 'es7'\\n  addNewerLanguageTranspilationCheck('es7', function() {\\n    return evalCheck('2 ** 2 == 4');\\n  });\\n  // async functions are the only new features in 'es8'\\n  addNewerLanguageTranspilationCheck('es8', function() {\\n    return evalCheck('async () => 1, true');\\n  });\\n  return requiresTranspilation;\\n};\\n\"],\n\"names\":[\"COMPILED\",\"goog\",\"global\",\"CLOSURE_UNCOMPILED_DEFINES\",\"CLOSURE_DEFINES\",\"isDef\",\"goog.isDef\",\"val\",\"isString\",\"goog.isString\",\"isBoolean\",\"goog.isBoolean\",\"isNumber\",\"goog.isNumber\",\"exportPath_\",\"goog.exportPath_\",\"name\",\"opt_object\",\"opt_objectToExportTo\",\"parts\",\"split\",\"cur\",\"execScript\",\"part\",\"length\",\"shift\",\"Object\",\"prototype\",\"define\",\"goog.define\",\"defaultValue\",\"value\",\"nodeType\",\"undefined\",\"hasOwnProperty\",\"call\",\"DEBUG\",\"provide\",\"goog.provide\",\"isInModuleLoader_\",\"Error\",\"isProvided_\",\"constructNamespace_\",\"goog.constructNamespace_\",\"opt_obj\",\"implicitNamespaces_\",\"namespace\",\"substring\",\"lastIndexOf\",\"getObjectByName\",\"VALID_MODULE_RE_\",\"module\",\"goog.module\",\"search\",\"moduleLoaderState_\",\"moduleName\",\"get\",\"goog.module.get\",\"getInternal_\",\"goog.module.getInternal_\",\"loadedModules_\",\"ns\",\"goog.isInModuleLoader_\",\"declareLegacyNamespace\",\"goog.module.declareLegacyNamespace\",\"setTestOnly\",\"goog.setTestOnly\",\"opt_message\",\"DISALLOW_TEST_ONLY_CODE\",\"forwardDeclare\",\"goog.forwardDeclare\",\"goog.isProvided_\",\"isDefAndNotNull\",\"goog.getObjectByName\",\"globalize\",\"goog.globalize\",\"obj\",\"opt_global\",\"x\",\"addDependency\",\"goog.addDependency\",\"relPath\",\"provides\",\"requires\",\"opt_loadFlags\",\"DEPENDENCIES_ENABLED\",\"require\",\"path\",\"replace\",\"deps\",\"dependencies_\",\"i\",\"nameToPath\",\"loadFlags\",\"j\",\"logToConsole_\",\"goog.logToConsole_\",\"msg\",\"console\",\"goog.require\",\"ENABLE_DEBUG_LOADER\",\"IS_OLD_IE_\",\"maybeProcessDeferredDep_\",\"getPathFromDeps_\",\"writeScripts_\",\"errorMessage\",\"basePath\",\"CLOSURE_BASE_PATH\",\"CLOSURE_NO_DEPS\",\"CLOSURE_IMPORT_SCRIPT\",\"nullFunction\",\"goog.nullFunction\",\"abstractMethod\",\"goog.abstractMethod\",\"addSingletonGetter\",\"goog.addSingletonGetter\",\"ctor\",\"instance_\",\"getInstance\",\"ctor.getInstance\",\"instantiatedSingletons_\",\"visited\",\"written\",\"deferred\",\"inHtmlDocument_\",\"goog.inHtmlDocument_\",\"doc\",\"document\",\"findBasePath_\",\"goog.findBasePath_\",\"currentScript\",\"scripts\",\"getElementsByTagName\",\"script\",\"src\",\"qmark\",\"l\",\"substr\",\"importScript_\",\"goog.importScript_\",\"opt_sourceText\",\"importScript\",\"writeScriptTag_\",\"atob\",\"all\",\"oldIeWaiting_\",\"importProcessedScript_\",\"goog.importProcessedScript_\",\"isModule\",\"needsTranspile\",\"bootstrap\",\"queuedModules_\",\"wrapModule_\",\"goog.wrapModule_\",\"srcUrl\",\"scriptText\",\"LOAD_MODULE_USING_EVAL\",\"JSON\",\"stringify\",\"loadQueuedModules_\",\"goog.loadQueuedModules_\",\"count\",\"queue\",\"maybeProcessDeferredPath_\",\"goog.maybeProcessDeferredDep_\",\"isDeferredModule_\",\"allDepsAreAvailable_\",\"goog.isDeferredModule_\",\"languageLevel\",\"needsTranspile_\",\"abspath\",\"goog.allDepsAreAvailable_\",\"requireName\",\"goog.maybeProcessDeferredPath_\",\"globalEval\",\"loadModuleFromUrl\",\"goog.loadModuleFromUrl\",\"url\",\"retrieveAndExec_\",\"writeScriptSrcNode_\",\"goog.writeScriptSrcNode_\",\"write\",\"appendScriptSrcNode_\",\"goog.appendScriptSrcNode_\",\"scriptEl\",\"createElement\",\"type\",\"defer\",\"async\",\"head\",\"appendChild\",\"goog.writeScriptTag_\",\"ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING\",\"readyState\",\"isDeps\",\"test\",\"state\",\"lastNonModuleScriptIndex_\",\"protectScriptTag_\",\"goog.protectScriptTag_\",\"str\",\"goog.needsTranspile_\",\"lang\",\"TRANSPILE\",\"requiresTranspilation_\",\"createRequiresTranspilation_\",\"onScriptLoad_\",\"goog.onScriptLoad_\",\"scriptIndex\",\"goog.writeScripts_\",\"pathToLoad\",\"seenScript\",\"visitNode\",\"push\",\"moduleState\",\"goog.getPathFromDeps_\",\"rule\",\"hasBadLetScoping\",\"useSafari10Workaround\",\"goog.useSafari10Workaround\",\"eval\",\"e\",\"workaroundSafari10EvalBug\",\"goog.workaroundSafari10EvalBug\",\"moduleDef\",\"loadModule\",\"goog.loadModule\",\"previousState\",\"exports\",\"isFunction\",\"loadModuleFromSource_\",\"SEAL_MODULE_EXPORTS\",\"seal\",\"arguments\",\"normalizePath_\",\"goog.normalizePath_\",\"components\",\"splice\",\"join\",\"CLOSURE_LOAD_FILE_SYNC\",\"loadFileSync_\",\"goog.loadFileSync_\",\"xhr\",\"open\",\"send\",\"status\",\"responseText\",\"err\",\"goog.retrieveAndExec_\",\"originalPath\",\"transpile_\",\"isOldIE\",\"goog.transpile_\",\"code\",\"jscomp\",\"transpile\",\"transpilerPath\",\"TRANSPILER\",\"transpilerCode\",\"suffix\",\"jscomp.transpile\",\"typeOf\",\"goog.typeOf\",\"s\",\"Array\",\"className\",\"toString\",\"propertyIsEnumerable\",\"isNull\",\"goog.isNull\",\"goog.isDefAndNotNull\",\"isArray\",\"goog.isArray\",\"isArrayLike\",\"goog.isArrayLike\",\"isDateLike\",\"goog.isDateLike\",\"isObject\",\"getFullYear\",\"goog.isFunction\",\"goog.isObject\",\"getUid\",\"goog.getUid\",\"UID_PROPERTY_\",\"uidCounter_\",\"hasUid\",\"goog.hasUid\",\"removeUid\",\"goog.removeUid\",\"removeAttribute\",\"ex\",\"Math\",\"random\",\"getHashCode\",\"removeHashCode\",\"cloneObject\",\"goog.cloneObject\",\"clone\",\"key\",\"bindNative_\",\"goog.bindNative_\",\"fn\",\"selfObj\",\"var_args\",\"apply\",\"bind\",\"bindJs_\",\"goog.bindJs_\",\"boundArgs\",\"slice\",\"newArgs\",\"unshift\",\"goog.bind\",\"Function\",\"indexOf\",\"partial\",\"goog.partial\",\"args\",\"mixin\",\"goog.mixin\",\"target\",\"source\",\"now\",\"TRUSTED_SITE\",\"Date\",\"goog.globalEval\",\"evalWorksForGlobals_\",\"ignore\",\"scriptElt\",\"createTextNode\",\"body\",\"removeChild\",\"cssNameMapping_\",\"cssNameMappingStyle_\",\"CLOSURE_CSS_NAME_MAP_FN\",\"getCssName\",\"goog.getCssName\",\"opt_modifier\",\"String\",\"charAt\",\"getMapping\",\"cssName\",\"renameByParts\",\"mapped\",\"rename\",\"a\",\"result\",\"setCssNameMapping\",\"goog.setCssNameMapping\",\"mapping\",\"opt_style\",\"CLOSURE_CSS_NAME_MAPPING\",\"getMsg\",\"goog.getMsg\",\"opt_values\",\"match\",\"getMsgWithFallback\",\"goog.getMsgWithFallback\",\"b\",\"exportSymbol\",\"goog.exportSymbol\",\"publicPath\",\"object\",\"exportProperty\",\"goog.exportProperty\",\"publicName\",\"symbol\",\"inherits\",\"goog.inherits\",\"childCtor\",\"parentCtor\",\"tempCtor\",\"superClass_\",\"constructor\",\"base\",\"childCtor.base\",\"me\",\"methodName\",\"goog.base\",\"opt_methodName\",\"caller\",\"callee\",\"STRICT_MODE_COMPATIBLE\",\"ctorArgs\",\"foundCaller\",\"scope\",\"goog.scope\",\"defineClass\",\"goog.defineClass\",\"superClass\",\"def\",\"statics\",\"cls\",\"createSealingConstructor_\",\"applyProperties_\",\"ClassDescriptor\",\"goog.defineClass.createSealingConstructor_\",\"ctr\",\"SEAL_CLASS_INSTANCES\",\"superclassSealable\",\"isUnsealable_\",\"wrappedCtr\",\"instance\",\"goog.defineClass.isUnsealable_\",\"UNSEALABLE_CONSTRUCTOR_PROPERTY_\",\"OBJECT_PROTOTYPE_FIELDS_\",\"goog.defineClass.applyProperties_\",\"tagUnsealableClass\",\"goog.tagUnsealableClass\",\"goog.createRequiresTranspilation_\",\"requiresTranspilation\",\"transpilationRequiredForAllLaterModes\",\"addNewerLanguageTranspilationCheck\",\"modeName\",\"isSupported\",\"evalCheck\",\"ignored\",\"userAgent\",\"navigator\",\"re\",\"edgeUserAgent\",\"Number\",\"es6fullTest\"]\n}\n"]