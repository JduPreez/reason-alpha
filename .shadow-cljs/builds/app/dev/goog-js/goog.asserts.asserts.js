["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/asserts/asserts.js"],"~:js","goog.provide(\"goog.asserts\");\ngoog.provide(\"goog.asserts.AssertionError\");\ngoog.require(\"goog.debug.Error\");\ngoog.require(\"goog.dom.NodeType\");\ngoog.require(\"goog.string\");\n/** @define {boolean} */ goog.define(\"goog.asserts.ENABLE_ASSERTS\", goog.DEBUG);\n/**\n * @final\n * @constructor\n * @extends {goog.debug.Error}\n * @param {string} messagePattern\n * @param {!Array<*>} messageArgs\n */\ngoog.asserts.AssertionError = function(messagePattern, messageArgs) {\n  messageArgs.unshift(messagePattern);\n  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));\n  messageArgs.shift();\n  /** @type {string} */ this.messagePattern = messagePattern;\n};\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\n/** @override */ goog.asserts.AssertionError.prototype.name = \"AssertionError\";\n/**\n * @param {!goog.asserts.AssertionError} e\n */\ngoog.asserts.DEFAULT_ERROR_HANDLER = function(e) {\n  throw e;\n};\n/** @private @type {function(!goog.asserts.AssertionError)} */ goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;\n/**\n * @private\n * @param {string} defaultMessage\n * @param {Array<*>} defaultArgs\n * @param {(string|undefined)} givenMessage\n * @param {Array<*>} givenArgs\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  var message = \"Assertion failed\";\n  if (givenMessage) {\n    message += \": \" + givenMessage;\n    var args = givenArgs;\n  } else {\n    if (defaultMessage) {\n      message += \": \" + defaultMessage;\n      args = defaultArgs;\n    }\n  }\n  var e = new goog.asserts.AssertionError(\"\" + message, args || []);\n  goog.asserts.errorHandler_(e);\n};\n/**\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\ngoog.asserts.setErrorHandler = function(errorHandler) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_ = errorHandler;\n  }\n};\n/**\n * @param {T} condition\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {T}\n * @throws {goog.asserts.AssertionError}\n * @template T\n */\ngoog.asserts.assert = function(condition, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !condition) {\n    goog.asserts.doAssertFailure_(\"\", null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n/**\n * @param {string=} opt_message\n * @param {...*} var_args\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.fail = function(opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_(new goog.asserts.AssertionError(\"Failure\" + (opt_message ? \": \" + opt_message : \"\"), Array.prototype.slice.call(arguments, 1)));\n  }\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {number}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertNumber = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    goog.asserts.doAssertFailure_(\"Expected number but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {number} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {string}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertString = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {\n    goog.asserts.doAssertFailure_(\"Expected string but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {string} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {!Function}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertFunction = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    goog.asserts.doAssertFailure_(\"Expected function but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {!Function} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {!Object}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertObject = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {\n    goog.asserts.doAssertFailure_(\"Expected object but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {!Object} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {!Array<?>}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertArray = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {\n    goog.asserts.doAssertFailure_(\"Expected array but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {!Array<?>} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {boolean}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertBoolean = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    goog.asserts.doAssertFailure_(\"Expected boolean but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {boolean} */ (value));\n};\n/**\n * @param {*} value\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {!Element}\n * @throws {goog.asserts.AssertionError}\n */\ngoog.asserts.assertElement = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    goog.asserts.doAssertFailure_(\"Expected Element but got %s: %s.\", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return (/** @type {!Element} */ (value));\n};\n/**\n * @param {?} value\n * @param {function(new:T,...)} type\n * @param {string=} opt_message\n * @param {...*} var_args\n * @return {T}\n * @throws {goog.asserts.AssertionError}\n * @template T\n */\ngoog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {\n    goog.asserts.doAssertFailure_(\"Expected instanceof %s but got %s.\", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\ngoog.asserts.assertObjectPrototypeIsIntact = function() {\n  for (var key in Object.prototype) {\n    goog.asserts.fail(key + \" should not be enumerable in Object.prototype.\");\n  }\n};\n/**\n * @private\n * @param {*} value\n * @return {string}\n */\ngoog.asserts.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || \"unknown type name\";\n  } else {\n    if (value instanceof Object) {\n      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);\n    } else {\n      return value === null ? \"null\" : typeof value;\n    }\n  }\n};\n","~:source","// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\ngoog.provide('goog.asserts');\ngoog.provide('goog.asserts.AssertionError');\n\ngoog.require('goog.debug.Error');\ngoog.require('goog.dom.NodeType');\ngoog.require('goog.string');\n\n\n/**\n * @define {boolean} Whether to strip out asserts or to leave them in.\n */\ngoog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);\n\n\n\n/**\n * Error object for failed assertions.\n * @param {string} messagePattern The pattern that was used to form message.\n * @param {!Array<*>} messageArgs The items to substitute into the pattern.\n * @constructor\n * @extends {goog.debug.Error}\n * @final\n */\ngoog.asserts.AssertionError = function(messagePattern, messageArgs) {\n  messageArgs.unshift(messagePattern);\n  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));\n  // Remove the messagePattern afterwards to avoid permanently modifying the\n  // passed in array.\n  messageArgs.shift();\n\n  /**\n   * The message pattern used to format the error message. Error handlers can\n   * use this to uniquely identify the assertion.\n   * @type {string}\n   */\n  this.messagePattern = messagePattern;\n};\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\n\n\n/** @override */\ngoog.asserts.AssertionError.prototype.name = 'AssertionError';\n\n\n/**\n * The default error handler.\n * @param {!goog.asserts.AssertionError} e The exception to be handled.\n */\ngoog.asserts.DEFAULT_ERROR_HANDLER = function(e) {\n  throw e;\n};\n\n\n/**\n * The handler responsible for throwing or logging assertion errors.\n * @private {function(!goog.asserts.AssertionError)}\n */\ngoog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;\n\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\ngoog.asserts.doAssertFailure_ = function(\n    defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  var message = 'Assertion failed';\n  if (givenMessage) {\n    message += ': ' + givenMessage;\n    var args = givenArgs;\n  } else if (defaultMessage) {\n    message += ': ' + defaultMessage;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  var e = new goog.asserts.AssertionError('' + message, args || []);\n  goog.asserts.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\ngoog.asserts.setErrorHandler = function(errorHandler) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\ngoog.asserts.assert = function(condition, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !condition) {\n    goog.asserts.doAssertFailure_(\n        '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\ngoog.asserts.fail = function(opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_(\n        new goog.asserts.AssertionError(\n            'Failure' + (opt_message ? ': ' + opt_message : ''),\n            Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\ngoog.asserts.assertNumber = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected number but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\ngoog.asserts.assertString = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected string but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\ngoog.asserts.assertFunction = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected function but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\ngoog.asserts.assertObject = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected object but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\ngoog.asserts.assertArray = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected array but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\ngoog.asserts.assertBoolean = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\ngoog.asserts.assertElement = function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    goog.asserts.doAssertFailure_(\n        'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\ngoog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {\n    goog.asserts.doAssertFailure_(\n        'Expected instanceof %s but got %s.',\n        [goog.asserts.getType_(type), goog.asserts.getType_(value)],\n        opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\ngoog.asserts.assertObjectPrototypeIsIntact = function() {\n  for (var key in Object.prototype) {\n    goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\ngoog.asserts.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n","~:compiled-at",1574163695951,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.asserts.asserts.js\",\n\"lineCount\":210,\n\"mappings\":\"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\",\n\"sources\":[\"goog/asserts/asserts.js\"],\n\"sourcesContent\":[\"// Copyright 2008 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Utilities to check the preconditions, postconditions and\\n * invariants runtime.\\n *\\n * Methods in this package should be given special treatment by the compiler\\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\\n * will restrict <code>foo</code> to a truthy value.\\n *\\n * The compiler has an option to disable asserts. So code like:\\n * <code>\\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\\n * </code>\\n * will be transformed into:\\n * <code>\\n * var x = foo();\\n * </code>\\n * The compiler will leave in foo() (because its return value is used),\\n * but it will remove bar() because it assumes it does not have side-effects.\\n *\\n * @author agrieve@google.com (Andrew Grieve)\\n */\\n\\ngoog.provide('goog.asserts');\\ngoog.provide('goog.asserts.AssertionError');\\n\\ngoog.require('goog.debug.Error');\\ngoog.require('goog.dom.NodeType');\\ngoog.require('goog.string');\\n\\n\\n/**\\n * @define {boolean} Whether to strip out asserts or to leave them in.\\n */\\ngoog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);\\n\\n\\n\\n/**\\n * Error object for failed assertions.\\n * @param {string} messagePattern The pattern that was used to form message.\\n * @param {!Array<*>} messageArgs The items to substitute into the pattern.\\n * @constructor\\n * @extends {goog.debug.Error}\\n * @final\\n */\\ngoog.asserts.AssertionError = function(messagePattern, messageArgs) {\\n  messageArgs.unshift(messagePattern);\\n  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));\\n  // Remove the messagePattern afterwards to avoid permanently modifying the\\n  // passed in array.\\n  messageArgs.shift();\\n\\n  /**\\n   * The message pattern used to format the error message. Error handlers can\\n   * use this to uniquely identify the assertion.\\n   * @type {string}\\n   */\\n  this.messagePattern = messagePattern;\\n};\\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\\n\\n\\n/** @override */\\ngoog.asserts.AssertionError.prototype.name = 'AssertionError';\\n\\n\\n/**\\n * The default error handler.\\n * @param {!goog.asserts.AssertionError} e The exception to be handled.\\n */\\ngoog.asserts.DEFAULT_ERROR_HANDLER = function(e) {\\n  throw e;\\n};\\n\\n\\n/**\\n * The handler responsible for throwing or logging assertion errors.\\n * @private {function(!goog.asserts.AssertionError)}\\n */\\ngoog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;\\n\\n\\n/**\\n * Throws an exception with the given message and \\\"Assertion failed\\\" prefixed\\n * onto it.\\n * @param {string} defaultMessage The message to use if givenMessage is empty.\\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\\n * @param {string|undefined} givenMessage Message supplied by the caller.\\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\\n * @throws {goog.asserts.AssertionError} When the value is not a number.\\n * @private\\n */\\ngoog.asserts.doAssertFailure_ = function(\\n    defaultMessage, defaultArgs, givenMessage, givenArgs) {\\n  var message = 'Assertion failed';\\n  if (givenMessage) {\\n    message += ': ' + givenMessage;\\n    var args = givenArgs;\\n  } else if (defaultMessage) {\\n    message += ': ' + defaultMessage;\\n    args = defaultArgs;\\n  }\\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\\n  // a stack trace is added to var message above. With this, a stack trace is\\n  // not added until this line (it causes the extra garbage to be added after\\n  // the assertion message instead of in the middle of it).\\n  var e = new goog.asserts.AssertionError('' + message, args || []);\\n  goog.asserts.errorHandler_(e);\\n};\\n\\n\\n/**\\n * Sets a custom error handler that can be used to customize the behavior of\\n * assertion failures, for example by turning all assertion failures into log\\n * messages.\\n * @param {function(!goog.asserts.AssertionError)} errorHandler\\n */\\ngoog.asserts.setErrorHandler = function(errorHandler) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    goog.asserts.errorHandler_ = errorHandler;\\n  }\\n};\\n\\n\\n/**\\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\\n * true.\\n * @template T\\n * @param {T} condition The condition to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {T} The value of the condition.\\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\\n */\\ngoog.asserts.assert = function(condition, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !condition) {\\n    goog.asserts.doAssertFailure_(\\n        '', null, opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return condition;\\n};\\n\\n\\n/**\\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\\n * when we want to add a check in the unreachable area like switch-case\\n * statement:\\n *\\n * <pre>\\n *  switch(type) {\\n *    case FOO: doSomething(); break;\\n *    case BAR: doSomethingElse(); break;\\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\\n *      // We have only 2 types - \\\"default:\\\" section is unreachable code.\\n *  }\\n * </pre>\\n *\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @throws {goog.asserts.AssertionError} Failure.\\n */\\ngoog.asserts.fail = function(opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    goog.asserts.errorHandler_(\\n        new goog.asserts.AssertionError(\\n            'Failure' + (opt_message ? ': ' + opt_message : ''),\\n            Array.prototype.slice.call(arguments, 1)));\\n  }\\n};\\n\\n\\n/**\\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {number} The value, guaranteed to be a number when asserts enabled.\\n * @throws {goog.asserts.AssertionError} When the value is not a number.\\n */\\ngoog.asserts.assertNumber = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected number but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {number} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {string} The value, guaranteed to be a string when asserts enabled.\\n * @throws {goog.asserts.AssertionError} When the value is not a string.\\n */\\ngoog.asserts.assertString = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected string but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {string} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {!Function} The value, guaranteed to be a function when asserts\\n *     enabled.\\n * @throws {goog.asserts.AssertionError} When the value is not a function.\\n */\\ngoog.asserts.assertFunction = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected function but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {!Function} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {!Object} The value, guaranteed to be a non-null object.\\n * @throws {goog.asserts.AssertionError} When the value is not an object.\\n */\\ngoog.asserts.assertObject = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected object but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {!Object} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\\n * @throws {goog.asserts.AssertionError} When the value is not an array.\\n */\\ngoog.asserts.assertArray = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected array but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {!Array<?>} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\\n *     enabled.\\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\\n */\\ngoog.asserts.assertBoolean = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {boolean} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\\n * @param {*} value The value to check.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @return {!Element} The value, likely to be a DOM Element when asserts are\\n *     enabled.\\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\\n */\\ngoog.asserts.assertElement = function(value, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS &&\\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected Element but got %s: %s.', [goog.typeOf(value), value],\\n        opt_message, Array.prototype.slice.call(arguments, 2));\\n  }\\n  return /** @type {!Element} */ (value);\\n};\\n\\n\\n/**\\n * Checks if the value is an instance of the user-defined type if\\n * goog.asserts.ENABLE_ASSERTS is true.\\n *\\n * The compiler may tighten the type returned by this function.\\n *\\n * @param {?} value The value to check.\\n * @param {function(new: T, ...)} type A user-defined constructor.\\n * @param {string=} opt_message Error message in case of failure.\\n * @param {...*} var_args The items to substitute into the failure message.\\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\\n *     type.\\n * @return {T}\\n * @template T\\n */\\ngoog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {\\n  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {\\n    goog.asserts.doAssertFailure_(\\n        'Expected instanceof %s but got %s.',\\n        [goog.asserts.getType_(type), goog.asserts.getType_(value)],\\n        opt_message, Array.prototype.slice.call(arguments, 3));\\n  }\\n  return value;\\n};\\n\\n\\n/**\\n * Checks that no enumerable keys are present in Object.prototype. Such keys\\n * would break most code that use {@code for (var ... in ...)} loops.\\n */\\ngoog.asserts.assertObjectPrototypeIsIntact = function() {\\n  for (var key in Object.prototype) {\\n    goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');\\n  }\\n};\\n\\n\\n/**\\n * Returns the type of a value. If a constructor is passed, and a suitable\\n * string cannot be found, 'unknown type name' will be returned.\\n * @param {*} value A constructor, object, or primitive.\\n * @return {string} The best display name for the value, or 'unknown type name'.\\n * @private\\n */\\ngoog.asserts.getType_ = function(value) {\\n  if (value instanceof Function) {\\n    return value.displayName || value.name || 'unknown type name';\\n  } else if (value instanceof Object) {\\n    return value.constructor.displayName || value.constructor.name ||\\n        Object.prototype.toString.call(value);\\n  } else {\\n    return value === null ? 'null' : typeof value;\\n  }\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"define\",\"DEBUG\",\"asserts\",\"AssertionError\",\"goog.asserts.AssertionError\",\"messagePattern\",\"messageArgs\",\"unshift\",\"debug\",\"Error\",\"call\",\"string\",\"subs\",\"apply\",\"shift\",\"inherits\",\"prototype\",\"name\",\"DEFAULT_ERROR_HANDLER\",\"goog.asserts.DEFAULT_ERROR_HANDLER\",\"e\",\"errorHandler_\",\"doAssertFailure_\",\"goog.asserts.doAssertFailure_\",\"defaultMessage\",\"defaultArgs\",\"givenMessage\",\"givenArgs\",\"message\",\"args\",\"setErrorHandler\",\"goog.asserts.setErrorHandler\",\"errorHandler\",\"ENABLE_ASSERTS\",\"assert\",\"goog.asserts.assert\",\"condition\",\"opt_message\",\"var_args\",\"Array\",\"slice\",\"arguments\",\"fail\",\"goog.asserts.fail\",\"assertNumber\",\"goog.asserts.assertNumber\",\"value\",\"isNumber\",\"typeOf\",\"assertString\",\"goog.asserts.assertString\",\"isString\",\"assertFunction\",\"goog.asserts.assertFunction\",\"isFunction\",\"assertObject\",\"goog.asserts.assertObject\",\"isObject\",\"assertArray\",\"goog.asserts.assertArray\",\"isArray\",\"assertBoolean\",\"goog.asserts.assertBoolean\",\"isBoolean\",\"assertElement\",\"goog.asserts.assertElement\",\"nodeType\",\"dom\",\"NodeType\",\"ELEMENT\",\"assertInstanceof\",\"goog.asserts.assertInstanceof\",\"type\",\"getType_\",\"assertObjectPrototypeIsIntact\",\"goog.asserts.assertObjectPrototypeIsIntact\",\"key\",\"Object\",\"goog.asserts.getType_\",\"Function\",\"displayName\",\"constructor\",\"toString\"]\n}\n"]