["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/i18n/datetimeformat.js"],"~:js","goog.provide(\"goog.i18n.DateTimeFormat\");\ngoog.provide(\"goog.i18n.DateTimeFormat.Format\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.date\");\ngoog.require(\"goog.i18n.DateTimeSymbols\");\ngoog.require(\"goog.i18n.TimeZone\");\ngoog.require(\"goog.string\");\n/**\n * @final\n * @constructor\n * @param {(string|number)} pattern\n * @param {!Object=} opt_dateTimeSymbols\n */\ngoog.i18n.DateTimeFormat = function(pattern, opt_dateTimeSymbols) {\n  goog.asserts.assert(goog.isDef(pattern), \"Pattern must be defined\");\n  goog.asserts.assert(goog.isDef(opt_dateTimeSymbols) || goog.isDef(goog.i18n.DateTimeSymbols), \"goog.i18n.DateTimeSymbols or explicit symbols must be defined\");\n  this.patternParts_ = [];\n  /** @private @type {!goog.i18n.DateTimeSymbolsType} */ this.dateTimeSymbols_ = /** @type {!goog.i18n.DateTimeSymbolsType} */ (opt_dateTimeSymbols || goog.i18n.DateTimeSymbols);\n  if (typeof pattern == \"number\") {\n    this.applyStandardPattern_(pattern);\n  } else {\n    this.applyPattern_(pattern);\n  }\n};\n/** @enum {number} */ goog.i18n.DateTimeFormat.Format = {FULL_DATE:0, LONG_DATE:1, MEDIUM_DATE:2, SHORT_DATE:3, FULL_TIME:4, LONG_TIME:5, MEDIUM_TIME:6, SHORT_TIME:7, FULL_DATETIME:8, LONG_DATETIME:9, MEDIUM_DATETIME:10, SHORT_DATETIME:11};\n/** @private @type {Array<RegExp>} */ goog.i18n.DateTimeFormat.TOKENS_ = [/^'(?:[^']|'')*('|$)/, /^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|V+|w+|z+|Z+)/, /^[^'GyMkSEahKHcLQdmsvVwzZ]+/];\n/** @private @enum {number} */ goog.i18n.DateTimeFormat.PartTypes_ = {QUOTED_STRING:0, FIELD:1, LITERAL:2};\n/**\n * @private\n * @param {!goog.date.DateLike} date\n * @return {number}\n */\ngoog.i18n.DateTimeFormat.getHours_ = function(date) {\n  return date.getHours ? date.getHours() : 0;\n};\n/**\n * @private\n * @param {string} pattern\n */\ngoog.i18n.DateTimeFormat.prototype.applyPattern_ = function(pattern) {\n  if (goog.i18n.DateTimeFormat.removeRlmInPatterns_) {\n    pattern = pattern.replace(/\\u200f/g, \"\");\n  }\n  while (pattern) {\n    var previousPattern = pattern;\n    for (var i = 0; i < goog.i18n.DateTimeFormat.TOKENS_.length; ++i) {\n      var m = pattern.match(goog.i18n.DateTimeFormat.TOKENS_[i]);\n      if (m) {\n        var part = m[0];\n        pattern = pattern.substring(part.length);\n        if (i == goog.i18n.DateTimeFormat.PartTypes_.QUOTED_STRING) {\n          if (part == \"''\") {\n            part = \"'\";\n          } else {\n            part = part.substring(1, m[1] == \"'\" ? part.length - 1 : part.length);\n            part = part.replace(/''/g, \"'\");\n          }\n        }\n        this.patternParts_.push({text:part, type:i});\n        break;\n      }\n    }\n    if (previousPattern === pattern) {\n      throw new Error(\"Malformed pattern part: \" + pattern);\n    }\n  }\n};\n/**\n * @param {goog.date.DateLike} date\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.format = function(date, opt_timeZone) {\n  if (!date) {\n    throw Error(\"The date to format must be non-null.\");\n  }\n  var diff = opt_timeZone ? (date.getTimezoneOffset() - opt_timeZone.getOffset(date)) * 60000 : 0;\n  var dateForDate = diff ? new Date(date.getTime() + diff) : date;\n  var dateForTime = dateForDate;\n  if (opt_timeZone && dateForDate.getTimezoneOffset() != date.getTimezoneOffset()) {\n    var dstDiff = (dateForDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;\n    dateForDate = new Date(dateForDate.getTime() + dstDiff);\n    diff += diff > 0 ? -goog.date.MS_PER_DAY : goog.date.MS_PER_DAY;\n    dateForTime = new Date(date.getTime() + diff);\n  }\n  var out = [];\n  for (var i = 0; i < this.patternParts_.length; ++i) {\n    var text = this.patternParts_[i].text;\n    if (goog.i18n.DateTimeFormat.PartTypes_.FIELD == this.patternParts_[i].type) {\n      out.push(this.formatField_(text, date, dateForDate, dateForTime, opt_timeZone));\n    } else {\n      out.push(text);\n    }\n  }\n  return out.join(\"\");\n};\n/**\n * @private\n * @param {number} formatType\n */\ngoog.i18n.DateTimeFormat.prototype.applyStandardPattern_ = function(formatType) {\n  var pattern;\n  if (formatType < 4) {\n    pattern = this.dateTimeSymbols_.DATEFORMATS[formatType];\n  } else {\n    if (formatType < 8) {\n      pattern = this.dateTimeSymbols_.TIMEFORMATS[formatType - 4];\n    } else {\n      if (formatType < 12) {\n        pattern = this.dateTimeSymbols_.DATETIMEFORMATS[formatType - 8];\n        pattern = pattern.replace(\"{1}\", this.dateTimeSymbols_.DATEFORMATS[formatType - 8]);\n        pattern = pattern.replace(\"{0}\", this.dateTimeSymbols_.TIMEFORMATS[formatType - 8]);\n      } else {\n        this.applyStandardPattern_(goog.i18n.DateTimeFormat.Format.MEDIUM_DATETIME);\n        return;\n      }\n    }\n  }\n  this.applyPattern_(pattern);\n};\n/**\n * @private\n * @param {string} input\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.localizeNumbers_ = function(input) {\n  return goog.i18n.DateTimeFormat.localizeNumbers(input, this.dateTimeSymbols_);\n};\n/** @private @type {boolean} */ goog.i18n.DateTimeFormat.enforceAsciiDigits_ = false;\n/** @private @type {boolean} */ goog.i18n.DateTimeFormat.removeRlmInPatterns_ = false;\n/**\n * @param {boolean} enforceAsciiDigits\n */\ngoog.i18n.DateTimeFormat.setEnforceAsciiDigits = function(enforceAsciiDigits) {\n  goog.i18n.DateTimeFormat.enforceAsciiDigits_ = enforceAsciiDigits;\n  goog.i18n.DateTimeFormat.removeRlmInPatterns_ = enforceAsciiDigits;\n};\n/**\n * @return {boolean}\n */\ngoog.i18n.DateTimeFormat.isEnforceAsciiDigits = function() {\n  return goog.i18n.DateTimeFormat.enforceAsciiDigits_;\n};\n/**\n * @param {(number|string)} input\n * @param {!Object=} opt_dateTimeSymbols\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.localizeNumbers = function(input, opt_dateTimeSymbols) {\n  input = String(input);\n  var dateTimeSymbols = opt_dateTimeSymbols || goog.i18n.DateTimeSymbols;\n  if (dateTimeSymbols.ZERODIGIT === undefined || goog.i18n.DateTimeFormat.enforceAsciiDigits_) {\n    return input;\n  }\n  var parts = [];\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n    parts.push(48 <= c && c <= 57 ? String.fromCharCode(dateTimeSymbols.ZERODIGIT + c - 48) : input.charAt(i));\n  }\n  return parts.join(\"\");\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatEra_ = function(count, date) {\n  var value = date.getFullYear() > 0 ? 1 : 0;\n  return count >= 4 ? this.dateTimeSymbols_.ERANAMES[value] : this.dateTimeSymbols_.ERAS[value];\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatYear_ = function(count, date) {\n  var value = date.getFullYear();\n  if (value < 0) {\n    value = -value;\n  }\n  if (count == 2) {\n    value = value % 100;\n  }\n  return this.localizeNumbers_(goog.string.padNumber(value, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatMonth_ = function(count, date) {\n  var value = date.getMonth();\n  switch(count) {\n    case 5:\n      return this.dateTimeSymbols_.NARROWMONTHS[value];\n    case 4:\n      return this.dateTimeSymbols_.MONTHS[value];\n    case 3:\n      return this.dateTimeSymbols_.SHORTMONTHS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\n  }\n};\n/**\n * @private\n * @param {!goog.date.DateLike} date\n */\ngoog.i18n.DateTimeFormat.validateDateHasTime_ = function(date) {\n  if (date.getHours && date.getSeconds && date.getMinutes) {\n    return;\n  }\n  throw Error(\"The date to format has no time (probably a goog.date.Date). \" + \"Use Date or goog.date.DateTime, or use a pattern without time fields.\");\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.format24Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) || 24;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatFractionalSeconds_ = function(count, date) {\n  var value = date.getTime() % 1000 / 1000;\n  return this.localizeNumbers_(value.toFixed(Math.min(3, count)).substr(2) + (count > 3 ? goog.string.padNumber(0, count - 3) : \"\"));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatDayOfWeek_ = function(count, date) {\n  var value = date.getDay();\n  return count >= 4 ? this.dateTimeSymbols_.WEEKDAYS[value] : this.dateTimeSymbols_.SHORTWEEKDAYS[value];\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatAmPm_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\n  return this.dateTimeSymbols_.AMPMS[hours >= 12 && hours < 24 ? 1 : 0];\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.format1To12Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12 || 12;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.format0To11Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.format0To23Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneDay_ = function(count, date) {\n  var value = date.getDay();\n  switch(count) {\n    case 5:\n      return this.dateTimeSymbols_.STANDALONENARROWWEEKDAYS[value];\n    case 4:\n      return this.dateTimeSymbols_.STANDALONEWEEKDAYS[value];\n    case 3:\n      return this.dateTimeSymbols_.STANDALONESHORTWEEKDAYS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value, 1));\n  }\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneMonth_ = function(count, date) {\n  var value = date.getMonth();\n  switch(count) {\n    case 5:\n      return this.dateTimeSymbols_.STANDALONENARROWMONTHS[value];\n    case 4:\n      return this.dateTimeSymbols_.STANDALONEMONTHS[value];\n    case 3:\n      return this.dateTimeSymbols_.STANDALONESHORTMONTHS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\n  }\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatQuarter_ = function(count, date) {\n  var value = Math.floor(date.getMonth() / 3);\n  return count < 4 ? this.dateTimeSymbols_.SHORTQUARTERS[value] : this.dateTimeSymbols_.QUARTERS[value];\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatDate_ = function(count, date) {\n  return this.localizeNumbers_(goog.string.padNumber(date.getDate(), count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatMinutes_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  return this.localizeNumbers_(goog.string.padNumber(/** @type {!goog.date.DateTime} */ (date).getMinutes(), count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatSeconds_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  return this.localizeNumbers_(goog.string.padNumber(/** @type {!goog.date.DateTime} */ (date).getSeconds(), count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatWeekOfYear_ = function(count, date) {\n  var weekNum = goog.date.getWeekNumber(date.getFullYear(), date.getMonth(), date.getDate(), this.dateTimeSymbols_.FIRSTWEEKCUTOFFDAY, this.dateTimeSymbols_.FIRSTDAYOFWEEK);\n  return this.localizeNumbers_(goog.string.padNumber(weekNum, count));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneRFC_ = function(count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone || goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return count < 4 ? opt_timeZone.getRFCTimeZoneString(date) : this.localizeNumbers_(opt_timeZone.getGMTString(date));\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZone_ = function(count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone || goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return count < 4 ? opt_timeZone.getShortName(date) : opt_timeZone.getLongName(date);\n};\n/**\n * @private\n * @param {!goog.date.DateLike} date\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneId_ = function(date, opt_timeZone) {\n  opt_timeZone = opt_timeZone || goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return opt_timeZone.getTimeZoneId();\n};\n/**\n * @private\n * @param {number} count\n * @param {!goog.date.DateLike} date\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneLocationId_ = function(count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone || goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return count <= 2 ? opt_timeZone.getTimeZoneId() : opt_timeZone.getGenericLocation(date);\n};\n/**\n * @private\n * @param {string} patternStr\n * @param {!goog.date.DateLike} date\n * @param {!goog.date.DateLike} dateForDate\n * @param {!goog.date.DateLike} dateForTime\n * @param {goog.i18n.TimeZone=} opt_timeZone\n * @return {string}\n */\ngoog.i18n.DateTimeFormat.prototype.formatField_ = function(patternStr, date, dateForDate, dateForTime, opt_timeZone) {\n  var count = patternStr.length;\n  switch(patternStr.charAt(0)) {\n    case \"G\":\n      return this.formatEra_(count, dateForDate);\n    case \"y\":\n      return this.formatYear_(count, dateForDate);\n    case \"M\":\n      return this.formatMonth_(count, dateForDate);\n    case \"k\":\n      return this.format24Hours_(count, dateForTime);\n    case \"S\":\n      return this.formatFractionalSeconds_(count, dateForTime);\n    case \"E\":\n      return this.formatDayOfWeek_(count, dateForDate);\n    case \"a\":\n      return this.formatAmPm_(count, dateForTime);\n    case \"h\":\n      return this.format1To12Hours_(count, dateForTime);\n    case \"K\":\n      return this.format0To11Hours_(count, dateForTime);\n    case \"H\":\n      return this.format0To23Hours_(count, dateForTime);\n    case \"c\":\n      return this.formatStandaloneDay_(count, dateForDate);\n    case \"L\":\n      return this.formatStandaloneMonth_(count, dateForDate);\n    case \"Q\":\n      return this.formatQuarter_(count, dateForDate);\n    case \"d\":\n      return this.formatDate_(count, dateForDate);\n    case \"m\":\n      return this.formatMinutes_(count, dateForTime);\n    case \"s\":\n      return this.formatSeconds_(count, dateForTime);\n    case \"v\":\n      return this.formatTimeZoneId_(date, opt_timeZone);\n    case \"V\":\n      return this.formatTimeZoneLocationId_(count, date, opt_timeZone);\n    case \"w\":\n      return this.formatWeekOfYear_(count, dateForTime);\n    case \"z\":\n      return this.formatTimeZone_(count, date, opt_timeZone);\n    case \"Z\":\n      return this.formatTimeZoneRFC_(count, date, opt_timeZone);\n    default:\n      return \"\";\n  }\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions for dealing with date/time formatting.\n */\n\n\n/**\n * Namespace for i18n date/time formatting functions\n */\ngoog.provide('goog.i18n.DateTimeFormat');\ngoog.provide('goog.i18n.DateTimeFormat.Format');\n\ngoog.require('goog.asserts');\ngoog.require('goog.date');\ngoog.require('goog.i18n.DateTimeSymbols');\ngoog.require('goog.i18n.TimeZone');\ngoog.require('goog.string');\n\n\n/**\n * Datetime formatting functions following the pattern specification as defined\n * in JDK, ICU and CLDR, with minor modification for typical usage in JS.\n * Pattern specification:\n * {@link http://userguide.icu-project.org/formatparse/datetime}\n * <pre>\n * Symbol   Meaning                    Presentation       Example\n * ------   -------                    ------------       -------\n * G#       era designator             (Text)             AD\n * y#       year                       (Number)           1996\n * Y*       year (week of year)        (Number)           1997\n * u*       extended year              (Number)           4601\n * Q#       quarter                    (Text)             Q3 & 3rd quarter\n * M        month in year              (Text & Number)    July & 07\n * L        month in year (standalone) (Text & Number)    July & 07\n * d        day in month               (Number)           10\n * h        hour in am/pm (1~12)       (Number)           12\n * H        hour in day (0~23)         (Number)           0\n * m        minute in hour             (Number)           30\n * s        second in minute           (Number)           55\n * S        fractional second          (Number)           978\n * E#       day of week                (Text)             Tue & Tuesday\n * e*       day of week (local 1~7)    (Number)           2\n * c#       day of week (standalone)   (Text & Number)    2 & Tues & Tuesday & T\n * D*       day in year                (Number)           189\n * F*       day of week in month       (Number)           2 (2nd Wed in July)\n * w        week in year               (Number)           27\n * W*       week in month              (Number)           2\n * a        am/pm marker               (Text)             PM\n * k        hour in day (1~24)         (Number)           24\n * K        hour in am/pm (0~11)       (Number)           0\n * z        time zone                  (Text)             Pacific Standard Time\n * Z#       time zone (RFC 822)        (Number)           -0800\n * v#       time zone (generic)        (Text)             America/Los_Angeles\n * V#       time zone                  (Text)             Los Angeles Time\n * g*       Julian day                 (Number)           2451334\n * A*       milliseconds in day        (Number)           69540000\n * '        escape for text            (Delimiter)        'Date='\n * ''       single quote               (Literal)          'o''clock'\n *\n * Item marked with '*' are not supported yet.\n * Item marked with '#' works different than java\n *\n * The count of pattern letters determine the format.\n * (Text): 4 or more, use full form, <4, use short or abbreviated form if it\n * exists. (e.g., \"EEEE\" produces \"Monday\", \"EEE\" produces \"Mon\")\n *\n * (Number): the minimum number of digits. Shorter numbers are zero-padded to\n * this amount (e.g. if \"m\" produces \"6\", \"mm\" produces \"06\"). Year is handled\n * specially; that is, if the count of 'y' is 2, the Year will be truncated to\n * 2 digits. (e.g., if \"yyyy\" produces \"1997\", \"yy\" produces \"97\".) Unlike other\n * fields, fractional seconds are padded on the right with zero.\n *\n * :(Text & Number) 3 or over, use text, otherwise use number. (e.g., \"M\"\n * produces \"1\", \"MM\" produces \"01\", \"MMM\" produces \"Jan\", and \"MMMM\" produces\n * \"January\".)\n *\n * Any characters in the pattern that are not in the ranges of ['a'..'z'] and\n * ['A'..'Z'] will be treated as quoted text. For instance, characters like ':',\n * '.', ' ', '#' and '@' will appear in the resulting time text even they are\n * not embraced within single quotes.\n * </pre>\n */\n\n/**\n * Construct a DateTimeFormat object based on current locale.\n * @constructor\n * @param {string|number} pattern pattern specification or pattern type.\n * @param {!Object=} opt_dateTimeSymbols Optional symbols to use for this\n *     instance rather than the global symbols.\n * @final\n */\ngoog.i18n.DateTimeFormat = function(pattern, opt_dateTimeSymbols) {\n  goog.asserts.assert(goog.isDef(pattern), 'Pattern must be defined');\n  goog.asserts.assert(\n      goog.isDef(opt_dateTimeSymbols) || goog.isDef(goog.i18n.DateTimeSymbols),\n      'goog.i18n.DateTimeSymbols or explicit symbols must be defined');\n\n  this.patternParts_ = [];\n\n  /**\n   * Data structure that with all the locale info needed for date formatting.\n   * (day/month names, most common patterns, rules for week-end, etc.)\n   * @private {!goog.i18n.DateTimeSymbolsType}\n   */\n  this.dateTimeSymbols_ = /** @type {!goog.i18n.DateTimeSymbolsType} */ (\n      opt_dateTimeSymbols || goog.i18n.DateTimeSymbols);\n  if (typeof pattern == 'number') {\n    this.applyStandardPattern_(pattern);\n  } else {\n    this.applyPattern_(pattern);\n  }\n};\n\n\n/**\n * Enum to identify predefined Date/Time format pattern.\n * @enum {number}\n */\ngoog.i18n.DateTimeFormat.Format = {\n  FULL_DATE: 0,\n  LONG_DATE: 1,\n  MEDIUM_DATE: 2,\n  SHORT_DATE: 3,\n  FULL_TIME: 4,\n  LONG_TIME: 5,\n  MEDIUM_TIME: 6,\n  SHORT_TIME: 7,\n  FULL_DATETIME: 8,\n  LONG_DATETIME: 9,\n  MEDIUM_DATETIME: 10,\n  SHORT_DATETIME: 11\n};\n\n\n/**\n * regular expression pattern for parsing pattern string\n * @type {Array<RegExp>}\n * @private\n */\ngoog.i18n.DateTimeFormat.TOKENS_ = [\n  // quote string\n  /^\\'(?:[^\\']|\\'\\')*(\\'|$)/,\n  // pattern chars\n  /^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|V+|w+|z+|Z+)/,\n  // and all the other chars\n  /^[^\\'GyMkSEahKHcLQdmsvVwzZ]+/  // and all the other chars\n];\n\n\n/**\n * These are token types, corresponding to above token definitions.\n * @enum {number}\n * @private\n */\ngoog.i18n.DateTimeFormat.PartTypes_ = {\n  QUOTED_STRING: 0,\n  FIELD: 1,\n  LITERAL: 2\n};\n\n\n/**\n * @param {!goog.date.DateLike} date\n * @return {number}\n * @private\n */\ngoog.i18n.DateTimeFormat.getHours_ = function(date) {\n  return date.getHours ? date.getHours() : 0;\n};\n\n\n/**\n * Apply specified pattern to this formatter object.\n * @param {string} pattern String specifying how the date should be formatted.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.applyPattern_ = function(pattern) {\n  if (goog.i18n.DateTimeFormat.removeRlmInPatterns_) {\n    // Remove RLM unicode control character from pattern.\n    pattern = pattern.replace(/\\u200f/g, '');\n  }\n  // lex the pattern, once for all uses\n  while (pattern) {\n    var previousPattern = pattern;\n    for (var i = 0; i < goog.i18n.DateTimeFormat.TOKENS_.length; ++i) {\n      var m = pattern.match(goog.i18n.DateTimeFormat.TOKENS_[i]);\n      if (m) {\n        var part = m[0];\n        pattern = pattern.substring(part.length);\n        if (i == goog.i18n.DateTimeFormat.PartTypes_.QUOTED_STRING) {\n          if (part == \"''\") {\n            part = \"'\";  // '' -> '\n          } else {\n            part = part.substring(\n                1,\n                m[1] == '\\'' ? part.length - 1 : part.length);  // strip quotes\n            part = part.replace(/\\'\\'/g, '\\'');\n          }\n        }\n        this.patternParts_.push({text: part, type: i});\n        break;\n      }\n    }\n    if (previousPattern === pattern) {\n      // On every iteration, part of the pattern string must be consumed.\n      throw new Error('Malformed pattern part: ' + pattern);\n    }\n  }\n};\n\n\n/**\n * Format the given date object according to preset pattern and current locale.\n * @param {goog.date.DateLike} date The Date object that is being formatted.\n * @param {goog.i18n.TimeZone=} opt_timeZone optional, if specified, time\n *    related fields will be formatted based on its setting. When this field\n *    is not specified, \"undefined\" will be pass around and those function\n *    that really need time zone service will create a default one.\n * @return {string} Formatted string for the given date.\n *    Throws an error if the date is null or if one tries to format a date-only\n *    object (for instance goog.date.Date) using a pattern with time fields.\n */\ngoog.i18n.DateTimeFormat.prototype.format = function(date, opt_timeZone) {\n  if (!date) throw Error('The date to format must be non-null.');\n\n  // We don't want to write code to calculate each date field because we\n  // want to maximize performance and minimize code size.\n  // JavaScript only provide API to render local time.\n  // Suppose target date is: 16:00 GMT-0400\n  // OS local time is:       12:00 GMT-0800\n  // We want to create a Local Date Object : 16:00 GMT-0800, and fix the\n  // time zone display ourselves.\n  // Thing get a little bit tricky when daylight time transition happens. For\n  // example, suppose OS timeZone is America/Los_Angeles, it is impossible to\n  // represent \"2006/4/2 02:30\" even for those timeZone that has no transition\n  // at this time. Because 2:00 to 3:00 on that day does not exist in\n  // America/Los_Angeles time zone. To avoid calculating date field through\n  // our own code, we uses 3 Date object instead, one for \"Year, month, day\",\n  // one for time within that day, and one for timeZone object since it need\n  // the real time to figure out actual time zone offset.\n  var diff = opt_timeZone ?\n      (date.getTimezoneOffset() - opt_timeZone.getOffset(date)) * 60000 :\n      0;\n  var dateForDate = diff ? new Date(date.getTime() + diff) : date;\n  var dateForTime = dateForDate;\n  // When the time manipulation applied above spans the DST on/off hour, this\n  // could alter the time incorrectly by adding or subtracting an additional\n  // hour.\n  // We can mitigate this by:\n  // - Adding the difference in timezone offset to the date. This ensures that\n  //   the dateForDate is still within the right day if the extra DST hour\n  //   affected the date.\n  // - Move the time one day forward if we applied a timezone offset backwards,\n  //   or vice versa. This trick ensures that the time is in the same offset\n  //   as the original date, so we remove the additional hour added or\n  //   subtracted by the DST switch.\n  if (opt_timeZone &&\n      dateForDate.getTimezoneOffset() != date.getTimezoneOffset()) {\n    var dstDiff =\n        (dateForDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;\n    dateForDate = new Date(dateForDate.getTime() + dstDiff);\n\n    diff += diff > 0 ? -goog.date.MS_PER_DAY : goog.date.MS_PER_DAY;\n    dateForTime = new Date(date.getTime() + diff);\n  }\n\n  var out = [];\n  for (var i = 0; i < this.patternParts_.length; ++i) {\n    var text = this.patternParts_[i].text;\n    if (goog.i18n.DateTimeFormat.PartTypes_.FIELD ==\n        this.patternParts_[i].type) {\n      out.push(\n          this.formatField_(\n              text, date, dateForDate, dateForTime, opt_timeZone));\n    } else {\n      out.push(text);\n    }\n  }\n  return out.join('');\n};\n\n\n/**\n * Apply a predefined pattern as identified by formatType, which is stored in\n * locale specific repository.\n * @param {number} formatType A number that identified the predefined pattern.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.applyStandardPattern_ = function(\n    formatType) {\n  var pattern;\n  if (formatType < 4) {\n    pattern = this.dateTimeSymbols_.DATEFORMATS[formatType];\n  } else if (formatType < 8) {\n    pattern = this.dateTimeSymbols_.TIMEFORMATS[formatType - 4];\n  } else if (formatType < 12) {\n    pattern = this.dateTimeSymbols_.DATETIMEFORMATS[formatType - 8];\n    pattern = pattern.replace(\n        '{1}', this.dateTimeSymbols_.DATEFORMATS[formatType - 8]);\n    pattern = pattern.replace(\n        '{0}', this.dateTimeSymbols_.TIMEFORMATS[formatType - 8]);\n  } else {\n    this.applyStandardPattern_(goog.i18n.DateTimeFormat.Format.MEDIUM_DATETIME);\n    return;\n  }\n  this.applyPattern_(pattern);\n};\n\n\n/**\n * Localizes a string potentially containing numbers, replacing ASCII digits\n * with native digits if specified so by the locale. Leaves other characters.\n * @param {string} input the string to be localized, using ASCII digits.\n * @return {string} localized string, potentially using native digits.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.localizeNumbers_ = function(input) {\n  return goog.i18n.DateTimeFormat.localizeNumbers(input, this.dateTimeSymbols_);\n};\n\n\n/**\n * If the usage of Ascii digits should be enforced regardless of locale.\n * @type {boolean}\n * @private\n */\ngoog.i18n.DateTimeFormat.enforceAsciiDigits_ = false;\n\n\n/**\n * If RLM unicode characters should be removed from date/time patterns (useful\n * when enforcing ASCII digits for Arabic). See {@code #setEnforceAsciiDigits}.\n * @type {boolean}\n * @private\n */\ngoog.i18n.DateTimeFormat.removeRlmInPatterns_ = false;\n\n\n/**\n * Sets if the usage of Ascii digits in formatting should be enforced in\n * formatted date/time even for locales where native digits are indicated.\n * Also sets whether to remove RLM unicode control characters when using\n * standard enumerated patterns (they exist e.g. in standard d/M/y for Arabic).\n * Production code should call this once before any {@code DateTimeFormat}\n * object is instantiated.\n * Caveats:\n *    * Enforcing ASCII digits affects all future formatting by new or existing\n * {@code DateTimeFormat} objects.\n *    * Removal of RLM characters only applies to {@code DateTimeFormat} objects\n * instantiated after this call.\n * @param {boolean} enforceAsciiDigits Whether Ascii digits should be enforced.\n */\ngoog.i18n.DateTimeFormat.setEnforceAsciiDigits = function(enforceAsciiDigits) {\n  goog.i18n.DateTimeFormat.enforceAsciiDigits_ = enforceAsciiDigits;\n\n  // Also setting removal of RLM chracters when forcing ASCII digits since it's\n  // the right thing to do for Arabic standard patterns. One could add an\n  // optional argument here or to the {@code DateTimeFormat} constructor to\n  // enable an alternative behavior.\n  goog.i18n.DateTimeFormat.removeRlmInPatterns_ = enforceAsciiDigits;\n};\n\n\n/**\n * @return {boolean} Whether enforcing ASCII digits for all locales. See\n *     {@code #setEnforceAsciiDigits} for more details.\n */\ngoog.i18n.DateTimeFormat.isEnforceAsciiDigits = function() {\n  return goog.i18n.DateTimeFormat.enforceAsciiDigits_;\n};\n\n\n/**\n * Localizes a string potentially containing numbers, replacing ASCII digits\n * with native digits if specified so by the locale. Leaves other characters.\n * @param {number|string} input the string to be localized, using ASCII digits.\n * @param {!Object=} opt_dateTimeSymbols Optional symbols to use rather than\n *     the global symbols.\n * @return {string} localized string, potentially using native digits.\n */\ngoog.i18n.DateTimeFormat.localizeNumbers = function(\n    input, opt_dateTimeSymbols) {\n  input = String(input);\n  var dateTimeSymbols = opt_dateTimeSymbols || goog.i18n.DateTimeSymbols;\n  if (dateTimeSymbols.ZERODIGIT === undefined ||\n      goog.i18n.DateTimeFormat.enforceAsciiDigits_) {\n    return input;\n  }\n\n  var parts = [];\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n    parts.push(\n        (0x30 <= c && c <= 0x39) ?  // '0' <= c <= '9'\n            String.fromCharCode(dateTimeSymbols.ZERODIGIT + c - 0x30) :\n            input.charAt(i));\n  }\n  return parts.join('');\n};\n\n\n/**\n * Formats Era field according to pattern specified.\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatEra_ = function(count, date) {\n  var value = date.getFullYear() > 0 ? 1 : 0;\n  return count >= 4 ? this.dateTimeSymbols_.ERANAMES[value] :\n                      this.dateTimeSymbols_.ERAS[value];\n};\n\n\n/**\n * Formats Year field according to pattern specified\n *   Javascript Date object seems incapable handling 1BC and\n *   year before. It can show you year 0 which does not exists.\n *   following we just keep consistent with javascript's\n *   toString method. But keep in mind those things should be\n *   unsupported.\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatYear_ = function(count, date) {\n  var value = date.getFullYear();\n  if (value < 0) {\n    value = -value;\n  }\n  if (count == 2) {\n    // See comment about special casing 'yy' at the start of the file, this\n    // matches ICU and CLDR behaviour. See also:\n    // http://icu-project.org/apiref/icu4j/com/ibm/icu/text/SimpleDateFormat.html\n    // http://www.unicode.org/reports/tr35/tr35-dates.html\n    value = value % 100;\n  }\n  return this.localizeNumbers_(goog.string.padNumber(value, count));\n};\n\n\n/**\n * Formats Month field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatMonth_ = function(count, date) {\n  var value = date.getMonth();\n  switch (count) {\n    case 5:\n      return this.dateTimeSymbols_.NARROWMONTHS[value];\n    case 4:\n      return this.dateTimeSymbols_.MONTHS[value];\n    case 3:\n      return this.dateTimeSymbols_.SHORTMONTHS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\n  }\n};\n\n\n/**\n * Validates is the goog.date.DateLike object to format has a time.\n * DateLike means Date|goog.date.Date, and goog.date.DateTime inherits\n * from goog.date.Date. But goog.date.Date does not have time related\n * members (getHours, getMinutes, getSeconds).\n * Formatting can be done, if there are no time placeholders in the pattern.\n *\n * @param {!goog.date.DateLike} date the object to validate.\n * @private\n */\ngoog.i18n.DateTimeFormat.validateDateHasTime_ = function(date) {\n  if (date.getHours && date.getSeconds && date.getMinutes) return;\n  // if (date instanceof Date || date instanceof goog.date.DateTime)\n  throw Error(\n      'The date to format has no time (probably a goog.date.Date). ' +\n      'Use Date or goog.date.DateTime, or use a pattern without time fields.');\n};\n\n\n/**\n * Formats (1..24) Hours field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats. This controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.format24Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) || 24;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n\n\n/**\n * Formats Fractional seconds field according to pattern\n * specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n *\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatFractionalSeconds_ = function(\n    count, date) {\n  // Fractional seconds left-justify, append 0 for precision beyond 3\n  var value = date.getTime() % 1000 / 1000;\n  return this.localizeNumbers_(\n      value.toFixed(Math.min(3, count)).substr(2) +\n      (count > 3 ? goog.string.padNumber(0, count - 3) : ''));\n};\n\n\n/**\n * Formats Day of week field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatDayOfWeek_ = function(count, date) {\n  var value = date.getDay();\n  return count >= 4 ? this.dateTimeSymbols_.WEEKDAYS[value] :\n                      this.dateTimeSymbols_.SHORTWEEKDAYS[value];\n};\n\n\n/**\n * Formats Am/Pm field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatAmPm_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\n  return this.dateTimeSymbols_.AMPMS[hours >= 12 && hours < 24 ? 1 : 0];\n};\n\n\n/**\n * Formats (1..12) Hours field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.format1To12Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12 || 12;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n\n\n/**\n * Formats (0..11) Hours field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.format0To11Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12;\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n\n\n/**\n * Formats (0..23) Hours field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.format0To23Hours_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\n};\n\n\n/**\n * Formats Standalone weekday field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneDay_ = function(\n    count, date) {\n  var value = date.getDay();\n  switch (count) {\n    case 5:\n      return this.dateTimeSymbols_.STANDALONENARROWWEEKDAYS[value];\n    case 4:\n      return this.dateTimeSymbols_.STANDALONEWEEKDAYS[value];\n    case 3:\n      return this.dateTimeSymbols_.STANDALONESHORTWEEKDAYS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value, 1));\n  }\n};\n\n\n/**\n * Formats Standalone Month field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneMonth_ = function(\n    count, date) {\n  var value = date.getMonth();\n  switch (count) {\n    case 5:\n      return this.dateTimeSymbols_.STANDALONENARROWMONTHS[value];\n    case 4:\n      return this.dateTimeSymbols_.STANDALONEMONTHS[value];\n    case 3:\n      return this.dateTimeSymbols_.STANDALONESHORTMONTHS[value];\n    default:\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\n  }\n};\n\n\n/**\n * Formats Quarter field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatQuarter_ = function(count, date) {\n  var value = Math.floor(date.getMonth() / 3);\n  return count < 4 ? this.dateTimeSymbols_.SHORTQUARTERS[value] :\n                     this.dateTimeSymbols_.QUARTERS[value];\n};\n\n\n/**\n * Formats Date field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatDate_ = function(count, date) {\n  return this.localizeNumbers_(goog.string.padNumber(date.getDate(), count));\n};\n\n\n/**\n * Formats Minutes field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatMinutes_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  return this.localizeNumbers_(\n      goog.string.padNumber(\n          /** @type {!goog.date.DateTime} */ (date).getMinutes(), count));\n};\n\n\n/**\n * Formats Seconds field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatSeconds_ = function(count, date) {\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\n  return this.localizeNumbers_(\n      goog.string.padNumber(\n          /** @type {!goog.date.DateTime} */ (date).getSeconds(), count));\n};\n\n\n/**\n * Formats the week of year field according to pattern specified\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatWeekOfYear_ = function(count, date) {\n\n\n  var weekNum = goog.date.getWeekNumber(\n      date.getFullYear(), date.getMonth(), date.getDate(),\n      this.dateTimeSymbols_.FIRSTWEEKCUTOFFDAY,\n      this.dateTimeSymbols_.FIRSTDAYOFWEEK);\n\n  return this.localizeNumbers_(goog.string.padNumber(weekNum, count));\n};\n\n\n/**\n * Formats TimeZone field following RFC\n *\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\n * @return {string} Formatted string that represent this field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneRFC_ = function(\n    count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone ||\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n\n  // RFC 822 formats should be kept in ASCII, but localized GMT formats may need\n  // to use native digits.\n  return count < 4 ? opt_timeZone.getRFCTimeZoneString(date) :\n                     this.localizeNumbers_(opt_timeZone.getGMTString(date));\n};\n\n\n/**\n * Generate GMT timeZone string for given date\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date Whose value being evaluated.\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\n * @return {string} GMT timeZone string.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZone_ = function(\n    count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone ||\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return count < 4 ? opt_timeZone.getShortName(date) :\n                     opt_timeZone.getLongName(date);\n};\n\n\n/**\n * Generate GMT timeZone string for given date\n * @param {!goog.date.DateLike} date Whose value being evaluated.\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\n * @return {string} GMT timeZone string.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneId_ = function(\n    date, opt_timeZone) {\n  opt_timeZone = opt_timeZone ||\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return opt_timeZone.getTimeZoneId();\n};\n\n\n/**\n * Generate localized, location dependent time zone id\n * @param {number} count Number of time pattern char repeats, it controls\n *     how a field should be formatted.\n * @param {!goog.date.DateLike} date Whose value being evaluated.\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\n * @return {string} GMT timeZone string.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneLocationId_ = function(\n    count, date, opt_timeZone) {\n  opt_timeZone = opt_timeZone ||\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\n  return count <= 2 ? opt_timeZone.getTimeZoneId() :\n                      opt_timeZone.getGenericLocation(date);\n};\n\n\n/**\n * Formatting one date field.\n * @param {string} patternStr The pattern string for the field being formatted.\n * @param {!goog.date.DateLike} date represents the real date to be formatted.\n * @param {!goog.date.DateLike} dateForDate used to resolve date fields\n *     for formatting.\n * @param {!goog.date.DateLike} dateForTime used to resolve time fields\n *     for formatting.\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\n * @return {string} string representation for the given field.\n * @private\n */\ngoog.i18n.DateTimeFormat.prototype.formatField_ = function(\n    patternStr, date, dateForDate, dateForTime, opt_timeZone) {\n  var count = patternStr.length;\n  switch (patternStr.charAt(0)) {\n    case 'G':\n      return this.formatEra_(count, dateForDate);\n    case 'y':\n      return this.formatYear_(count, dateForDate);\n    case 'M':\n      return this.formatMonth_(count, dateForDate);\n    case 'k':\n      return this.format24Hours_(count, dateForTime);\n    case 'S':\n      return this.formatFractionalSeconds_(count, dateForTime);\n    case 'E':\n      return this.formatDayOfWeek_(count, dateForDate);\n    case 'a':\n      return this.formatAmPm_(count, dateForTime);\n    case 'h':\n      return this.format1To12Hours_(count, dateForTime);\n    case 'K':\n      return this.format0To11Hours_(count, dateForTime);\n    case 'H':\n      return this.format0To23Hours_(count, dateForTime);\n    case 'c':\n      return this.formatStandaloneDay_(count, dateForDate);\n    case 'L':\n      return this.formatStandaloneMonth_(count, dateForDate);\n    case 'Q':\n      return this.formatQuarter_(count, dateForDate);\n    case 'd':\n      return this.formatDate_(count, dateForDate);\n    case 'm':\n      return this.formatMinutes_(count, dateForTime);\n    case 's':\n      return this.formatSeconds_(count, dateForTime);\n    case 'v':\n      return this.formatTimeZoneId_(date, opt_timeZone);\n    case 'V':\n      return this.formatTimeZoneLocationId_(count, date, opt_timeZone);\n    case 'w':\n      return this.formatWeekOfYear_(count, dateForTime);\n    case 'z':\n      return this.formatTimeZone_(count, date, opt_timeZone);\n    case 'Z':\n      return this.formatTimeZoneRFC_(count, date, opt_timeZone);\n    default:\n      return '';\n  }\n};\n","~:compiled-at",1574163696200,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.i18n.datetimeformat.js\",\n\"lineCount\":480,\n\"mappings\":\"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\",\n\"sources\":[\"goog/i18n/datetimeformat.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Functions for dealing with date/time formatting.\\n */\\n\\n\\n/**\\n * Namespace for i18n date/time formatting functions\\n */\\ngoog.provide('goog.i18n.DateTimeFormat');\\ngoog.provide('goog.i18n.DateTimeFormat.Format');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.date');\\ngoog.require('goog.i18n.DateTimeSymbols');\\ngoog.require('goog.i18n.TimeZone');\\ngoog.require('goog.string');\\n\\n\\n/**\\n * Datetime formatting functions following the pattern specification as defined\\n * in JDK, ICU and CLDR, with minor modification for typical usage in JS.\\n * Pattern specification:\\n * {@link http://userguide.icu-project.org/formatparse/datetime}\\n * <pre>\\n * Symbol   Meaning                    Presentation       Example\\n * ------   -------                    ------------       -------\\n * G#       era designator             (Text)             AD\\n * y#       year                       (Number)           1996\\n * Y*       year (week of year)        (Number)           1997\\n * u*       extended year              (Number)           4601\\n * Q#       quarter                    (Text)             Q3 & 3rd quarter\\n * M        month in year              (Text & Number)    July & 07\\n * L        month in year (standalone) (Text & Number)    July & 07\\n * d        day in month               (Number)           10\\n * h        hour in am/pm (1~12)       (Number)           12\\n * H        hour in day (0~23)         (Number)           0\\n * m        minute in hour             (Number)           30\\n * s        second in minute           (Number)           55\\n * S        fractional second          (Number)           978\\n * E#       day of week                (Text)             Tue & Tuesday\\n * e*       day of week (local 1~7)    (Number)           2\\n * c#       day of week (standalone)   (Text & Number)    2 & Tues & Tuesday & T\\n * D*       day in year                (Number)           189\\n * F*       day of week in month       (Number)           2 (2nd Wed in July)\\n * w        week in year               (Number)           27\\n * W*       week in month              (Number)           2\\n * a        am/pm marker               (Text)             PM\\n * k        hour in day (1~24)         (Number)           24\\n * K        hour in am/pm (0~11)       (Number)           0\\n * z        time zone                  (Text)             Pacific Standard Time\\n * Z#       time zone (RFC 822)        (Number)           -0800\\n * v#       time zone (generic)        (Text)             America/Los_Angeles\\n * V#       time zone                  (Text)             Los Angeles Time\\n * g*       Julian day                 (Number)           2451334\\n * A*       milliseconds in day        (Number)           69540000\\n * '        escape for text            (Delimiter)        'Date='\\n * ''       single quote               (Literal)          'o''clock'\\n *\\n * Item marked with '*' are not supported yet.\\n * Item marked with '#' works different than java\\n *\\n * The count of pattern letters determine the format.\\n * (Text): 4 or more, use full form, <4, use short or abbreviated form if it\\n * exists. (e.g., \\\"EEEE\\\" produces \\\"Monday\\\", \\\"EEE\\\" produces \\\"Mon\\\")\\n *\\n * (Number): the minimum number of digits. Shorter numbers are zero-padded to\\n * this amount (e.g. if \\\"m\\\" produces \\\"6\\\", \\\"mm\\\" produces \\\"06\\\"). Year is handled\\n * specially; that is, if the count of 'y' is 2, the Year will be truncated to\\n * 2 digits. (e.g., if \\\"yyyy\\\" produces \\\"1997\\\", \\\"yy\\\" produces \\\"97\\\".) Unlike other\\n * fields, fractional seconds are padded on the right with zero.\\n *\\n * :(Text & Number) 3 or over, use text, otherwise use number. (e.g., \\\"M\\\"\\n * produces \\\"1\\\", \\\"MM\\\" produces \\\"01\\\", \\\"MMM\\\" produces \\\"Jan\\\", and \\\"MMMM\\\" produces\\n * \\\"January\\\".)\\n *\\n * Any characters in the pattern that are not in the ranges of ['a'..'z'] and\\n * ['A'..'Z'] will be treated as quoted text. For instance, characters like ':',\\n * '.', ' ', '#' and '@' will appear in the resulting time text even they are\\n * not embraced within single quotes.\\n * </pre>\\n */\\n\\n/**\\n * Construct a DateTimeFormat object based on current locale.\\n * @constructor\\n * @param {string|number} pattern pattern specification or pattern type.\\n * @param {!Object=} opt_dateTimeSymbols Optional symbols to use for this\\n *     instance rather than the global symbols.\\n * @final\\n */\\ngoog.i18n.DateTimeFormat = function(pattern, opt_dateTimeSymbols) {\\n  goog.asserts.assert(goog.isDef(pattern), 'Pattern must be defined');\\n  goog.asserts.assert(\\n      goog.isDef(opt_dateTimeSymbols) || goog.isDef(goog.i18n.DateTimeSymbols),\\n      'goog.i18n.DateTimeSymbols or explicit symbols must be defined');\\n\\n  this.patternParts_ = [];\\n\\n  /**\\n   * Data structure that with all the locale info needed for date formatting.\\n   * (day/month names, most common patterns, rules for week-end, etc.)\\n   * @private {!goog.i18n.DateTimeSymbolsType}\\n   */\\n  this.dateTimeSymbols_ = /** @type {!goog.i18n.DateTimeSymbolsType} */ (\\n      opt_dateTimeSymbols || goog.i18n.DateTimeSymbols);\\n  if (typeof pattern == 'number') {\\n    this.applyStandardPattern_(pattern);\\n  } else {\\n    this.applyPattern_(pattern);\\n  }\\n};\\n\\n\\n/**\\n * Enum to identify predefined Date/Time format pattern.\\n * @enum {number}\\n */\\ngoog.i18n.DateTimeFormat.Format = {\\n  FULL_DATE: 0,\\n  LONG_DATE: 1,\\n  MEDIUM_DATE: 2,\\n  SHORT_DATE: 3,\\n  FULL_TIME: 4,\\n  LONG_TIME: 5,\\n  MEDIUM_TIME: 6,\\n  SHORT_TIME: 7,\\n  FULL_DATETIME: 8,\\n  LONG_DATETIME: 9,\\n  MEDIUM_DATETIME: 10,\\n  SHORT_DATETIME: 11\\n};\\n\\n\\n/**\\n * regular expression pattern for parsing pattern string\\n * @type {Array<RegExp>}\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.TOKENS_ = [\\n  // quote string\\n  /^\\\\'(?:[^\\\\']|\\\\'\\\\')*(\\\\'|$)/,\\n  // pattern chars\\n  /^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|V+|w+|z+|Z+)/,\\n  // and all the other chars\\n  /^[^\\\\'GyMkSEahKHcLQdmsvVwzZ]+/  // and all the other chars\\n];\\n\\n\\n/**\\n * These are token types, corresponding to above token definitions.\\n * @enum {number}\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.PartTypes_ = {\\n  QUOTED_STRING: 0,\\n  FIELD: 1,\\n  LITERAL: 2\\n};\\n\\n\\n/**\\n * @param {!goog.date.DateLike} date\\n * @return {number}\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.getHours_ = function(date) {\\n  return date.getHours ? date.getHours() : 0;\\n};\\n\\n\\n/**\\n * Apply specified pattern to this formatter object.\\n * @param {string} pattern String specifying how the date should be formatted.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.applyPattern_ = function(pattern) {\\n  if (goog.i18n.DateTimeFormat.removeRlmInPatterns_) {\\n    // Remove RLM unicode control character from pattern.\\n    pattern = pattern.replace(/\\\\u200f/g, '');\\n  }\\n  // lex the pattern, once for all uses\\n  while (pattern) {\\n    var previousPattern = pattern;\\n    for (var i = 0; i < goog.i18n.DateTimeFormat.TOKENS_.length; ++i) {\\n      var m = pattern.match(goog.i18n.DateTimeFormat.TOKENS_[i]);\\n      if (m) {\\n        var part = m[0];\\n        pattern = pattern.substring(part.length);\\n        if (i == goog.i18n.DateTimeFormat.PartTypes_.QUOTED_STRING) {\\n          if (part == \\\"''\\\") {\\n            part = \\\"'\\\";  // '' -> '\\n          } else {\\n            part = part.substring(\\n                1,\\n                m[1] == '\\\\'' ? part.length - 1 : part.length);  // strip quotes\\n            part = part.replace(/\\\\'\\\\'/g, '\\\\'');\\n          }\\n        }\\n        this.patternParts_.push({text: part, type: i});\\n        break;\\n      }\\n    }\\n    if (previousPattern === pattern) {\\n      // On every iteration, part of the pattern string must be consumed.\\n      throw new Error('Malformed pattern part: ' + pattern);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Format the given date object according to preset pattern and current locale.\\n * @param {goog.date.DateLike} date The Date object that is being formatted.\\n * @param {goog.i18n.TimeZone=} opt_timeZone optional, if specified, time\\n *    related fields will be formatted based on its setting. When this field\\n *    is not specified, \\\"undefined\\\" will be pass around and those function\\n *    that really need time zone service will create a default one.\\n * @return {string} Formatted string for the given date.\\n *    Throws an error if the date is null or if one tries to format a date-only\\n *    object (for instance goog.date.Date) using a pattern with time fields.\\n */\\ngoog.i18n.DateTimeFormat.prototype.format = function(date, opt_timeZone) {\\n  if (!date) throw Error('The date to format must be non-null.');\\n\\n  // We don't want to write code to calculate each date field because we\\n  // want to maximize performance and minimize code size.\\n  // JavaScript only provide API to render local time.\\n  // Suppose target date is: 16:00 GMT-0400\\n  // OS local time is:       12:00 GMT-0800\\n  // We want to create a Local Date Object : 16:00 GMT-0800, and fix the\\n  // time zone display ourselves.\\n  // Thing get a little bit tricky when daylight time transition happens. For\\n  // example, suppose OS timeZone is America/Los_Angeles, it is impossible to\\n  // represent \\\"2006/4/2 02:30\\\" even for those timeZone that has no transition\\n  // at this time. Because 2:00 to 3:00 on that day does not exist in\\n  // America/Los_Angeles time zone. To avoid calculating date field through\\n  // our own code, we uses 3 Date object instead, one for \\\"Year, month, day\\\",\\n  // one for time within that day, and one for timeZone object since it need\\n  // the real time to figure out actual time zone offset.\\n  var diff = opt_timeZone ?\\n      (date.getTimezoneOffset() - opt_timeZone.getOffset(date)) * 60000 :\\n      0;\\n  var dateForDate = diff ? new Date(date.getTime() + diff) : date;\\n  var dateForTime = dateForDate;\\n  // When the time manipulation applied above spans the DST on/off hour, this\\n  // could alter the time incorrectly by adding or subtracting an additional\\n  // hour.\\n  // We can mitigate this by:\\n  // - Adding the difference in timezone offset to the date. This ensures that\\n  //   the dateForDate is still within the right day if the extra DST hour\\n  //   affected the date.\\n  // - Move the time one day forward if we applied a timezone offset backwards,\\n  //   or vice versa. This trick ensures that the time is in the same offset\\n  //   as the original date, so we remove the additional hour added or\\n  //   subtracted by the DST switch.\\n  if (opt_timeZone &&\\n      dateForDate.getTimezoneOffset() != date.getTimezoneOffset()) {\\n    var dstDiff =\\n        (dateForDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;\\n    dateForDate = new Date(dateForDate.getTime() + dstDiff);\\n\\n    diff += diff > 0 ? -goog.date.MS_PER_DAY : goog.date.MS_PER_DAY;\\n    dateForTime = new Date(date.getTime() + diff);\\n  }\\n\\n  var out = [];\\n  for (var i = 0; i < this.patternParts_.length; ++i) {\\n    var text = this.patternParts_[i].text;\\n    if (goog.i18n.DateTimeFormat.PartTypes_.FIELD ==\\n        this.patternParts_[i].type) {\\n      out.push(\\n          this.formatField_(\\n              text, date, dateForDate, dateForTime, opt_timeZone));\\n    } else {\\n      out.push(text);\\n    }\\n  }\\n  return out.join('');\\n};\\n\\n\\n/**\\n * Apply a predefined pattern as identified by formatType, which is stored in\\n * locale specific repository.\\n * @param {number} formatType A number that identified the predefined pattern.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.applyStandardPattern_ = function(\\n    formatType) {\\n  var pattern;\\n  if (formatType < 4) {\\n    pattern = this.dateTimeSymbols_.DATEFORMATS[formatType];\\n  } else if (formatType < 8) {\\n    pattern = this.dateTimeSymbols_.TIMEFORMATS[formatType - 4];\\n  } else if (formatType < 12) {\\n    pattern = this.dateTimeSymbols_.DATETIMEFORMATS[formatType - 8];\\n    pattern = pattern.replace(\\n        '{1}', this.dateTimeSymbols_.DATEFORMATS[formatType - 8]);\\n    pattern = pattern.replace(\\n        '{0}', this.dateTimeSymbols_.TIMEFORMATS[formatType - 8]);\\n  } else {\\n    this.applyStandardPattern_(goog.i18n.DateTimeFormat.Format.MEDIUM_DATETIME);\\n    return;\\n  }\\n  this.applyPattern_(pattern);\\n};\\n\\n\\n/**\\n * Localizes a string potentially containing numbers, replacing ASCII digits\\n * with native digits if specified so by the locale. Leaves other characters.\\n * @param {string} input the string to be localized, using ASCII digits.\\n * @return {string} localized string, potentially using native digits.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.localizeNumbers_ = function(input) {\\n  return goog.i18n.DateTimeFormat.localizeNumbers(input, this.dateTimeSymbols_);\\n};\\n\\n\\n/**\\n * If the usage of Ascii digits should be enforced regardless of locale.\\n * @type {boolean}\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.enforceAsciiDigits_ = false;\\n\\n\\n/**\\n * If RLM unicode characters should be removed from date/time patterns (useful\\n * when enforcing ASCII digits for Arabic). See {@code #setEnforceAsciiDigits}.\\n * @type {boolean}\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.removeRlmInPatterns_ = false;\\n\\n\\n/**\\n * Sets if the usage of Ascii digits in formatting should be enforced in\\n * formatted date/time even for locales where native digits are indicated.\\n * Also sets whether to remove RLM unicode control characters when using\\n * standard enumerated patterns (they exist e.g. in standard d/M/y for Arabic).\\n * Production code should call this once before any {@code DateTimeFormat}\\n * object is instantiated.\\n * Caveats:\\n *    * Enforcing ASCII digits affects all future formatting by new or existing\\n * {@code DateTimeFormat} objects.\\n *    * Removal of RLM characters only applies to {@code DateTimeFormat} objects\\n * instantiated after this call.\\n * @param {boolean} enforceAsciiDigits Whether Ascii digits should be enforced.\\n */\\ngoog.i18n.DateTimeFormat.setEnforceAsciiDigits = function(enforceAsciiDigits) {\\n  goog.i18n.DateTimeFormat.enforceAsciiDigits_ = enforceAsciiDigits;\\n\\n  // Also setting removal of RLM chracters when forcing ASCII digits since it's\\n  // the right thing to do for Arabic standard patterns. One could add an\\n  // optional argument here or to the {@code DateTimeFormat} constructor to\\n  // enable an alternative behavior.\\n  goog.i18n.DateTimeFormat.removeRlmInPatterns_ = enforceAsciiDigits;\\n};\\n\\n\\n/**\\n * @return {boolean} Whether enforcing ASCII digits for all locales. See\\n *     {@code #setEnforceAsciiDigits} for more details.\\n */\\ngoog.i18n.DateTimeFormat.isEnforceAsciiDigits = function() {\\n  return goog.i18n.DateTimeFormat.enforceAsciiDigits_;\\n};\\n\\n\\n/**\\n * Localizes a string potentially containing numbers, replacing ASCII digits\\n * with native digits if specified so by the locale. Leaves other characters.\\n * @param {number|string} input the string to be localized, using ASCII digits.\\n * @param {!Object=} opt_dateTimeSymbols Optional symbols to use rather than\\n *     the global symbols.\\n * @return {string} localized string, potentially using native digits.\\n */\\ngoog.i18n.DateTimeFormat.localizeNumbers = function(\\n    input, opt_dateTimeSymbols) {\\n  input = String(input);\\n  var dateTimeSymbols = opt_dateTimeSymbols || goog.i18n.DateTimeSymbols;\\n  if (dateTimeSymbols.ZERODIGIT === undefined ||\\n      goog.i18n.DateTimeFormat.enforceAsciiDigits_) {\\n    return input;\\n  }\\n\\n  var parts = [];\\n  for (var i = 0; i < input.length; i++) {\\n    var c = input.charCodeAt(i);\\n    parts.push(\\n        (0x30 <= c && c <= 0x39) ?  // '0' <= c <= '9'\\n            String.fromCharCode(dateTimeSymbols.ZERODIGIT + c - 0x30) :\\n            input.charAt(i));\\n  }\\n  return parts.join('');\\n};\\n\\n\\n/**\\n * Formats Era field according to pattern specified.\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatEra_ = function(count, date) {\\n  var value = date.getFullYear() > 0 ? 1 : 0;\\n  return count >= 4 ? this.dateTimeSymbols_.ERANAMES[value] :\\n                      this.dateTimeSymbols_.ERAS[value];\\n};\\n\\n\\n/**\\n * Formats Year field according to pattern specified\\n *   Javascript Date object seems incapable handling 1BC and\\n *   year before. It can show you year 0 which does not exists.\\n *   following we just keep consistent with javascript's\\n *   toString method. But keep in mind those things should be\\n *   unsupported.\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatYear_ = function(count, date) {\\n  var value = date.getFullYear();\\n  if (value < 0) {\\n    value = -value;\\n  }\\n  if (count == 2) {\\n    // See comment about special casing 'yy' at the start of the file, this\\n    // matches ICU and CLDR behaviour. See also:\\n    // http://icu-project.org/apiref/icu4j/com/ibm/icu/text/SimpleDateFormat.html\\n    // http://www.unicode.org/reports/tr35/tr35-dates.html\\n    value = value % 100;\\n  }\\n  return this.localizeNumbers_(goog.string.padNumber(value, count));\\n};\\n\\n\\n/**\\n * Formats Month field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatMonth_ = function(count, date) {\\n  var value = date.getMonth();\\n  switch (count) {\\n    case 5:\\n      return this.dateTimeSymbols_.NARROWMONTHS[value];\\n    case 4:\\n      return this.dateTimeSymbols_.MONTHS[value];\\n    case 3:\\n      return this.dateTimeSymbols_.SHORTMONTHS[value];\\n    default:\\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\\n  }\\n};\\n\\n\\n/**\\n * Validates is the goog.date.DateLike object to format has a time.\\n * DateLike means Date|goog.date.Date, and goog.date.DateTime inherits\\n * from goog.date.Date. But goog.date.Date does not have time related\\n * members (getHours, getMinutes, getSeconds).\\n * Formatting can be done, if there are no time placeholders in the pattern.\\n *\\n * @param {!goog.date.DateLike} date the object to validate.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.validateDateHasTime_ = function(date) {\\n  if (date.getHours && date.getSeconds && date.getMinutes) return;\\n  // if (date instanceof Date || date instanceof goog.date.DateTime)\\n  throw Error(\\n      'The date to format has no time (probably a goog.date.Date). ' +\\n      'Use Date or goog.date.DateTime, or use a pattern without time fields.');\\n};\\n\\n\\n/**\\n * Formats (1..24) Hours field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats. This controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.format24Hours_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) || 24;\\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\\n};\\n\\n\\n/**\\n * Formats Fractional seconds field according to pattern\\n * specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n *\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatFractionalSeconds_ = function(\\n    count, date) {\\n  // Fractional seconds left-justify, append 0 for precision beyond 3\\n  var value = date.getTime() % 1000 / 1000;\\n  return this.localizeNumbers_(\\n      value.toFixed(Math.min(3, count)).substr(2) +\\n      (count > 3 ? goog.string.padNumber(0, count - 3) : ''));\\n};\\n\\n\\n/**\\n * Formats Day of week field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatDayOfWeek_ = function(count, date) {\\n  var value = date.getDay();\\n  return count >= 4 ? this.dateTimeSymbols_.WEEKDAYS[value] :\\n                      this.dateTimeSymbols_.SHORTWEEKDAYS[value];\\n};\\n\\n\\n/**\\n * Formats Am/Pm field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatAmPm_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\\n  return this.dateTimeSymbols_.AMPMS[hours >= 12 && hours < 24 ? 1 : 0];\\n};\\n\\n\\n/**\\n * Formats (1..12) Hours field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.format1To12Hours_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12 || 12;\\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\\n};\\n\\n\\n/**\\n * Formats (0..11) Hours field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.format0To11Hours_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12;\\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\\n};\\n\\n\\n/**\\n * Formats (0..23) Hours field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.format0To23Hours_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  var hours = goog.i18n.DateTimeFormat.getHours_(date);\\n  return this.localizeNumbers_(goog.string.padNumber(hours, count));\\n};\\n\\n\\n/**\\n * Formats Standalone weekday field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneDay_ = function(\\n    count, date) {\\n  var value = date.getDay();\\n  switch (count) {\\n    case 5:\\n      return this.dateTimeSymbols_.STANDALONENARROWWEEKDAYS[value];\\n    case 4:\\n      return this.dateTimeSymbols_.STANDALONEWEEKDAYS[value];\\n    case 3:\\n      return this.dateTimeSymbols_.STANDALONESHORTWEEKDAYS[value];\\n    default:\\n      return this.localizeNumbers_(goog.string.padNumber(value, 1));\\n  }\\n};\\n\\n\\n/**\\n * Formats Standalone Month field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatStandaloneMonth_ = function(\\n    count, date) {\\n  var value = date.getMonth();\\n  switch (count) {\\n    case 5:\\n      return this.dateTimeSymbols_.STANDALONENARROWMONTHS[value];\\n    case 4:\\n      return this.dateTimeSymbols_.STANDALONEMONTHS[value];\\n    case 3:\\n      return this.dateTimeSymbols_.STANDALONESHORTMONTHS[value];\\n    default:\\n      return this.localizeNumbers_(goog.string.padNumber(value + 1, count));\\n  }\\n};\\n\\n\\n/**\\n * Formats Quarter field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatQuarter_ = function(count, date) {\\n  var value = Math.floor(date.getMonth() / 3);\\n  return count < 4 ? this.dateTimeSymbols_.SHORTQUARTERS[value] :\\n                     this.dateTimeSymbols_.QUARTERS[value];\\n};\\n\\n\\n/**\\n * Formats Date field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatDate_ = function(count, date) {\\n  return this.localizeNumbers_(goog.string.padNumber(date.getDate(), count));\\n};\\n\\n\\n/**\\n * Formats Minutes field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatMinutes_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  return this.localizeNumbers_(\\n      goog.string.padNumber(\\n          /** @type {!goog.date.DateTime} */ (date).getMinutes(), count));\\n};\\n\\n\\n/**\\n * Formats Seconds field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatSeconds_ = function(count, date) {\\n  goog.i18n.DateTimeFormat.validateDateHasTime_(date);\\n  return this.localizeNumbers_(\\n      goog.string.padNumber(\\n          /** @type {!goog.date.DateTime} */ (date).getSeconds(), count));\\n};\\n\\n\\n/**\\n * Formats the week of year field according to pattern specified\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatWeekOfYear_ = function(count, date) {\\n\\n\\n  var weekNum = goog.date.getWeekNumber(\\n      date.getFullYear(), date.getMonth(), date.getDate(),\\n      this.dateTimeSymbols_.FIRSTWEEKCUTOFFDAY,\\n      this.dateTimeSymbols_.FIRSTDAYOFWEEK);\\n\\n  return this.localizeNumbers_(goog.string.padNumber(weekNum, count));\\n};\\n\\n\\n/**\\n * Formats TimeZone field following RFC\\n *\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date It holds the date object to be formatted.\\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\\n * @return {string} Formatted string that represent this field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneRFC_ = function(\\n    count, date, opt_timeZone) {\\n  opt_timeZone = opt_timeZone ||\\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\\n\\n  // RFC 822 formats should be kept in ASCII, but localized GMT formats may need\\n  // to use native digits.\\n  return count < 4 ? opt_timeZone.getRFCTimeZoneString(date) :\\n                     this.localizeNumbers_(opt_timeZone.getGMTString(date));\\n};\\n\\n\\n/**\\n * Generate GMT timeZone string for given date\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date Whose value being evaluated.\\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\\n * @return {string} GMT timeZone string.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatTimeZone_ = function(\\n    count, date, opt_timeZone) {\\n  opt_timeZone = opt_timeZone ||\\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\\n  return count < 4 ? opt_timeZone.getShortName(date) :\\n                     opt_timeZone.getLongName(date);\\n};\\n\\n\\n/**\\n * Generate GMT timeZone string for given date\\n * @param {!goog.date.DateLike} date Whose value being evaluated.\\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\\n * @return {string} GMT timeZone string.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneId_ = function(\\n    date, opt_timeZone) {\\n  opt_timeZone = opt_timeZone ||\\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\\n  return opt_timeZone.getTimeZoneId();\\n};\\n\\n\\n/**\\n * Generate localized, location dependent time zone id\\n * @param {number} count Number of time pattern char repeats, it controls\\n *     how a field should be formatted.\\n * @param {!goog.date.DateLike} date Whose value being evaluated.\\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\\n * @return {string} GMT timeZone string.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatTimeZoneLocationId_ = function(\\n    count, date, opt_timeZone) {\\n  opt_timeZone = opt_timeZone ||\\n      goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());\\n  return count <= 2 ? opt_timeZone.getTimeZoneId() :\\n                      opt_timeZone.getGenericLocation(date);\\n};\\n\\n\\n/**\\n * Formatting one date field.\\n * @param {string} patternStr The pattern string for the field being formatted.\\n * @param {!goog.date.DateLike} date represents the real date to be formatted.\\n * @param {!goog.date.DateLike} dateForDate used to resolve date fields\\n *     for formatting.\\n * @param {!goog.date.DateLike} dateForTime used to resolve time fields\\n *     for formatting.\\n * @param {goog.i18n.TimeZone=} opt_timeZone This holds current time zone info.\\n * @return {string} string representation for the given field.\\n * @private\\n */\\ngoog.i18n.DateTimeFormat.prototype.formatField_ = function(\\n    patternStr, date, dateForDate, dateForTime, opt_timeZone) {\\n  var count = patternStr.length;\\n  switch (patternStr.charAt(0)) {\\n    case 'G':\\n      return this.formatEra_(count, dateForDate);\\n    case 'y':\\n      return this.formatYear_(count, dateForDate);\\n    case 'M':\\n      return this.formatMonth_(count, dateForDate);\\n    case 'k':\\n      return this.format24Hours_(count, dateForTime);\\n    case 'S':\\n      return this.formatFractionalSeconds_(count, dateForTime);\\n    case 'E':\\n      return this.formatDayOfWeek_(count, dateForDate);\\n    case 'a':\\n      return this.formatAmPm_(count, dateForTime);\\n    case 'h':\\n      return this.format1To12Hours_(count, dateForTime);\\n    case 'K':\\n      return this.format0To11Hours_(count, dateForTime);\\n    case 'H':\\n      return this.format0To23Hours_(count, dateForTime);\\n    case 'c':\\n      return this.formatStandaloneDay_(count, dateForDate);\\n    case 'L':\\n      return this.formatStandaloneMonth_(count, dateForDate);\\n    case 'Q':\\n      return this.formatQuarter_(count, dateForDate);\\n    case 'd':\\n      return this.formatDate_(count, dateForDate);\\n    case 'm':\\n      return this.formatMinutes_(count, dateForTime);\\n    case 's':\\n      return this.formatSeconds_(count, dateForTime);\\n    case 'v':\\n      return this.formatTimeZoneId_(date, opt_timeZone);\\n    case 'V':\\n      return this.formatTimeZoneLocationId_(count, date, opt_timeZone);\\n    case 'w':\\n      return this.formatWeekOfYear_(count, dateForTime);\\n    case 'z':\\n      return this.formatTimeZone_(count, date, opt_timeZone);\\n    case 'Z':\\n      return this.formatTimeZoneRFC_(count, date, opt_timeZone);\\n    default:\\n      return '';\\n  }\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"i18n\",\"DateTimeFormat\",\"goog.i18n.DateTimeFormat\",\"pattern\",\"opt_dateTimeSymbols\",\"asserts\",\"assert\",\"isDef\",\"DateTimeSymbols\",\"patternParts_\",\"dateTimeSymbols_\",\"applyStandardPattern_\",\"applyPattern_\",\"Format\",\"FULL_DATE\",\"LONG_DATE\",\"MEDIUM_DATE\",\"SHORT_DATE\",\"FULL_TIME\",\"LONG_TIME\",\"MEDIUM_TIME\",\"SHORT_TIME\",\"FULL_DATETIME\",\"LONG_DATETIME\",\"MEDIUM_DATETIME\",\"SHORT_DATETIME\",\"TOKENS_\",\"PartTypes_\",\"QUOTED_STRING\",\"FIELD\",\"LITERAL\",\"getHours_\",\"goog.i18n.DateTimeFormat.getHours_\",\"date\",\"getHours\",\"prototype\",\"goog.i18n.DateTimeFormat.prototype.applyPattern_\",\"removeRlmInPatterns_\",\"replace\",\"previousPattern\",\"i\",\"length\",\"m\",\"match\",\"part\",\"substring\",\"push\",\"text\",\"type\",\"Error\",\"format\",\"goog.i18n.DateTimeFormat.prototype.format\",\"opt_timeZone\",\"diff\",\"getTimezoneOffset\",\"getOffset\",\"dateForDate\",\"Date\",\"getTime\",\"dateForTime\",\"dstDiff\",\"MS_PER_DAY\",\"out\",\"formatField_\",\"join\",\"goog.i18n.DateTimeFormat.prototype.applyStandardPattern_\",\"formatType\",\"DATEFORMATS\",\"TIMEFORMATS\",\"DATETIMEFORMATS\",\"localizeNumbers_\",\"goog.i18n.DateTimeFormat.prototype.localizeNumbers_\",\"input\",\"localizeNumbers\",\"enforceAsciiDigits_\",\"setEnforceAsciiDigits\",\"goog.i18n.DateTimeFormat.setEnforceAsciiDigits\",\"enforceAsciiDigits\",\"isEnforceAsciiDigits\",\"goog.i18n.DateTimeFormat.isEnforceAsciiDigits\",\"goog.i18n.DateTimeFormat.localizeNumbers\",\"String\",\"dateTimeSymbols\",\"ZERODIGIT\",\"undefined\",\"parts\",\"c\",\"charCodeAt\",\"fromCharCode\",\"charAt\",\"formatEra_\",\"goog.i18n.DateTimeFormat.prototype.formatEra_\",\"count\",\"value\",\"getFullYear\",\"ERANAMES\",\"ERAS\",\"formatYear_\",\"goog.i18n.DateTimeFormat.prototype.formatYear_\",\"string\",\"padNumber\",\"formatMonth_\",\"goog.i18n.DateTimeFormat.prototype.formatMonth_\",\"getMonth\",\"NARROWMONTHS\",\"MONTHS\",\"SHORTMONTHS\",\"validateDateHasTime_\",\"goog.i18n.DateTimeFormat.validateDateHasTime_\",\"getSeconds\",\"getMinutes\",\"format24Hours_\",\"goog.i18n.DateTimeFormat.prototype.format24Hours_\",\"hours\",\"formatFractionalSeconds_\",\"goog.i18n.DateTimeFormat.prototype.formatFractionalSeconds_\",\"toFixed\",\"Math\",\"min\",\"substr\",\"formatDayOfWeek_\",\"goog.i18n.DateTimeFormat.prototype.formatDayOfWeek_\",\"getDay\",\"WEEKDAYS\",\"SHORTWEEKDAYS\",\"formatAmPm_\",\"goog.i18n.DateTimeFormat.prototype.formatAmPm_\",\"AMPMS\",\"format1To12Hours_\",\"goog.i18n.DateTimeFormat.prototype.format1To12Hours_\",\"format0To11Hours_\",\"goog.i18n.DateTimeFormat.prototype.format0To11Hours_\",\"format0To23Hours_\",\"goog.i18n.DateTimeFormat.prototype.format0To23Hours_\",\"formatStandaloneDay_\",\"goog.i18n.DateTimeFormat.prototype.formatStandaloneDay_\",\"STANDALONENARROWWEEKDAYS\",\"STANDALONEWEEKDAYS\",\"STANDALONESHORTWEEKDAYS\",\"formatStandaloneMonth_\",\"goog.i18n.DateTimeFormat.prototype.formatStandaloneMonth_\",\"STANDALONENARROWMONTHS\",\"STANDALONEMONTHS\",\"STANDALONESHORTMONTHS\",\"formatQuarter_\",\"goog.i18n.DateTimeFormat.prototype.formatQuarter_\",\"floor\",\"SHORTQUARTERS\",\"QUARTERS\",\"formatDate_\",\"goog.i18n.DateTimeFormat.prototype.formatDate_\",\"getDate\",\"formatMinutes_\",\"goog.i18n.DateTimeFormat.prototype.formatMinutes_\",\"formatSeconds_\",\"goog.i18n.DateTimeFormat.prototype.formatSeconds_\",\"formatWeekOfYear_\",\"goog.i18n.DateTimeFormat.prototype.formatWeekOfYear_\",\"weekNum\",\"getWeekNumber\",\"FIRSTWEEKCUTOFFDAY\",\"FIRSTDAYOFWEEK\",\"formatTimeZoneRFC_\",\"goog.i18n.DateTimeFormat.prototype.formatTimeZoneRFC_\",\"TimeZone\",\"createTimeZone\",\"getRFCTimeZoneString\",\"getGMTString\",\"formatTimeZone_\",\"goog.i18n.DateTimeFormat.prototype.formatTimeZone_\",\"getShortName\",\"getLongName\",\"formatTimeZoneId_\",\"goog.i18n.DateTimeFormat.prototype.formatTimeZoneId_\",\"getTimeZoneId\",\"formatTimeZoneLocationId_\",\"goog.i18n.DateTimeFormat.prototype.formatTimeZoneLocationId_\",\"getGenericLocation\",\"goog.i18n.DateTimeFormat.prototype.formatField_\",\"patternStr\"]\n}\n"]