["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/events/keycodes.js"],"~:js","goog.provide(\"goog.events.KeyCodes\");\ngoog.require(\"goog.userAgent\");\ngoog.forwardDeclare(\"goog.events.BrowserEvent\");\n/** @enum {number} */ goog.events.KeyCodes = {WIN_KEY_FF_LINUX:0, MAC_ENTER:3, BACKSPACE:8, TAB:9, NUM_CENTER:12, ENTER:13, SHIFT:16, CTRL:17, ALT:18, PAUSE:19, CAPS_LOCK:20, ESC:27, SPACE:32, PAGE_UP:33, PAGE_DOWN:34, END:35, HOME:36, LEFT:37, UP:38, RIGHT:39, DOWN:40, PLUS_SIGN:43, PRINT_SCREEN:44, INSERT:45, DELETE:46, ZERO:48, ONE:49, TWO:50, THREE:51, FOUR:52, FIVE:53, SIX:54, SEVEN:55, EIGHT:56, NINE:57, FF_SEMICOLON:59, FF_EQUALS:61, FF_DASH:173, QUESTION_MARK:63, AT_SIGN:64, A:65, B:66, C:67, \nD:68, E:69, F:70, G:71, H:72, I:73, J:74, K:75, L:76, M:77, N:78, O:79, P:80, Q:81, R:82, S:83, T:84, U:85, V:86, W:87, X:88, Y:89, Z:90, META:91, WIN_KEY_RIGHT:92, CONTEXT_MENU:93, NUM_ZERO:96, NUM_ONE:97, NUM_TWO:98, NUM_THREE:99, NUM_FOUR:100, NUM_FIVE:101, NUM_SIX:102, NUM_SEVEN:103, NUM_EIGHT:104, NUM_NINE:105, NUM_MULTIPLY:106, NUM_PLUS:107, NUM_MINUS:109, NUM_PERIOD:110, NUM_DIVISION:111, F1:112, F2:113, F3:114, F4:115, F5:116, F6:117, F7:118, F8:119, F9:120, F10:121, F11:122, F12:123, NUMLOCK:144, \nSCROLL_LOCK:145, FIRST_MEDIA_KEY:166, LAST_MEDIA_KEY:183, SEMICOLON:186, DASH:189, EQUALS:187, COMMA:188, PERIOD:190, SLASH:191, APOSTROPHE:192, TILDE:192, SINGLE_QUOTE:222, OPEN_SQUARE_BRACKET:219, BACKSLASH:220, CLOSE_SQUARE_BRACKET:221, WIN_KEY:224, MAC_FF_META:224, MAC_WK_CMD_LEFT:91, MAC_WK_CMD_RIGHT:93, WIN_IME:229, VK_NONAME:252, PHANTOM:255};\n/**\n * @param {goog.events.BrowserEvent} e\n * @return {boolean}\n */\ngoog.events.KeyCodes.isTextModifyingKeyEvent = function(e) {\n  if (e.altKey && !e.ctrlKey || e.metaKey || e.keyCode >= goog.events.KeyCodes.F1 && e.keyCode <= goog.events.KeyCodes.F12) {\n    return false;\n  }\n  switch(e.keyCode) {\n    case goog.events.KeyCodes.ALT:\n    case goog.events.KeyCodes.CAPS_LOCK:\n    case goog.events.KeyCodes.CONTEXT_MENU:\n    case goog.events.KeyCodes.CTRL:\n    case goog.events.KeyCodes.DOWN:\n    case goog.events.KeyCodes.END:\n    case goog.events.KeyCodes.ESC:\n    case goog.events.KeyCodes.HOME:\n    case goog.events.KeyCodes.INSERT:\n    case goog.events.KeyCodes.LEFT:\n    case goog.events.KeyCodes.MAC_FF_META:\n    case goog.events.KeyCodes.META:\n    case goog.events.KeyCodes.NUMLOCK:\n    case goog.events.KeyCodes.NUM_CENTER:\n    case goog.events.KeyCodes.PAGE_DOWN:\n    case goog.events.KeyCodes.PAGE_UP:\n    case goog.events.KeyCodes.PAUSE:\n    case goog.events.KeyCodes.PHANTOM:\n    case goog.events.KeyCodes.PRINT_SCREEN:\n    case goog.events.KeyCodes.RIGHT:\n    case goog.events.KeyCodes.SCROLL_LOCK:\n    case goog.events.KeyCodes.SHIFT:\n    case goog.events.KeyCodes.UP:\n    case goog.events.KeyCodes.VK_NONAME:\n    case goog.events.KeyCodes.WIN_KEY:\n    case goog.events.KeyCodes.WIN_KEY_RIGHT:\n      return false;\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\n      return !goog.userAgent.GECKO;\n    default:\n      return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY || e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY;\n  }\n};\n/**\n * @param {number} keyCode\n * @param {number=} opt_heldKeyCode\n * @param {boolean=} opt_shiftKey\n * @param {boolean=} opt_ctrlKey\n * @param {boolean=} opt_altKey\n * @param {boolean=} opt_metaKey\n * @return {boolean}\n */\ngoog.events.KeyCodes.firesKeyPressEvent = function(keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey, opt_metaKey) {\n  if (!goog.userAgent.IE && !goog.userAgent.EDGE && !(goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher(\"525\"))) {\n    return true;\n  }\n  if (goog.userAgent.MAC && opt_altKey) {\n    return goog.events.KeyCodes.isCharacterKey(keyCode);\n  }\n  if (opt_altKey && !opt_ctrlKey) {\n    return false;\n  }\n  if (goog.isNumber(opt_heldKeyCode)) {\n    opt_heldKeyCode = goog.events.KeyCodes.normalizeKeyCode(opt_heldKeyCode);\n  }\n  var heldKeyIsModifier = opt_heldKeyCode == goog.events.KeyCodes.CTRL || opt_heldKeyCode == goog.events.KeyCodes.ALT || goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META;\n  var modifiedShiftKey = opt_heldKeyCode == goog.events.KeyCodes.SHIFT && (opt_ctrlKey || opt_metaKey);\n  if ((!opt_shiftKey || goog.userAgent.MAC) && heldKeyIsModifier || goog.userAgent.MAC && modifiedShiftKey) {\n    return false;\n  }\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && opt_ctrlKey && opt_shiftKey) {\n    switch(keyCode) {\n      case goog.events.KeyCodes.BACKSLASH:\n      case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\n      case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\n      case goog.events.KeyCodes.TILDE:\n      case goog.events.KeyCodes.SEMICOLON:\n      case goog.events.KeyCodes.DASH:\n      case goog.events.KeyCodes.EQUALS:\n      case goog.events.KeyCodes.COMMA:\n      case goog.events.KeyCodes.PERIOD:\n      case goog.events.KeyCodes.SLASH:\n      case goog.events.KeyCodes.APOSTROPHE:\n      case goog.events.KeyCodes.SINGLE_QUOTE:\n        return false;\n    }\n  }\n  if (goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {\n    return false;\n  }\n  switch(keyCode) {\n    case goog.events.KeyCodes.ENTER:\n      return true;\n    case goog.events.KeyCodes.ESC:\n      return !(goog.userAgent.WEBKIT || goog.userAgent.EDGE);\n  }\n  return goog.events.KeyCodes.isCharacterKey(keyCode);\n};\n/**\n * @param {number} keyCode\n * @return {boolean}\n */\ngoog.events.KeyCodes.isCharacterKey = function(keyCode) {\n  if (keyCode >= goog.events.KeyCodes.ZERO && keyCode <= goog.events.KeyCodes.NINE) {\n    return true;\n  }\n  if (keyCode >= goog.events.KeyCodes.NUM_ZERO && keyCode <= goog.events.KeyCodes.NUM_MULTIPLY) {\n    return true;\n  }\n  if (keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z) {\n    return true;\n  }\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && keyCode == 0) {\n    return true;\n  }\n  switch(keyCode) {\n    case goog.events.KeyCodes.SPACE:\n    case goog.events.KeyCodes.PLUS_SIGN:\n    case goog.events.KeyCodes.QUESTION_MARK:\n    case goog.events.KeyCodes.AT_SIGN:\n    case goog.events.KeyCodes.NUM_PLUS:\n    case goog.events.KeyCodes.NUM_MINUS:\n    case goog.events.KeyCodes.NUM_PERIOD:\n    case goog.events.KeyCodes.NUM_DIVISION:\n    case goog.events.KeyCodes.SEMICOLON:\n    case goog.events.KeyCodes.FF_SEMICOLON:\n    case goog.events.KeyCodes.DASH:\n    case goog.events.KeyCodes.EQUALS:\n    case goog.events.KeyCodes.FF_EQUALS:\n    case goog.events.KeyCodes.COMMA:\n    case goog.events.KeyCodes.PERIOD:\n    case goog.events.KeyCodes.SLASH:\n    case goog.events.KeyCodes.APOSTROPHE:\n    case goog.events.KeyCodes.SINGLE_QUOTE:\n    case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\n    case goog.events.KeyCodes.BACKSLASH:\n    case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\n      return true;\n    default:\n      return false;\n  }\n};\n/**\n * @param {number} keyCode\n * @return {number}\n */\ngoog.events.KeyCodes.normalizeKeyCode = function(keyCode) {\n  if (goog.userAgent.GECKO) {\n    return goog.events.KeyCodes.normalizeGeckoKeyCode(keyCode);\n  } else {\n    if (goog.userAgent.MAC && goog.userAgent.WEBKIT) {\n      return goog.events.KeyCodes.normalizeMacWebKitKeyCode(keyCode);\n    } else {\n      return keyCode;\n    }\n  }\n};\n/**\n * @param {number} keyCode\n * @return {number}\n */\ngoog.events.KeyCodes.normalizeGeckoKeyCode = function(keyCode) {\n  switch(keyCode) {\n    case goog.events.KeyCodes.FF_EQUALS:\n      return goog.events.KeyCodes.EQUALS;\n    case goog.events.KeyCodes.FF_SEMICOLON:\n      return goog.events.KeyCodes.SEMICOLON;\n    case goog.events.KeyCodes.FF_DASH:\n      return goog.events.KeyCodes.DASH;\n    case goog.events.KeyCodes.MAC_FF_META:\n      return goog.events.KeyCodes.META;\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\n      return goog.events.KeyCodes.WIN_KEY;\n    default:\n      return keyCode;\n  }\n};\n/**\n * @param {number} keyCode\n * @return {number}\n */\ngoog.events.KeyCodes.normalizeMacWebKitKeyCode = function(keyCode) {\n  switch(keyCode) {\n    case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:\n      return goog.events.KeyCodes.META;\n    default:\n      return keyCode;\n  }\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Constant declarations for common key codes.\n *\n * @author eae@google.com (Emil A Eklund)\n * @see ../demos/keyhandler.html\n */\n\ngoog.provide('goog.events.KeyCodes');\n\ngoog.require('goog.userAgent');\n\ngoog.forwardDeclare('goog.events.BrowserEvent');\n\n\n/**\n * Key codes for common characters.\n *\n * This list is not localized and therefore some of the key codes are not\n * correct for non US keyboard layouts. See comments below.\n *\n * @enum {number}\n */\ngoog.events.KeyCodes = {\n  WIN_KEY_FF_LINUX: 0,\n  MAC_ENTER: 3,\n  BACKSPACE: 8,\n  TAB: 9,\n  NUM_CENTER: 12,  // NUMLOCK on FF/Safari Mac\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPS_LOCK: 20,\n  ESC: 27,\n  SPACE: 32,\n  PAGE_UP: 33,    // also NUM_NORTH_EAST\n  PAGE_DOWN: 34,  // also NUM_SOUTH_EAST\n  END: 35,        // also NUM_SOUTH_WEST\n  HOME: 36,       // also NUM_NORTH_WEST\n  LEFT: 37,       // also NUM_WEST\n  UP: 38,         // also NUM_NORTH\n  RIGHT: 39,      // also NUM_EAST\n  DOWN: 40,       // also NUM_SOUTH\n  PLUS_SIGN: 43,  // NOT numpad plus\n  PRINT_SCREEN: 44,\n  INSERT: 45,  // also NUM_INSERT\n  DELETE: 46,  // also NUM_DELETE\n  ZERO: 48,\n  ONE: 49,\n  TWO: 50,\n  THREE: 51,\n  FOUR: 52,\n  FIVE: 53,\n  SIX: 54,\n  SEVEN: 55,\n  EIGHT: 56,\n  NINE: 57,\n  FF_SEMICOLON: 59,   // Firefox (Gecko) fires this for semicolon instead of 186\n  FF_EQUALS: 61,      // Firefox (Gecko) fires this for equals instead of 187\n  FF_DASH: 173,       // Firefox (Gecko) fires this for dash instead of 189\n  QUESTION_MARK: 63,  // needs localization\n  AT_SIGN: 64,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  META: 91,  // WIN_KEY_LEFT\n  WIN_KEY_RIGHT: 92,\n  CONTEXT_MENU: 93,\n  NUM_ZERO: 96,\n  NUM_ONE: 97,\n  NUM_TWO: 98,\n  NUM_THREE: 99,\n  NUM_FOUR: 100,\n  NUM_FIVE: 101,\n  NUM_SIX: 102,\n  NUM_SEVEN: 103,\n  NUM_EIGHT: 104,\n  NUM_NINE: 105,\n  NUM_MULTIPLY: 106,\n  NUM_PLUS: 107,\n  NUM_MINUS: 109,\n  NUM_PERIOD: 110,\n  NUM_DIVISION: 111,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  NUMLOCK: 144,\n  SCROLL_LOCK: 145,\n\n  // OS-specific media keys like volume controls and browser controls.\n  FIRST_MEDIA_KEY: 166,\n  LAST_MEDIA_KEY: 183,\n\n  SEMICOLON: 186,             // needs localization\n  DASH: 189,                  // needs localization\n  EQUALS: 187,                // needs localization\n  COMMA: 188,                 // needs localization\n  PERIOD: 190,                // needs localization\n  SLASH: 191,                 // needs localization\n  APOSTROPHE: 192,            // needs localization\n  TILDE: 192,                 // needs localization\n  SINGLE_QUOTE: 222,          // needs localization\n  OPEN_SQUARE_BRACKET: 219,   // needs localization\n  BACKSLASH: 220,             // needs localization\n  CLOSE_SQUARE_BRACKET: 221,  // needs localization\n  WIN_KEY: 224,\n  MAC_FF_META:\n      224,  // Firefox (Gecko) fires this for the meta key instead of 91\n  MAC_WK_CMD_LEFT: 91,   // WebKit Left Command key fired, same as META\n  MAC_WK_CMD_RIGHT: 93,  // WebKit Right Command key fired, different from META\n  WIN_IME: 229,\n\n  // \"Reserved for future use\". Some programs (e.g. the SlingPlayer 2.4 ActiveX\n  // control) fire this as a hacky way to disable screensavers.\n  VK_NONAME: 252,\n\n  // We've seen users whose machines fire this keycode at regular one\n  // second intervals. The common thread among these users is that\n  // they're all using Dell Inspiron laptops, so we suspect that this\n  // indicates a hardware/bios problem.\n  // http://en.community.dell.com/support-forums/laptop/f/3518/p/19285957/19523128.aspx\n  PHANTOM: 255\n};\n\n\n/**\n * Returns false if the event does not contain a text modifying key.\n *\n * When it returns true, the event might be text modifying. It is infeasible to\n * say for sure because of the many different keyboard layouts, so this method\n * errs on the side of assuming a key event is text-modifiable if we cannot be\n * certain it is not. As an example, it will return true for ctrl+a, though in\n * many standard keyboard layouts that key combination would mean \"select all\",\n * and not actually modify the text.\n *\n * @param {goog.events.BrowserEvent} e A key event.\n * @return {boolean} Whether it's a text modifying key.\n */\ngoog.events.KeyCodes.isTextModifyingKeyEvent = function(e) {\n  if (e.altKey && !e.ctrlKey || e.metaKey ||\n      // Function keys don't generate text\n      e.keyCode >= goog.events.KeyCodes.F1 &&\n          e.keyCode <= goog.events.KeyCodes.F12) {\n    return false;\n  }\n\n  // The following keys are quite harmless, even in combination with\n  // CTRL, ALT or SHIFT.\n  switch (e.keyCode) {\n    case goog.events.KeyCodes.ALT:\n    case goog.events.KeyCodes.CAPS_LOCK:\n    case goog.events.KeyCodes.CONTEXT_MENU:\n    case goog.events.KeyCodes.CTRL:\n    case goog.events.KeyCodes.DOWN:\n    case goog.events.KeyCodes.END:\n    case goog.events.KeyCodes.ESC:\n    case goog.events.KeyCodes.HOME:\n    case goog.events.KeyCodes.INSERT:\n    case goog.events.KeyCodes.LEFT:\n    case goog.events.KeyCodes.MAC_FF_META:\n    case goog.events.KeyCodes.META:\n    case goog.events.KeyCodes.NUMLOCK:\n    case goog.events.KeyCodes.NUM_CENTER:\n    case goog.events.KeyCodes.PAGE_DOWN:\n    case goog.events.KeyCodes.PAGE_UP:\n    case goog.events.KeyCodes.PAUSE:\n    case goog.events.KeyCodes.PHANTOM:\n    case goog.events.KeyCodes.PRINT_SCREEN:\n    case goog.events.KeyCodes.RIGHT:\n    case goog.events.KeyCodes.SCROLL_LOCK:\n    case goog.events.KeyCodes.SHIFT:\n    case goog.events.KeyCodes.UP:\n    case goog.events.KeyCodes.VK_NONAME:\n    case goog.events.KeyCodes.WIN_KEY:\n    case goog.events.KeyCodes.WIN_KEY_RIGHT:\n      return false;\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\n      return !goog.userAgent.GECKO;\n    default:\n      return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY ||\n          e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY;\n  }\n};\n\n\n/**\n * Returns true if the key fires a keypress event in the current browser.\n *\n * Accoridng to MSDN [1] IE only fires keypress events for the following keys:\n * - Letters: A - Z (uppercase and lowercase)\n * - Numerals: 0 - 9\n * - Symbols: ! @ # $ % ^ & * ( ) _ - + = < [ ] { } , . / ? \\ | ' ` \" ~\n * - System: ESC, SPACEBAR, ENTER\n *\n * That's not entirely correct though, for instance there's no distinction\n * between upper and lower case letters.\n *\n * [1] http://msdn2.microsoft.com/en-us/library/ms536939(VS.85).aspx)\n *\n * Safari is similar to IE, but does not fire keypress for ESC.\n *\n * Additionally, IE6 does not fire keydown or keypress events for letters when\n * the control or alt keys are held down and the shift key is not. IE7 does\n * fire keydown in these cases, though, but not keypress.\n *\n * @param {number} keyCode A key code.\n * @param {number=} opt_heldKeyCode Key code of a currently-held key.\n * @param {boolean=} opt_shiftKey Whether the shift key is held down.\n * @param {boolean=} opt_ctrlKey Whether the control key is held down.\n * @param {boolean=} opt_altKey Whether the alt key is held down.\n * @param {boolean=} opt_metaKey Whether the meta key is held down.\n * @return {boolean} Whether it's a key that fires a keypress event.\n */\ngoog.events.KeyCodes.firesKeyPressEvent = function(\n    keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey,\n    opt_metaKey) {\n  if (!goog.userAgent.IE && !goog.userAgent.EDGE &&\n      !(goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('525'))) {\n    return true;\n  }\n\n  if (goog.userAgent.MAC && opt_altKey) {\n    return goog.events.KeyCodes.isCharacterKey(keyCode);\n  }\n\n  // Alt but not AltGr which is represented as Alt+Ctrl.\n  if (opt_altKey && !opt_ctrlKey) {\n    return false;\n  }\n\n  // Saves Ctrl or Alt + key for IE and WebKit 525+, which won't fire keypress.\n  // Non-IE browsers and WebKit prior to 525 won't get this far so no need to\n  // check the user agent.\n  if (goog.isNumber(opt_heldKeyCode)) {\n    opt_heldKeyCode = goog.events.KeyCodes.normalizeKeyCode(opt_heldKeyCode);\n  }\n  var heldKeyIsModifier = opt_heldKeyCode == goog.events.KeyCodes.CTRL ||\n      opt_heldKeyCode == goog.events.KeyCodes.ALT ||\n      goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META;\n  // The Shift key blocks keypresses on Mac iff accompanied by another modifier.\n  var modifiedShiftKey = opt_heldKeyCode == goog.events.KeyCodes.SHIFT &&\n      (opt_ctrlKey || opt_metaKey);\n  if ((!opt_shiftKey || goog.userAgent.MAC) && heldKeyIsModifier ||\n      goog.userAgent.MAC && modifiedShiftKey) {\n    return false;\n  }\n\n  // Some keys with Ctrl/Shift do not issue keypress in WEBKIT.\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && opt_ctrlKey &&\n      opt_shiftKey) {\n    switch (keyCode) {\n      case goog.events.KeyCodes.BACKSLASH:\n      case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\n      case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\n      case goog.events.KeyCodes.TILDE:\n      case goog.events.KeyCodes.SEMICOLON:\n      case goog.events.KeyCodes.DASH:\n      case goog.events.KeyCodes.EQUALS:\n      case goog.events.KeyCodes.COMMA:\n      case goog.events.KeyCodes.PERIOD:\n      case goog.events.KeyCodes.SLASH:\n      case goog.events.KeyCodes.APOSTROPHE:\n      case goog.events.KeyCodes.SINGLE_QUOTE:\n        return false;\n    }\n  }\n\n  // When Ctrl+<somekey> is held in IE, it only fires a keypress once, but it\n  // continues to fire keydown events as the event repeats.\n  if (goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {\n    return false;\n  }\n\n  switch (keyCode) {\n    case goog.events.KeyCodes.ENTER:\n      return true;\n    case goog.events.KeyCodes.ESC:\n      return !(goog.userAgent.WEBKIT || goog.userAgent.EDGE);\n  }\n\n  return goog.events.KeyCodes.isCharacterKey(keyCode);\n};\n\n\n/**\n * Returns true if the key produces a character.\n * This does not cover characters on non-US keyboards (Russian, Hebrew, etc.).\n *\n * @param {number} keyCode A key code.\n * @return {boolean} Whether it's a character key.\n */\ngoog.events.KeyCodes.isCharacterKey = function(keyCode) {\n  if (keyCode >= goog.events.KeyCodes.ZERO &&\n      keyCode <= goog.events.KeyCodes.NINE) {\n    return true;\n  }\n\n  if (keyCode >= goog.events.KeyCodes.NUM_ZERO &&\n      keyCode <= goog.events.KeyCodes.NUM_MULTIPLY) {\n    return true;\n  }\n\n  if (keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z) {\n    return true;\n  }\n\n  // Safari sends zero key code for non-latin characters.\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && keyCode == 0) {\n    return true;\n  }\n\n  switch (keyCode) {\n    case goog.events.KeyCodes.SPACE:\n    case goog.events.KeyCodes.PLUS_SIGN:\n    case goog.events.KeyCodes.QUESTION_MARK:\n    case goog.events.KeyCodes.AT_SIGN:\n    case goog.events.KeyCodes.NUM_PLUS:\n    case goog.events.KeyCodes.NUM_MINUS:\n    case goog.events.KeyCodes.NUM_PERIOD:\n    case goog.events.KeyCodes.NUM_DIVISION:\n    case goog.events.KeyCodes.SEMICOLON:\n    case goog.events.KeyCodes.FF_SEMICOLON:\n    case goog.events.KeyCodes.DASH:\n    case goog.events.KeyCodes.EQUALS:\n    case goog.events.KeyCodes.FF_EQUALS:\n    case goog.events.KeyCodes.COMMA:\n    case goog.events.KeyCodes.PERIOD:\n    case goog.events.KeyCodes.SLASH:\n    case goog.events.KeyCodes.APOSTROPHE:\n    case goog.events.KeyCodes.SINGLE_QUOTE:\n    case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\n    case goog.events.KeyCodes.BACKSLASH:\n    case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\n      return true;\n    default:\n      return false;\n  }\n};\n\n\n/**\n * Normalizes key codes from OS/Browser-specific value to the general one.\n * @param {number} keyCode The native key code.\n * @return {number} The normalized key code.\n */\ngoog.events.KeyCodes.normalizeKeyCode = function(keyCode) {\n  if (goog.userAgent.GECKO) {\n    return goog.events.KeyCodes.normalizeGeckoKeyCode(keyCode);\n  } else if (goog.userAgent.MAC && goog.userAgent.WEBKIT) {\n    return goog.events.KeyCodes.normalizeMacWebKitKeyCode(keyCode);\n  } else {\n    return keyCode;\n  }\n};\n\n\n/**\n * Normalizes key codes from their Gecko-specific value to the general one.\n * @param {number} keyCode The native key code.\n * @return {number} The normalized key code.\n */\ngoog.events.KeyCodes.normalizeGeckoKeyCode = function(keyCode) {\n  switch (keyCode) {\n    case goog.events.KeyCodes.FF_EQUALS:\n      return goog.events.KeyCodes.EQUALS;\n    case goog.events.KeyCodes.FF_SEMICOLON:\n      return goog.events.KeyCodes.SEMICOLON;\n    case goog.events.KeyCodes.FF_DASH:\n      return goog.events.KeyCodes.DASH;\n    case goog.events.KeyCodes.MAC_FF_META:\n      return goog.events.KeyCodes.META;\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\n      return goog.events.KeyCodes.WIN_KEY;\n    default:\n      return keyCode;\n  }\n};\n\n\n/**\n * Normalizes key codes from their Mac WebKit-specific value to the general one.\n * @param {number} keyCode The native key code.\n * @return {number} The normalized key code.\n */\ngoog.events.KeyCodes.normalizeMacWebKitKeyCode = function(keyCode) {\n  switch (keyCode) {\n    case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:  // 93\n      return goog.events.KeyCodes.META;          // 91\n    default:\n      return keyCode;\n  }\n};\n","~:compiled-at",1574163696271,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.events.keycodes.js\",\n\"lineCount\":195,\n\"mappings\":\"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\",\n\"sources\":[\"goog/events/keycodes.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Constant declarations for common key codes.\\n *\\n * @author eae@google.com (Emil A Eklund)\\n * @see ../demos/keyhandler.html\\n */\\n\\ngoog.provide('goog.events.KeyCodes');\\n\\ngoog.require('goog.userAgent');\\n\\ngoog.forwardDeclare('goog.events.BrowserEvent');\\n\\n\\n/**\\n * Key codes for common characters.\\n *\\n * This list is not localized and therefore some of the key codes are not\\n * correct for non US keyboard layouts. See comments below.\\n *\\n * @enum {number}\\n */\\ngoog.events.KeyCodes = {\\n  WIN_KEY_FF_LINUX: 0,\\n  MAC_ENTER: 3,\\n  BACKSPACE: 8,\\n  TAB: 9,\\n  NUM_CENTER: 12,  // NUMLOCK on FF/Safari Mac\\n  ENTER: 13,\\n  SHIFT: 16,\\n  CTRL: 17,\\n  ALT: 18,\\n  PAUSE: 19,\\n  CAPS_LOCK: 20,\\n  ESC: 27,\\n  SPACE: 32,\\n  PAGE_UP: 33,    // also NUM_NORTH_EAST\\n  PAGE_DOWN: 34,  // also NUM_SOUTH_EAST\\n  END: 35,        // also NUM_SOUTH_WEST\\n  HOME: 36,       // also NUM_NORTH_WEST\\n  LEFT: 37,       // also NUM_WEST\\n  UP: 38,         // also NUM_NORTH\\n  RIGHT: 39,      // also NUM_EAST\\n  DOWN: 40,       // also NUM_SOUTH\\n  PLUS_SIGN: 43,  // NOT numpad plus\\n  PRINT_SCREEN: 44,\\n  INSERT: 45,  // also NUM_INSERT\\n  DELETE: 46,  // also NUM_DELETE\\n  ZERO: 48,\\n  ONE: 49,\\n  TWO: 50,\\n  THREE: 51,\\n  FOUR: 52,\\n  FIVE: 53,\\n  SIX: 54,\\n  SEVEN: 55,\\n  EIGHT: 56,\\n  NINE: 57,\\n  FF_SEMICOLON: 59,   // Firefox (Gecko) fires this for semicolon instead of 186\\n  FF_EQUALS: 61,      // Firefox (Gecko) fires this for equals instead of 187\\n  FF_DASH: 173,       // Firefox (Gecko) fires this for dash instead of 189\\n  QUESTION_MARK: 63,  // needs localization\\n  AT_SIGN: 64,\\n  A: 65,\\n  B: 66,\\n  C: 67,\\n  D: 68,\\n  E: 69,\\n  F: 70,\\n  G: 71,\\n  H: 72,\\n  I: 73,\\n  J: 74,\\n  K: 75,\\n  L: 76,\\n  M: 77,\\n  N: 78,\\n  O: 79,\\n  P: 80,\\n  Q: 81,\\n  R: 82,\\n  S: 83,\\n  T: 84,\\n  U: 85,\\n  V: 86,\\n  W: 87,\\n  X: 88,\\n  Y: 89,\\n  Z: 90,\\n  META: 91,  // WIN_KEY_LEFT\\n  WIN_KEY_RIGHT: 92,\\n  CONTEXT_MENU: 93,\\n  NUM_ZERO: 96,\\n  NUM_ONE: 97,\\n  NUM_TWO: 98,\\n  NUM_THREE: 99,\\n  NUM_FOUR: 100,\\n  NUM_FIVE: 101,\\n  NUM_SIX: 102,\\n  NUM_SEVEN: 103,\\n  NUM_EIGHT: 104,\\n  NUM_NINE: 105,\\n  NUM_MULTIPLY: 106,\\n  NUM_PLUS: 107,\\n  NUM_MINUS: 109,\\n  NUM_PERIOD: 110,\\n  NUM_DIVISION: 111,\\n  F1: 112,\\n  F2: 113,\\n  F3: 114,\\n  F4: 115,\\n  F5: 116,\\n  F6: 117,\\n  F7: 118,\\n  F8: 119,\\n  F9: 120,\\n  F10: 121,\\n  F11: 122,\\n  F12: 123,\\n  NUMLOCK: 144,\\n  SCROLL_LOCK: 145,\\n\\n  // OS-specific media keys like volume controls and browser controls.\\n  FIRST_MEDIA_KEY: 166,\\n  LAST_MEDIA_KEY: 183,\\n\\n  SEMICOLON: 186,             // needs localization\\n  DASH: 189,                  // needs localization\\n  EQUALS: 187,                // needs localization\\n  COMMA: 188,                 // needs localization\\n  PERIOD: 190,                // needs localization\\n  SLASH: 191,                 // needs localization\\n  APOSTROPHE: 192,            // needs localization\\n  TILDE: 192,                 // needs localization\\n  SINGLE_QUOTE: 222,          // needs localization\\n  OPEN_SQUARE_BRACKET: 219,   // needs localization\\n  BACKSLASH: 220,             // needs localization\\n  CLOSE_SQUARE_BRACKET: 221,  // needs localization\\n  WIN_KEY: 224,\\n  MAC_FF_META:\\n      224,  // Firefox (Gecko) fires this for the meta key instead of 91\\n  MAC_WK_CMD_LEFT: 91,   // WebKit Left Command key fired, same as META\\n  MAC_WK_CMD_RIGHT: 93,  // WebKit Right Command key fired, different from META\\n  WIN_IME: 229,\\n\\n  // \\\"Reserved for future use\\\". Some programs (e.g. the SlingPlayer 2.4 ActiveX\\n  // control) fire this as a hacky way to disable screensavers.\\n  VK_NONAME: 252,\\n\\n  // We've seen users whose machines fire this keycode at regular one\\n  // second intervals. The common thread among these users is that\\n  // they're all using Dell Inspiron laptops, so we suspect that this\\n  // indicates a hardware/bios problem.\\n  // http://en.community.dell.com/support-forums/laptop/f/3518/p/19285957/19523128.aspx\\n  PHANTOM: 255\\n};\\n\\n\\n/**\\n * Returns false if the event does not contain a text modifying key.\\n *\\n * When it returns true, the event might be text modifying. It is infeasible to\\n * say for sure because of the many different keyboard layouts, so this method\\n * errs on the side of assuming a key event is text-modifiable if we cannot be\\n * certain it is not. As an example, it will return true for ctrl+a, though in\\n * many standard keyboard layouts that key combination would mean \\\"select all\\\",\\n * and not actually modify the text.\\n *\\n * @param {goog.events.BrowserEvent} e A key event.\\n * @return {boolean} Whether it's a text modifying key.\\n */\\ngoog.events.KeyCodes.isTextModifyingKeyEvent = function(e) {\\n  if (e.altKey && !e.ctrlKey || e.metaKey ||\\n      // Function keys don't generate text\\n      e.keyCode >= goog.events.KeyCodes.F1 &&\\n          e.keyCode <= goog.events.KeyCodes.F12) {\\n    return false;\\n  }\\n\\n  // The following keys are quite harmless, even in combination with\\n  // CTRL, ALT or SHIFT.\\n  switch (e.keyCode) {\\n    case goog.events.KeyCodes.ALT:\\n    case goog.events.KeyCodes.CAPS_LOCK:\\n    case goog.events.KeyCodes.CONTEXT_MENU:\\n    case goog.events.KeyCodes.CTRL:\\n    case goog.events.KeyCodes.DOWN:\\n    case goog.events.KeyCodes.END:\\n    case goog.events.KeyCodes.ESC:\\n    case goog.events.KeyCodes.HOME:\\n    case goog.events.KeyCodes.INSERT:\\n    case goog.events.KeyCodes.LEFT:\\n    case goog.events.KeyCodes.MAC_FF_META:\\n    case goog.events.KeyCodes.META:\\n    case goog.events.KeyCodes.NUMLOCK:\\n    case goog.events.KeyCodes.NUM_CENTER:\\n    case goog.events.KeyCodes.PAGE_DOWN:\\n    case goog.events.KeyCodes.PAGE_UP:\\n    case goog.events.KeyCodes.PAUSE:\\n    case goog.events.KeyCodes.PHANTOM:\\n    case goog.events.KeyCodes.PRINT_SCREEN:\\n    case goog.events.KeyCodes.RIGHT:\\n    case goog.events.KeyCodes.SCROLL_LOCK:\\n    case goog.events.KeyCodes.SHIFT:\\n    case goog.events.KeyCodes.UP:\\n    case goog.events.KeyCodes.VK_NONAME:\\n    case goog.events.KeyCodes.WIN_KEY:\\n    case goog.events.KeyCodes.WIN_KEY_RIGHT:\\n      return false;\\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\\n      return !goog.userAgent.GECKO;\\n    default:\\n      return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY ||\\n          e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY;\\n  }\\n};\\n\\n\\n/**\\n * Returns true if the key fires a keypress event in the current browser.\\n *\\n * Accoridng to MSDN [1] IE only fires keypress events for the following keys:\\n * - Letters: A - Z (uppercase and lowercase)\\n * - Numerals: 0 - 9\\n * - Symbols: ! @ # $ % ^ & * ( ) _ - + = < [ ] { } , . / ? \\\\ | ' ` \\\" ~\\n * - System: ESC, SPACEBAR, ENTER\\n *\\n * That's not entirely correct though, for instance there's no distinction\\n * between upper and lower case letters.\\n *\\n * [1] http://msdn2.microsoft.com/en-us/library/ms536939(VS.85).aspx)\\n *\\n * Safari is similar to IE, but does not fire keypress for ESC.\\n *\\n * Additionally, IE6 does not fire keydown or keypress events for letters when\\n * the control or alt keys are held down and the shift key is not. IE7 does\\n * fire keydown in these cases, though, but not keypress.\\n *\\n * @param {number} keyCode A key code.\\n * @param {number=} opt_heldKeyCode Key code of a currently-held key.\\n * @param {boolean=} opt_shiftKey Whether the shift key is held down.\\n * @param {boolean=} opt_ctrlKey Whether the control key is held down.\\n * @param {boolean=} opt_altKey Whether the alt key is held down.\\n * @param {boolean=} opt_metaKey Whether the meta key is held down.\\n * @return {boolean} Whether it's a key that fires a keypress event.\\n */\\ngoog.events.KeyCodes.firesKeyPressEvent = function(\\n    keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey,\\n    opt_metaKey) {\\n  if (!goog.userAgent.IE && !goog.userAgent.EDGE &&\\n      !(goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('525'))) {\\n    return true;\\n  }\\n\\n  if (goog.userAgent.MAC && opt_altKey) {\\n    return goog.events.KeyCodes.isCharacterKey(keyCode);\\n  }\\n\\n  // Alt but not AltGr which is represented as Alt+Ctrl.\\n  if (opt_altKey && !opt_ctrlKey) {\\n    return false;\\n  }\\n\\n  // Saves Ctrl or Alt + key for IE and WebKit 525+, which won't fire keypress.\\n  // Non-IE browsers and WebKit prior to 525 won't get this far so no need to\\n  // check the user agent.\\n  if (goog.isNumber(opt_heldKeyCode)) {\\n    opt_heldKeyCode = goog.events.KeyCodes.normalizeKeyCode(opt_heldKeyCode);\\n  }\\n  var heldKeyIsModifier = opt_heldKeyCode == goog.events.KeyCodes.CTRL ||\\n      opt_heldKeyCode == goog.events.KeyCodes.ALT ||\\n      goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META;\\n  // The Shift key blocks keypresses on Mac iff accompanied by another modifier.\\n  var modifiedShiftKey = opt_heldKeyCode == goog.events.KeyCodes.SHIFT &&\\n      (opt_ctrlKey || opt_metaKey);\\n  if ((!opt_shiftKey || goog.userAgent.MAC) && heldKeyIsModifier ||\\n      goog.userAgent.MAC && modifiedShiftKey) {\\n    return false;\\n  }\\n\\n  // Some keys with Ctrl/Shift do not issue keypress in WEBKIT.\\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && opt_ctrlKey &&\\n      opt_shiftKey) {\\n    switch (keyCode) {\\n      case goog.events.KeyCodes.BACKSLASH:\\n      case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\\n      case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\\n      case goog.events.KeyCodes.TILDE:\\n      case goog.events.KeyCodes.SEMICOLON:\\n      case goog.events.KeyCodes.DASH:\\n      case goog.events.KeyCodes.EQUALS:\\n      case goog.events.KeyCodes.COMMA:\\n      case goog.events.KeyCodes.PERIOD:\\n      case goog.events.KeyCodes.SLASH:\\n      case goog.events.KeyCodes.APOSTROPHE:\\n      case goog.events.KeyCodes.SINGLE_QUOTE:\\n        return false;\\n    }\\n  }\\n\\n  // When Ctrl+<somekey> is held in IE, it only fires a keypress once, but it\\n  // continues to fire keydown events as the event repeats.\\n  if (goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {\\n    return false;\\n  }\\n\\n  switch (keyCode) {\\n    case goog.events.KeyCodes.ENTER:\\n      return true;\\n    case goog.events.KeyCodes.ESC:\\n      return !(goog.userAgent.WEBKIT || goog.userAgent.EDGE);\\n  }\\n\\n  return goog.events.KeyCodes.isCharacterKey(keyCode);\\n};\\n\\n\\n/**\\n * Returns true if the key produces a character.\\n * This does not cover characters on non-US keyboards (Russian, Hebrew, etc.).\\n *\\n * @param {number} keyCode A key code.\\n * @return {boolean} Whether it's a character key.\\n */\\ngoog.events.KeyCodes.isCharacterKey = function(keyCode) {\\n  if (keyCode >= goog.events.KeyCodes.ZERO &&\\n      keyCode <= goog.events.KeyCodes.NINE) {\\n    return true;\\n  }\\n\\n  if (keyCode >= goog.events.KeyCodes.NUM_ZERO &&\\n      keyCode <= goog.events.KeyCodes.NUM_MULTIPLY) {\\n    return true;\\n  }\\n\\n  if (keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z) {\\n    return true;\\n  }\\n\\n  // Safari sends zero key code for non-latin characters.\\n  if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && keyCode == 0) {\\n    return true;\\n  }\\n\\n  switch (keyCode) {\\n    case goog.events.KeyCodes.SPACE:\\n    case goog.events.KeyCodes.PLUS_SIGN:\\n    case goog.events.KeyCodes.QUESTION_MARK:\\n    case goog.events.KeyCodes.AT_SIGN:\\n    case goog.events.KeyCodes.NUM_PLUS:\\n    case goog.events.KeyCodes.NUM_MINUS:\\n    case goog.events.KeyCodes.NUM_PERIOD:\\n    case goog.events.KeyCodes.NUM_DIVISION:\\n    case goog.events.KeyCodes.SEMICOLON:\\n    case goog.events.KeyCodes.FF_SEMICOLON:\\n    case goog.events.KeyCodes.DASH:\\n    case goog.events.KeyCodes.EQUALS:\\n    case goog.events.KeyCodes.FF_EQUALS:\\n    case goog.events.KeyCodes.COMMA:\\n    case goog.events.KeyCodes.PERIOD:\\n    case goog.events.KeyCodes.SLASH:\\n    case goog.events.KeyCodes.APOSTROPHE:\\n    case goog.events.KeyCodes.SINGLE_QUOTE:\\n    case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:\\n    case goog.events.KeyCodes.BACKSLASH:\\n    case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:\\n      return true;\\n    default:\\n      return false;\\n  }\\n};\\n\\n\\n/**\\n * Normalizes key codes from OS/Browser-specific value to the general one.\\n * @param {number} keyCode The native key code.\\n * @return {number} The normalized key code.\\n */\\ngoog.events.KeyCodes.normalizeKeyCode = function(keyCode) {\\n  if (goog.userAgent.GECKO) {\\n    return goog.events.KeyCodes.normalizeGeckoKeyCode(keyCode);\\n  } else if (goog.userAgent.MAC && goog.userAgent.WEBKIT) {\\n    return goog.events.KeyCodes.normalizeMacWebKitKeyCode(keyCode);\\n  } else {\\n    return keyCode;\\n  }\\n};\\n\\n\\n/**\\n * Normalizes key codes from their Gecko-specific value to the general one.\\n * @param {number} keyCode The native key code.\\n * @return {number} The normalized key code.\\n */\\ngoog.events.KeyCodes.normalizeGeckoKeyCode = function(keyCode) {\\n  switch (keyCode) {\\n    case goog.events.KeyCodes.FF_EQUALS:\\n      return goog.events.KeyCodes.EQUALS;\\n    case goog.events.KeyCodes.FF_SEMICOLON:\\n      return goog.events.KeyCodes.SEMICOLON;\\n    case goog.events.KeyCodes.FF_DASH:\\n      return goog.events.KeyCodes.DASH;\\n    case goog.events.KeyCodes.MAC_FF_META:\\n      return goog.events.KeyCodes.META;\\n    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:\\n      return goog.events.KeyCodes.WIN_KEY;\\n    default:\\n      return keyCode;\\n  }\\n};\\n\\n\\n/**\\n * Normalizes key codes from their Mac WebKit-specific value to the general one.\\n * @param {number} keyCode The native key code.\\n * @return {number} The normalized key code.\\n */\\ngoog.events.KeyCodes.normalizeMacWebKitKeyCode = function(keyCode) {\\n  switch (keyCode) {\\n    case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:  // 93\\n      return goog.events.KeyCodes.META;          // 91\\n    default:\\n      return keyCode;\\n  }\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"forwardDeclare\",\"events\",\"KeyCodes\",\"WIN_KEY_FF_LINUX\",\"MAC_ENTER\",\"BACKSPACE\",\"TAB\",\"NUM_CENTER\",\"ENTER\",\"SHIFT\",\"CTRL\",\"ALT\",\"PAUSE\",\"CAPS_LOCK\",\"ESC\",\"SPACE\",\"PAGE_UP\",\"PAGE_DOWN\",\"END\",\"HOME\",\"LEFT\",\"UP\",\"RIGHT\",\"DOWN\",\"PLUS_SIGN\",\"PRINT_SCREEN\",\"INSERT\",\"DELETE\",\"ZERO\",\"ONE\",\"TWO\",\"THREE\",\"FOUR\",\"FIVE\",\"SIX\",\"SEVEN\",\"EIGHT\",\"NINE\",\"FF_SEMICOLON\",\"FF_EQUALS\",\"FF_DASH\",\"QUESTION_MARK\",\"AT_SIGN\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"META\",\"WIN_KEY_RIGHT\",\"CONTEXT_MENU\",\"NUM_ZERO\",\"NUM_ONE\",\"NUM_TWO\",\"NUM_THREE\",\"NUM_FOUR\",\"NUM_FIVE\",\"NUM_SIX\",\"NUM_SEVEN\",\"NUM_EIGHT\",\"NUM_NINE\",\"NUM_MULTIPLY\",\"NUM_PLUS\",\"NUM_MINUS\",\"NUM_PERIOD\",\"NUM_DIVISION\",\"F1\",\"F2\",\"F3\",\"F4\",\"F5\",\"F6\",\"F7\",\"F8\",\"F9\",\"F10\",\"F11\",\"F12\",\"NUMLOCK\",\"SCROLL_LOCK\",\"FIRST_MEDIA_KEY\",\"LAST_MEDIA_KEY\",\"SEMICOLON\",\"DASH\",\"EQUALS\",\"COMMA\",\"PERIOD\",\"SLASH\",\"APOSTROPHE\",\"TILDE\",\"SINGLE_QUOTE\",\"OPEN_SQUARE_BRACKET\",\"BACKSLASH\",\"CLOSE_SQUARE_BRACKET\",\"WIN_KEY\",\"MAC_FF_META\",\"MAC_WK_CMD_LEFT\",\"MAC_WK_CMD_RIGHT\",\"WIN_IME\",\"VK_NONAME\",\"PHANTOM\",\"isTextModifyingKeyEvent\",\"goog.events.KeyCodes.isTextModifyingKeyEvent\",\"e\",\"altKey\",\"ctrlKey\",\"metaKey\",\"keyCode\",\"userAgent\",\"GECKO\",\"firesKeyPressEvent\",\"goog.events.KeyCodes.firesKeyPressEvent\",\"opt_heldKeyCode\",\"opt_shiftKey\",\"opt_ctrlKey\",\"opt_altKey\",\"opt_metaKey\",\"IE\",\"EDGE\",\"WEBKIT\",\"isVersionOrHigher\",\"MAC\",\"isCharacterKey\",\"isNumber\",\"normalizeKeyCode\",\"heldKeyIsModifier\",\"modifiedShiftKey\",\"goog.events.KeyCodes.isCharacterKey\",\"goog.events.KeyCodes.normalizeKeyCode\",\"normalizeGeckoKeyCode\",\"normalizeMacWebKitKeyCode\",\"goog.events.KeyCodes.normalizeGeckoKeyCode\",\"goog.events.KeyCodes.normalizeMacWebKitKeyCode\"]\n}\n"]