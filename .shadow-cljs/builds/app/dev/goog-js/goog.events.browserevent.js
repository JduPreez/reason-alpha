["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/events/browserevent.js"],"~:js","goog.provide(\"goog.events.BrowserEvent\");\ngoog.provide(\"goog.events.BrowserEvent.MouseButton\");\ngoog.require(\"goog.events.BrowserFeature\");\ngoog.require(\"goog.events.Event\");\ngoog.require(\"goog.events.EventType\");\ngoog.require(\"goog.reflect\");\ngoog.require(\"goog.userAgent\");\n/**\n * @constructor\n * @extends {goog.events.Event}\n * @param {Event=} opt_e\n * @param {EventTarget=} opt_currentTarget\n */\ngoog.events.BrowserEvent = function(opt_e, opt_currentTarget) {\n  goog.events.BrowserEvent.base(this, \"constructor\", opt_e ? opt_e.type : \"\");\n  /** @override @type {Node} */ this.target = null;\n  /** @override @type {(Node|undefined)} */ this.currentTarget = null;\n  /** @type {Node} */ this.relatedTarget = null;\n  /** @type {number} */ this.offsetX = 0;\n  /** @type {number} */ this.offsetY = 0;\n  /** @type {number} */ this.clientX = 0;\n  /** @type {number} */ this.clientY = 0;\n  /** @type {number} */ this.screenX = 0;\n  /** @type {number} */ this.screenY = 0;\n  /** @type {number} */ this.button = 0;\n  /** @type {string} */ this.key = \"\";\n  /** @type {number} */ this.keyCode = 0;\n  /** @type {number} */ this.charCode = 0;\n  /** @type {boolean} */ this.ctrlKey = false;\n  /** @type {boolean} */ this.altKey = false;\n  /** @type {boolean} */ this.shiftKey = false;\n  /** @type {boolean} */ this.metaKey = false;\n  /** @type {Object} */ this.state = null;\n  /** @type {boolean} */ this.platformModifierKey = false;\n  /** @private @type {Event} */ this.event_ = null;\n  if (opt_e) {\n    this.init(opt_e, opt_currentTarget);\n  }\n};\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\n/** @enum {number} */ goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};\n/** @type {!Array<number>} */ goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];\n/**\n * @param {Event} e\n * @param {EventTarget=} opt_currentTarget\n */\ngoog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {\n  var type = this.type = e.type;\n  /** @type {Touch} */ var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;\n  this.target = /** @type {Node} */ (e.target) || e.srcElement;\n  this.currentTarget = /** @type {Node} */ (opt_currentTarget);\n  var relatedTarget = /** @type {Node} */ (e.relatedTarget);\n  if (relatedTarget) {\n    if (goog.userAgent.GECKO) {\n      if (!goog.reflect.canAccessProperty(relatedTarget, \"nodeName\")) {\n        relatedTarget = null;\n      }\n    }\n  } else {\n    if (type == goog.events.EventType.MOUSEOVER) {\n      relatedTarget = e.fromElement;\n    } else {\n      if (type == goog.events.EventType.MOUSEOUT) {\n        relatedTarget = e.toElement;\n      }\n    }\n  }\n  this.relatedTarget = relatedTarget;\n  if (!goog.isNull(relevantTouch)) {\n    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;\n    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;\n    this.screenX = relevantTouch.screenX || 0;\n    this.screenY = relevantTouch.screenY || 0;\n  } else {\n    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;\n    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;\n    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;\n    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;\n    this.screenX = e.screenX || 0;\n    this.screenY = e.screenY || 0;\n  }\n  this.button = e.button;\n  this.keyCode = e.keyCode || 0;\n  this.key = e.key || \"\";\n  this.charCode = e.charCode || (type == \"keypress\" ? e.keyCode : 0);\n  this.ctrlKey = e.ctrlKey;\n  this.altKey = e.altKey;\n  this.shiftKey = e.shiftKey;\n  this.metaKey = e.metaKey;\n  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\n  this.state = e.state;\n  this.event_ = e;\n  if (e.defaultPrevented) {\n    this.preventDefault();\n  }\n};\n/**\n * @param {goog.events.BrowserEvent.MouseButton} button\n * @return {boolean}\n */\ngoog.events.BrowserEvent.prototype.isButton = function(button) {\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\n    if (this.type == \"click\") {\n      return button == goog.events.BrowserEvent.MouseButton.LEFT;\n    } else {\n      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);\n    }\n  } else {\n    return this.event_.button == button;\n  }\n};\n/**\n * @return {boolean}\n */\ngoog.events.BrowserEvent.prototype.isMouseActionButton = function() {\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);\n};\n/** @override */ goog.events.BrowserEvent.prototype.stopPropagation = function() {\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\n  if (this.event_.stopPropagation) {\n    this.event_.stopPropagation();\n  } else {\n    this.event_.cancelBubble = true;\n  }\n};\n/** @override */ goog.events.BrowserEvent.prototype.preventDefault = function() {\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\n  var be = this.event_;\n  if (!be.preventDefault) {\n    be.returnValue = false;\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\n      try {\n        var VK_F1 = 112;\n        var VK_F12 = 123;\n        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {\n          be.keyCode = -1;\n        }\n      } catch (ex) {\n      }\n    }\n  } else {\n    be.preventDefault();\n  }\n};\n/**\n * @return {Event}\n */\ngoog.events.BrowserEvent.prototype.getBrowserEvent = function() {\n  return this.event_;\n};\n","~:source","// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A patched, standardized event object for browser events.\n *\n * <pre>\n * The patched event object contains the following members:\n * - type           {string}    Event type, e.g. 'click'\n * - target         {Object}    The element that actually triggered the event\n * - currentTarget  {Object}    The element the listener is attached to\n * - relatedTarget  {Object}    For mouseover and mouseout, the previous object\n * - offsetX        {number}    X-coordinate relative to target\n * - offsetY        {number}    Y-coordinate relative to target\n * - clientX        {number}    X-coordinate relative to viewport\n * - clientY        {number}    Y-coordinate relative to viewport\n * - screenX        {number}    X-coordinate relative to the edge of the screen\n * - screenY        {number}    Y-coordinate relative to the edge of the screen\n * - button         {number}    Mouse button. Use isButton() to test.\n * - keyCode        {number}    Key-code\n * - ctrlKey        {boolean}   Was ctrl key depressed\n * - altKey         {boolean}   Was alt key depressed\n * - shiftKey       {boolean}   Was shift key depressed\n * - metaKey        {boolean}   Was meta key depressed\n * - defaultPrevented {boolean} Whether the default action has been prevented\n * - state          {Object}    History state object\n *\n * NOTE: The keyCode member contains the raw browser keyCode. For normalized\n * key and character code use {@link goog.events.KeyHandler}.\n * </pre>\n *\n * @author arv@google.com (Erik Arvidsson)\n */\n\ngoog.provide('goog.events.BrowserEvent');\ngoog.provide('goog.events.BrowserEvent.MouseButton');\n\ngoog.require('goog.events.BrowserFeature');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventType');\ngoog.require('goog.reflect');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * The content of this object will not be initialized if no event object is\n * provided. If this is the case, init() needs to be invoked separately.\n * @param {Event=} opt_e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n * @constructor\n * @extends {goog.events.Event}\n */\ngoog.events.BrowserEvent = function(opt_e, opt_currentTarget) {\n  goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');\n\n  /**\n   * Target that fired the event.\n   * @override\n   * @type {Node}\n   */\n  this.target = null;\n\n  /**\n   * Node that had the listener attached.\n   * @override\n   * @type {Node|undefined}\n   */\n  this.currentTarget = null;\n\n  /**\n   * For mouseover and mouseout events, the related object for the event.\n   * @type {Node}\n   */\n  this.relatedTarget = null;\n\n  /**\n   * X-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetX = 0;\n\n  /**\n   * Y-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetY = 0;\n\n  /**\n   * X-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientX = 0;\n\n  /**\n   * Y-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientY = 0;\n\n  /**\n   * X-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenX = 0;\n\n  /**\n   * Y-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenY = 0;\n\n  /**\n   * Which mouse button was pressed.\n   * @type {number}\n   */\n  this.button = 0;\n\n  /**\n   * Key of key press.\n   * @type {string}\n   */\n  this.key = '';\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.keyCode = 0;\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.charCode = 0;\n\n  /**\n   * Whether control was pressed at time of event.\n   * @type {boolean}\n   */\n  this.ctrlKey = false;\n\n  /**\n   * Whether alt was pressed at time of event.\n   * @type {boolean}\n   */\n  this.altKey = false;\n\n  /**\n   * Whether shift was pressed at time of event.\n   * @type {boolean}\n   */\n  this.shiftKey = false;\n\n  /**\n   * Whether the meta key was pressed at time of event.\n   * @type {boolean}\n   */\n  this.metaKey = false;\n\n  /**\n   * History state object, only set for PopState events where it's a copy of the\n   * state object provided to pushState or replaceState.\n   * @type {Object}\n   */\n  this.state = null;\n\n  /**\n   * Whether the default platform modifier key was pressed at time of event.\n   * (This is control for all platforms except Mac, where it's Meta.)\n   * @type {boolean}\n   */\n  this.platformModifierKey = false;\n\n  /**\n   * The browser event object.\n   * @private {Event}\n   */\n  this.event_ = null;\n\n  if (opt_e) {\n    this.init(opt_e, opt_currentTarget);\n  }\n};\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\n\n\n/**\n * Normalized button constants for the mouse.\n * @enum {number}\n */\ngoog.events.BrowserEvent.MouseButton = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\n\n/**\n * Static data for mapping mouse buttons.\n * @type {!Array<number>}\n */\ngoog.events.BrowserEvent.IEButtonMap = [\n  1,  // LEFT\n  4,  // MIDDLE\n  2   // RIGHT\n];\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * @param {Event} e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n */\ngoog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {\n  var type = this.type = e.type;\n\n  /**\n   * On touch devices use the first \"changed touch\" as the relevant touch.\n   * @type {Touch}\n   */\n  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;\n\n  // TODO(nicksantos): Change this.target to type EventTarget.\n  this.target = /** @type {Node} */ (e.target) || e.srcElement;\n\n  // TODO(nicksantos): Change this.currentTarget to type EventTarget.\n  this.currentTarget = /** @type {Node} */ (opt_currentTarget);\n\n  var relatedTarget = /** @type {Node} */ (e.relatedTarget);\n  if (relatedTarget) {\n    // There's a bug in FireFox where sometimes, relatedTarget will be a\n    // chrome element, and accessing any property of it will get a permission\n    // denied exception. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780\n    if (goog.userAgent.GECKO) {\n      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {\n        relatedTarget = null;\n      }\n    }\n    // TODO(arv): Use goog.events.EventType when it has been refactored into its\n    // own file.\n  } else if (type == goog.events.EventType.MOUSEOVER) {\n    relatedTarget = e.fromElement;\n  } else if (type == goog.events.EventType.MOUSEOUT) {\n    relatedTarget = e.toElement;\n  }\n\n  this.relatedTarget = relatedTarget;\n\n  if (!goog.isNull(relevantTouch)) {\n    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX :\n                                                         relevantTouch.pageX;\n    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY :\n                                                         relevantTouch.pageY;\n    this.screenX = relevantTouch.screenX || 0;\n    this.screenY = relevantTouch.screenY || 0;\n  } else {\n    // Webkit emits a lame warning whenever layerX/layerY is accessed.\n    // http://code.google.com/p/chromium/issues/detail?id=101733\n    this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?\n        e.offsetX :\n        e.layerX;\n    this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?\n        e.offsetY :\n        e.layerY;\n    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;\n    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;\n    this.screenX = e.screenX || 0;\n    this.screenY = e.screenY || 0;\n  }\n\n  this.button = e.button;\n\n  this.keyCode = e.keyCode || 0;\n  this.key = e.key || '';\n  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);\n  this.ctrlKey = e.ctrlKey;\n  this.altKey = e.altKey;\n  this.shiftKey = e.shiftKey;\n  this.metaKey = e.metaKey;\n  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\n  this.state = e.state;\n  this.event_ = e;\n  if (e.defaultPrevented) {\n    this.preventDefault();\n  }\n};\n\n\n/**\n * Tests to see which button was pressed during the event. This is really only\n * useful in IE and Gecko browsers. And in IE, it's only useful for\n * mousedown/mouseup events, because click only fires for the left mouse button.\n *\n * Safari 2 only reports the left button being clicked, and uses the value '1'\n * instead of 0. Opera only reports a mousedown event for the middle button, and\n * no mouse events for the right button. Opera has default behavior for left and\n * middle click that can only be overridden via a configuration setting.\n *\n * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.\n *\n * @param {goog.events.BrowserEvent.MouseButton} button The button\n *     to test for.\n * @return {boolean} True if button was pressed.\n */\ngoog.events.BrowserEvent.prototype.isButton = function(button) {\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\n    if (this.type == 'click') {\n      return button == goog.events.BrowserEvent.MouseButton.LEFT;\n    } else {\n      return !!(\n          this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);\n    }\n  } else {\n    return this.event_.button == button;\n  }\n};\n\n\n/**\n * Whether this has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @return {boolean} The result.\n */\ngoog.events.BrowserEvent.prototype.isMouseActionButton = function() {\n  // Webkit does not ctrl+click to be a right-click, so we\n  // normalize it to behave like Gecko and Opera.\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&\n      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.stopPropagation = function() {\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\n  if (this.event_.stopPropagation) {\n    this.event_.stopPropagation();\n  } else {\n    this.event_.cancelBubble = true;\n  }\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.preventDefault = function() {\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\n  var be = this.event_;\n  if (!be.preventDefault) {\n    be.returnValue = false;\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\n\n      try {\n        // Most keys can be prevented using returnValue. Some special keys\n        // require setting the keyCode to -1 as well:\n        //\n        // In IE7:\n        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)\n        //\n        // In IE8:\n        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)\n        //\n        // We therefore do this for all function keys as well as when Ctrl key\n        // is pressed.\n        var VK_F1 = 112;\n        var VK_F12 = 123;\n        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {\n          be.keyCode = -1;\n        }\n      } catch (ex) {\n        // IE throws an 'access denied' exception when trying to change\n        // keyCode in some situations (e.g. srcElement is input[type=file],\n        // or srcElement is an anchor tag rewritten by parent's innerHTML).\n        // Do nothing in this case.\n      }\n    }\n  } else {\n    be.preventDefault();\n  }\n};\n\n\n/**\n * @return {Event} The underlying browser event object.\n */\ngoog.events.BrowserEvent.prototype.getBrowserEvent = function() {\n  return this.event_;\n};\n","~:compiled-at",1574163696092,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.events.browserevent.js\",\n\"lineCount\":151,\n\"mappings\":\"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\",\n\"sources\":[\"goog/events/browserevent.js\"],\n\"sourcesContent\":[\"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview A patched, standardized event object for browser events.\\n *\\n * <pre>\\n * The patched event object contains the following members:\\n * - type           {string}    Event type, e.g. 'click'\\n * - target         {Object}    The element that actually triggered the event\\n * - currentTarget  {Object}    The element the listener is attached to\\n * - relatedTarget  {Object}    For mouseover and mouseout, the previous object\\n * - offsetX        {number}    X-coordinate relative to target\\n * - offsetY        {number}    Y-coordinate relative to target\\n * - clientX        {number}    X-coordinate relative to viewport\\n * - clientY        {number}    Y-coordinate relative to viewport\\n * - screenX        {number}    X-coordinate relative to the edge of the screen\\n * - screenY        {number}    Y-coordinate relative to the edge of the screen\\n * - button         {number}    Mouse button. Use isButton() to test.\\n * - keyCode        {number}    Key-code\\n * - ctrlKey        {boolean}   Was ctrl key depressed\\n * - altKey         {boolean}   Was alt key depressed\\n * - shiftKey       {boolean}   Was shift key depressed\\n * - metaKey        {boolean}   Was meta key depressed\\n * - defaultPrevented {boolean} Whether the default action has been prevented\\n * - state          {Object}    History state object\\n *\\n * NOTE: The keyCode member contains the raw browser keyCode. For normalized\\n * key and character code use {@link goog.events.KeyHandler}.\\n * </pre>\\n *\\n * @author arv@google.com (Erik Arvidsson)\\n */\\n\\ngoog.provide('goog.events.BrowserEvent');\\ngoog.provide('goog.events.BrowserEvent.MouseButton');\\n\\ngoog.require('goog.events.BrowserFeature');\\ngoog.require('goog.events.Event');\\ngoog.require('goog.events.EventType');\\ngoog.require('goog.reflect');\\ngoog.require('goog.userAgent');\\n\\n\\n\\n/**\\n * Accepts a browser event object and creates a patched, cross browser event\\n * object.\\n * The content of this object will not be initialized if no event object is\\n * provided. If this is the case, init() needs to be invoked separately.\\n * @param {Event=} opt_e Browser event object.\\n * @param {EventTarget=} opt_currentTarget Current target for event.\\n * @constructor\\n * @extends {goog.events.Event}\\n */\\ngoog.events.BrowserEvent = function(opt_e, opt_currentTarget) {\\n  goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');\\n\\n  /**\\n   * Target that fired the event.\\n   * @override\\n   * @type {Node}\\n   */\\n  this.target = null;\\n\\n  /**\\n   * Node that had the listener attached.\\n   * @override\\n   * @type {Node|undefined}\\n   */\\n  this.currentTarget = null;\\n\\n  /**\\n   * For mouseover and mouseout events, the related object for the event.\\n   * @type {Node}\\n   */\\n  this.relatedTarget = null;\\n\\n  /**\\n   * X-coordinate relative to target.\\n   * @type {number}\\n   */\\n  this.offsetX = 0;\\n\\n  /**\\n   * Y-coordinate relative to target.\\n   * @type {number}\\n   */\\n  this.offsetY = 0;\\n\\n  /**\\n   * X-coordinate relative to the window.\\n   * @type {number}\\n   */\\n  this.clientX = 0;\\n\\n  /**\\n   * Y-coordinate relative to the window.\\n   * @type {number}\\n   */\\n  this.clientY = 0;\\n\\n  /**\\n   * X-coordinate relative to the monitor.\\n   * @type {number}\\n   */\\n  this.screenX = 0;\\n\\n  /**\\n   * Y-coordinate relative to the monitor.\\n   * @type {number}\\n   */\\n  this.screenY = 0;\\n\\n  /**\\n   * Which mouse button was pressed.\\n   * @type {number}\\n   */\\n  this.button = 0;\\n\\n  /**\\n   * Key of key press.\\n   * @type {string}\\n   */\\n  this.key = '';\\n\\n  /**\\n   * Keycode of key press.\\n   * @type {number}\\n   */\\n  this.keyCode = 0;\\n\\n  /**\\n   * Keycode of key press.\\n   * @type {number}\\n   */\\n  this.charCode = 0;\\n\\n  /**\\n   * Whether control was pressed at time of event.\\n   * @type {boolean}\\n   */\\n  this.ctrlKey = false;\\n\\n  /**\\n   * Whether alt was pressed at time of event.\\n   * @type {boolean}\\n   */\\n  this.altKey = false;\\n\\n  /**\\n   * Whether shift was pressed at time of event.\\n   * @type {boolean}\\n   */\\n  this.shiftKey = false;\\n\\n  /**\\n   * Whether the meta key was pressed at time of event.\\n   * @type {boolean}\\n   */\\n  this.metaKey = false;\\n\\n  /**\\n   * History state object, only set for PopState events where it's a copy of the\\n   * state object provided to pushState or replaceState.\\n   * @type {Object}\\n   */\\n  this.state = null;\\n\\n  /**\\n   * Whether the default platform modifier key was pressed at time of event.\\n   * (This is control for all platforms except Mac, where it's Meta.)\\n   * @type {boolean}\\n   */\\n  this.platformModifierKey = false;\\n\\n  /**\\n   * The browser event object.\\n   * @private {Event}\\n   */\\n  this.event_ = null;\\n\\n  if (opt_e) {\\n    this.init(opt_e, opt_currentTarget);\\n  }\\n};\\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\\n\\n\\n/**\\n * Normalized button constants for the mouse.\\n * @enum {number}\\n */\\ngoog.events.BrowserEvent.MouseButton = {\\n  LEFT: 0,\\n  MIDDLE: 1,\\n  RIGHT: 2\\n};\\n\\n\\n/**\\n * Static data for mapping mouse buttons.\\n * @type {!Array<number>}\\n */\\ngoog.events.BrowserEvent.IEButtonMap = [\\n  1,  // LEFT\\n  4,  // MIDDLE\\n  2   // RIGHT\\n];\\n\\n\\n/**\\n * Accepts a browser event object and creates a patched, cross browser event\\n * object.\\n * @param {Event} e Browser event object.\\n * @param {EventTarget=} opt_currentTarget Current target for event.\\n */\\ngoog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {\\n  var type = this.type = e.type;\\n\\n  /**\\n   * On touch devices use the first \\\"changed touch\\\" as the relevant touch.\\n   * @type {Touch}\\n   */\\n  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;\\n\\n  // TODO(nicksantos): Change this.target to type EventTarget.\\n  this.target = /** @type {Node} */ (e.target) || e.srcElement;\\n\\n  // TODO(nicksantos): Change this.currentTarget to type EventTarget.\\n  this.currentTarget = /** @type {Node} */ (opt_currentTarget);\\n\\n  var relatedTarget = /** @type {Node} */ (e.relatedTarget);\\n  if (relatedTarget) {\\n    // There's a bug in FireFox where sometimes, relatedTarget will be a\\n    // chrome element, and accessing any property of it will get a permission\\n    // denied exception. See:\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780\\n    if (goog.userAgent.GECKO) {\\n      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {\\n        relatedTarget = null;\\n      }\\n    }\\n    // TODO(arv): Use goog.events.EventType when it has been refactored into its\\n    // own file.\\n  } else if (type == goog.events.EventType.MOUSEOVER) {\\n    relatedTarget = e.fromElement;\\n  } else if (type == goog.events.EventType.MOUSEOUT) {\\n    relatedTarget = e.toElement;\\n  }\\n\\n  this.relatedTarget = relatedTarget;\\n\\n  if (!goog.isNull(relevantTouch)) {\\n    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX :\\n                                                         relevantTouch.pageX;\\n    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY :\\n                                                         relevantTouch.pageY;\\n    this.screenX = relevantTouch.screenX || 0;\\n    this.screenY = relevantTouch.screenY || 0;\\n  } else {\\n    // Webkit emits a lame warning whenever layerX/layerY is accessed.\\n    // http://code.google.com/p/chromium/issues/detail?id=101733\\n    this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?\\n        e.offsetX :\\n        e.layerX;\\n    this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?\\n        e.offsetY :\\n        e.layerY;\\n    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;\\n    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;\\n    this.screenX = e.screenX || 0;\\n    this.screenY = e.screenY || 0;\\n  }\\n\\n  this.button = e.button;\\n\\n  this.keyCode = e.keyCode || 0;\\n  this.key = e.key || '';\\n  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);\\n  this.ctrlKey = e.ctrlKey;\\n  this.altKey = e.altKey;\\n  this.shiftKey = e.shiftKey;\\n  this.metaKey = e.metaKey;\\n  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\\n  this.state = e.state;\\n  this.event_ = e;\\n  if (e.defaultPrevented) {\\n    this.preventDefault();\\n  }\\n};\\n\\n\\n/**\\n * Tests to see which button was pressed during the event. This is really only\\n * useful in IE and Gecko browsers. And in IE, it's only useful for\\n * mousedown/mouseup events, because click only fires for the left mouse button.\\n *\\n * Safari 2 only reports the left button being clicked, and uses the value '1'\\n * instead of 0. Opera only reports a mousedown event for the middle button, and\\n * no mouse events for the right button. Opera has default behavior for left and\\n * middle click that can only be overridden via a configuration setting.\\n *\\n * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.\\n *\\n * @param {goog.events.BrowserEvent.MouseButton} button The button\\n *     to test for.\\n * @return {boolean} True if button was pressed.\\n */\\ngoog.events.BrowserEvent.prototype.isButton = function(button) {\\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\\n    if (this.type == 'click') {\\n      return button == goog.events.BrowserEvent.MouseButton.LEFT;\\n    } else {\\n      return !!(\\n          this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);\\n    }\\n  } else {\\n    return this.event_.button == button;\\n  }\\n};\\n\\n\\n/**\\n * Whether this has an \\\"action\\\"-producing mouse button.\\n *\\n * By definition, this includes left-click on windows/linux, and left-click\\n * without the ctrl key on Macs.\\n *\\n * @return {boolean} The result.\\n */\\ngoog.events.BrowserEvent.prototype.isMouseActionButton = function() {\\n  // Webkit does not ctrl+click to be a right-click, so we\\n  // normalize it to behave like Gecko and Opera.\\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&\\n      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);\\n};\\n\\n\\n/**\\n * @override\\n */\\ngoog.events.BrowserEvent.prototype.stopPropagation = function() {\\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\\n  if (this.event_.stopPropagation) {\\n    this.event_.stopPropagation();\\n  } else {\\n    this.event_.cancelBubble = true;\\n  }\\n};\\n\\n\\n/**\\n * @override\\n */\\ngoog.events.BrowserEvent.prototype.preventDefault = function() {\\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\\n  var be = this.event_;\\n  if (!be.preventDefault) {\\n    be.returnValue = false;\\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\\n\\n      try {\\n        // Most keys can be prevented using returnValue. Some special keys\\n        // require setting the keyCode to -1 as well:\\n        //\\n        // In IE7:\\n        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)\\n        //\\n        // In IE8:\\n        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)\\n        //\\n        // We therefore do this for all function keys as well as when Ctrl key\\n        // is pressed.\\n        var VK_F1 = 112;\\n        var VK_F12 = 123;\\n        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {\\n          be.keyCode = -1;\\n        }\\n      } catch (ex) {\\n        // IE throws an 'access denied' exception when trying to change\\n        // keyCode in some situations (e.g. srcElement is input[type=file],\\n        // or srcElement is an anchor tag rewritten by parent's innerHTML).\\n        // Do nothing in this case.\\n      }\\n    }\\n  } else {\\n    be.preventDefault();\\n  }\\n};\\n\\n\\n/**\\n * @return {Event} The underlying browser event object.\\n */\\ngoog.events.BrowserEvent.prototype.getBrowserEvent = function() {\\n  return this.event_;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"events\",\"BrowserEvent\",\"goog.events.BrowserEvent\",\"opt_e\",\"opt_currentTarget\",\"base\",\"type\",\"target\",\"currentTarget\",\"relatedTarget\",\"offsetX\",\"offsetY\",\"clientX\",\"clientY\",\"screenX\",\"screenY\",\"button\",\"key\",\"keyCode\",\"charCode\",\"ctrlKey\",\"altKey\",\"shiftKey\",\"metaKey\",\"state\",\"platformModifierKey\",\"event_\",\"init\",\"inherits\",\"Event\",\"MouseButton\",\"LEFT\",\"MIDDLE\",\"RIGHT\",\"IEButtonMap\",\"prototype\",\"goog.events.BrowserEvent.prototype.init\",\"e\",\"relevantTouch\",\"changedTouches\",\"srcElement\",\"userAgent\",\"GECKO\",\"reflect\",\"canAccessProperty\",\"EventType\",\"MOUSEOVER\",\"fromElement\",\"MOUSEOUT\",\"toElement\",\"isNull\",\"undefined\",\"pageX\",\"pageY\",\"WEBKIT\",\"layerX\",\"layerY\",\"MAC\",\"defaultPrevented\",\"preventDefault\",\"isButton\",\"goog.events.BrowserEvent.prototype.isButton\",\"BrowserFeature\",\"HAS_W3C_BUTTON\",\"isMouseActionButton\",\"goog.events.BrowserEvent.prototype.isMouseActionButton\",\"stopPropagation\",\"goog.events.BrowserEvent.prototype.stopPropagation\",\"superClass_\",\"call\",\"cancelBubble\",\"goog.events.BrowserEvent.prototype.preventDefault\",\"be\",\"returnValue\",\"SET_KEY_CODE_TO_PREVENT_DEFAULT\",\"VK_F1\",\"VK_F12\",\"ex\",\"getBrowserEvent\",\"goog.events.BrowserEvent.prototype.getBrowserEvent\"]\n}\n"]